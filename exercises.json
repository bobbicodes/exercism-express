{
  "diamond" : "(ns diamond)\r\n\r\n(defn diamond [] \r\n  \r\n)\r\n",
  "isogram" : "(ns isogram)\r\n\r\n(defn isogram? [] \r\n  \r\n)\r\n",
  "gigasecond" : "(ns gigasecond)\r\n\r\n(defn from []  \r\n    \r\n)\r\n",
  "leap" : "(ns leap)\r\n\r\n(defn leap-year? [year] ;; <- argslist goes here\r\n  \r\n)\r\n",
  "zipper" : "(ns zipper)\r\n\r\n(defn from-tree [] \r\n  )\r\n\r\n(defn value [] \r\n  )\r\n\r\n(defn left []\r\n  )\r\n\r\n(defn right []\r\n  )\r\n\r\n(defn to-tree []\r\n  )\r\n\r\n(defn up []\r\n  )\r\n\r\n(defn set-value []\r\n  )\r\n\r\n(defn set-left []\r\n  )\r\n\r\n(defn set-right []\r\n  )\r\n",
  "roman_numerals" : "(ns roman-numerals)\r\n\r\n(defn numerals [] \r\n      \r\n)\r\n",
  "minesweeper" : "(ns minesweeper)\r\n\r\n(defn draw [] \r\n  \r\n)\r\n",
  "pov" : "(ns pov)\r\n\r\n(defn of [] \r\n      \r\n)\r\n\r\n(defn path-from-to [] \r\n  \r\n)\r\n",
  "matching_brackets" : "(ns matching-brackets)\r\n\r\n(defn valid? [] \r\n  \r\n)\r\n",
  "dominoes" : "(ns dominoes)\r\n\r\n(defn can-chain? [] \r\n  \r\n)\r\n",
  "rotational_cipher" : "(ns rotational-cipher)\r\n\r\n(defn rotate [] \r\n      \r\n)\r\n",
  "kindergarten_garden" : "(ns kindergarten-garden)\r\n\r\n(defn garden [] \r\n  \r\n)\r\n",
  "all_your_base" : "(ns all-your-base)\r\n\r\n(defn convert [] \r\n  \r\n)\r\n",
  "spiral_matrix" : "(ns spiral-matrix)\r\n\r\n(defn spiral [n] \r\n  \r\n)\r\n",
  "anagram" : "(ns anagram)\r\n\r\n(defn anagrams-for [word prospect-list] \r\n  \r\n)\r\n",
  "atbash_cipher" : "(ns atbash-cipher)\r\n\r\n(defn encode [] \r\n  \r\n)\r\n",
  "grade_school" : "(ns grade-school)\r\n\r\n(defn grade [school grade]  \r\n    \r\n)\r\n\r\n(defn add [school name grade]  \r\n    \r\n)\r\n\r\n(defn sorted [school]  \r\n    \r\n)\r\n",
  "meetup" : "(ns meetup)\r\n\r\n(defn meetup [] \r\n  \r\n  )",
  "two_fer" : "(ns two-fer)\r\n\r\n(defn two-fer [name] \r\n  \r\n)\r\n",
  "run_length_encoding" : "(ns run-length-encoding)\r\n\r\n(defn run-length-encode\r\n  \"encodes a string with run-length-encoding\"\r\n  [plain-text])\r\n\r\n(defn run-length-decode\r\n  \"decodes a run-length-encoded string\"\r\n  [cipher-text])\r\n",
  "wordy" : "(ns wordy)\r\n\r\n(defn evaluate [] \r\n      \r\n)\r\n",
  "sieve" : "(ns sieve)\r\n\r\n(defn sieve [] \r\n      \r\n)\r\n",
  "binary" : "(ns binary)\r\n\r\n(defn to-decimal [] \r\n  \r\n)\r\n",
  "pig_latin" : "(ns pig-latin)\r\n\r\n(defn translate [] \r\n      \r\n)\r\n",
  "bob" : "(ns bob)\r\n\r\n(defn response-for [s] \r\n  \r\n)\r\n",
  "rna_transcription" : "(ns rna-transcription)\r\n\r\n(defn to-rna [dna] \r\n  \r\n)\r\n",
  "pascals_triangle" : "(ns pascals-triangle)\r\n\r\n(def triangle)\r\n\r\n(defn row [] \r\n  \r\n)\r\n",
  "space_age" : "(ns space-age)\r\n\r\n(defn on-mercury [] \r\n  \r\n)\r\n\r\n(defn on-venus [] \r\n  \r\n)\r\n\r\n(defn on-earth [] \r\n      \r\n)\r\n\r\n(defn on-mars [] \r\n  \r\n)\r\n\r\n(defn on-jupiter [] \r\n  \r\n)\r\n\r\n(defn on-saturn [] \r\n  \r\n)\r\n\r\n(defn on-uranus [] \r\n  \r\n)\r\n\r\n(defn on-neptune [] \r\n  \r\n)\r\n",
  "queen_attack" : "(ns queen-attack)\r\n\r\n(defn board-string [] ;; <- glister goes here\r\n      \r\n)\r\n\r\n(defn can-attack [] \r\n  \r\n)\r\n",
  "acronym" : "(ns acronym)\r\n\r\n(defn acronym\r\n  \"Converts phrase to its acronym.\"\r\n  [phrase]\r\n  )\r\n",
  "secret_handshake" : "(ns secret-handshake)\r\n\r\n(defn commands [] \r\n      \r\n)\r\n",
  "crypto_square" : "(ns crypto-square)\r\n\r\n(defn normalize-plaintext [] \r\n  \r\n)\r\n\r\n(defn square-size [] \r\n  \r\n)\r\n\r\n(defn plaintext-segments [] \r\n  \r\n)\r\n\r\n(defn ciphertext [] \r\n  \r\n)\r\n\r\n(defn normalize-ciphertext [] \r\n  \r\n)\r\n",
  "word_count" : "(ns word-count)\r\n\r\n(defn word-count [s] \r\n  \r\n)\r\n",
  "armstrong_numbers" : "(ns armstrong-numbers)\r\n\r\n(defn armstrong? [num] \r\n  \r\n)\r\n",
  "hamming" : "(ns hamming)\r\n\r\n(defn distance [strand1 strand2] ; <- arglist goes here\r\n  \r\n)\r\n",
  "scrabble_score" : "(ns scrabble-score)\r\n\r\n(defn score-letter [] \r\n      \r\n)\r\n\r\n(defn score-word [] \r\n  \r\n)\r\n",
  "octal" : "(ns octal)\r\n\r\n(defn to-decimal [] \r\n  \r\n)\r\n",
  "raindrops" : "(ns raindrops)\r\n\r\n(defn convert [] \r\n      \r\n)\r\n",
  "binary_search_tree" : "(ns binary-search-tree)\r\n\r\n(defn value [] \r\n  \r\n)\r\n\r\n(defn singleton [] \r\n  \r\n)\r\n\r\n(defn insert [] \r\n  \r\n)\r\n\r\n(defn left [] \r\n  \r\n)\r\n\r\n(defn right [] \r\n  \r\n)\r\n\r\n(defn to-list [] \r\n  \r\n)\r\n\r\n(defn from-list [] \r\n  \r\n)\r\n",
  "nth_prime" : "(ns nth-prime)\r\n\r\n(defn nth-prime \r\n  \"Returns the prime number in the nth position.\"\r\n  [n] \r\n  \r\n  )\r\n",
  "largest_series_product" : "(ns largest-series-product)\r\n\r\n(defn largest-product [] \r\n      \r\n)\r\n",
  "protein_translation" : "(ns protein-translation)\r\n\r\n(defn translate-codon [] \r\n      \r\n)\r\n\r\n(defn translate-rna [] \r\n  \r\n)\r\n",
  "sublist" : "(ns sublist)\r\n\r\n(defn classify [list1 list2] \r\n      \r\n)\r\n",
  "prime_factors" : "(ns prime-factors)\r\n\r\n(defn of [] \r\n      \r\n)\r\n",
  "triangle" : "(ns triangle)\r\n\r\n(defn is-valid? [] \r\n  \r\n)\r\n\r\n(defn equilateral? [] \r\n  \r\n)\r\n\r\n(defn isosceles? [] \r\n  \r\n)\r\n\r\n(defn scalene? [] \r\n  \r\n)\r\n",
  "reverse_string" : "(ns reverse-string)\r\n\r\n(defn reverse-string [s] \r\n  \r\n)\r\n",
  "beer_song" : "(ns beer-song)\r\n\r\n(defn verse\r\n  \"Returns the nth verse of the song.\"\r\n  [num])\r\n\r\n(defn sing\r\n  \"Given a start and an optional end, returns all verses in this interval. If\r\n  end is not given, the whole song from start is sung.\"\r\n  ([start])\r\n  ([start end]))\r\n",
  "binary_search" : "(ns binary-search)\r\n\r\n(defn search-for [] \r\n  \r\n)\r\n\r\n(defn middle [] \r\n  \r\n)\r\n",
  "clock" : "(ns clock)\r\n\r\n(defn clock->string [clock] \r\n  \r\n)\r\n\r\n(defn clock [hours minutes] \r\n  \r\n)\r\n\r\n(defn add-time [clock time] \r\n  \r\n)\r\n",
  "allergies" : "(ns allergies)\r\n\r\n(defn allergies [] \r\n  \r\n)\r\n\r\n(defn allergic-to? [] \r\n  \r\n)\r\n",
  "say" : "(ns say)\r\n\r\n(defn number [num] \r\n  \r\n)\r\n",
  "luhn" : "(ns luhn)\r\n\r\n(defn valid? [] \r\n  \r\n)\r\n",
  "difference_of_squares" : "(ns difference-of-squares)\r\n\r\n(defn difference [] \r\n  \r\n)\r\n\r\n(defn sum-of-squares [] \r\n  \r\n)\r\n\r\n(defn square-of-sum [] \r\n  \r\n)\r\n",
  "complex_numbers" : "(ns complex-numbers)\r\n\r\n(defn real [[a b]] \r\n  \r\n)\r\n\r\n(defn imaginary [[a b]] \r\n  \r\n)\r\n\r\n(defn abs [[a b]] \r\n  \r\n)\r\n\r\n(defn conjugate [[a b]] \r\n  \r\n)\r\n\r\n(defn add [[a b] [c d]] \r\n  \r\n)\r\n\r\n(defn sub [[a b] [c d]] \r\n  \r\n)\r\n\r\n(defn mul [[a b] [c d]] \r\n  \r\n)\r\n\r\n(defn div [[a b] [c d]] \r\n  \r\n)\r\n",
  "poker" : "(ns poker)\r\n\r\n(defn best-hands [hands] \r\n  \r\n)\r\n",
  "go_counting" : "(ns go-counting)\r\n\r\n(defn territory [grid [x y]])\r\n\r\n(defn territories [grid])\r\n",
  "accumulate" : "(ns accumulate)\r\n\r\n(defn accumulate [] \r\n      \r\n)\r\n",
  "hexadecimal" : "(ns hexadecimal)\r\n\r\n(defn hex-to-int [] \r\n  \r\n)\r\n",
  "series" : "(ns series)\r\n\r\n(defn slices [string length] \r\n  \r\n)\r\n",
  "yacht" : "(ns yacht)\r\n\r\n(defn score []\r\n  )\r\n",
  "grains" : "(ns grains)\r\n\r\n(defn square [] \r\n    \r\n)\r\n\r\n(defn total []  \r\n    \r\n)\r\n",
  "robot_simulator" : "(ns robot-simulator)\r\n\r\n(defn robot [] \r\n      \r\n)\r\n\r\n(defn simulate [] \r\n  \r\n)\r\n\r\n(defn turn-right [] \r\n  \r\n)\r\n\r\n(defn turn-left [] \r\n  \r\n)\r\n",
  "proverb" : "(ns proverb)\r\n\r\n(defn recite [] \r\n    \r\n)\r\n",
  "flatten_array" : "(ns flatten-array)\r\n\r\n(defn flatten [arr] \r\n  \r\n)\r\n",
  "pangram" : "(ns pangram)\r\n\r\n(defn pangram? [] \r\n  \r\n)\r\n",
  "bank_account" : "(ns bank-account)\r\n\r\n(defn open-account [] \r\n  \r\n  )\r\n\r\n(defn close-account [] \r\n  \r\n  )\r\n\r\n(defn get-balance [] \r\n  \r\n  )\r\n\r\n(defn update-balance [] \r\n  \r\n  )\r\n",
  "strain" : "(ns strain)\r\n\r\n(defn retain [] \r\n      \r\n)\r\n\r\n(defn discard [] \r\n  \r\n)\r\n",
  "sum_of_multiples" : "(ns sum-of-multiples)\r\n\r\n(defn sum-of-multiples [] \r\n      \r\n)\r\n",
  "collatz_conjecture" : "(ns collatz-conjecture)\r\n\r\n(defn collatz [num] \r\n  \r\n)\r\n",
  "trinary" : "(ns trinary)\r\n\r\n(defn to-decimal [] \r\n      \r\n)\r\n",
  "etl" : "(ns etl)\r\n\r\n(defn transform [source] \r\n  \r\n)\r\n",
  "perfect_numbers" : "(ns perfect-numbers)\r\n\r\n(defn classify [] \r\n      \r\n)\r\n",
  "hello_world" : "(ns hello-world)\r\n\r\n(defn hello []\r\n  \"Goodbye, Mars!\")\r\n",
  "nucleotide_count" : "(ns nucleotide-count)\r\n\r\n(defn count-of-nucleotide-in-strand [nucleotide strand] \r\n  \r\n)\r\n\r\n\r\n(defn nucleotide-counts [strand] \r\n  \r\n)\r\n",
  "phone_number" : "(ns phone-number)\r\n\r\n(defn number [num-string] \r\n      \r\n)\r\n\r\n(defn area-code [num-string] \r\n  \r\n)\r\n\r\n(defn pretty-print [num-string] \r\n  \r\n)\r\n",
  "change" : "(ns change)\r\n\r\n(defn issue [] \r\n  \r\n)\r\n",
  "isbn_verifier" : "(ns isbn-verifier)\r\n\r\n(defn isbn? [isbn] \r\n  \r\n)\r\n",
  "robot_name" : "(ns robot-name)\r\n\r\n(defn robot [] \r\n  \r\n)\r\n\r\n(defn robot-name [robot] \r\n      \r\n)\r\n\r\n(defn reset-name [robot] \r\n  \r\n)\r\n"
}