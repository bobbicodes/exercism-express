{
  "diamond" : "# Instructions\r\n\r\nThe diamond kata takes as its input a letter, and outputs it in a diamond\r\nshape. Given a letter, it prints a diamond starting with 'A', with the\r\nsupplied letter at the widest point.\r\n\r\n## Requirements\r\n\r\n* The first row contains one 'A'.\r\n* The last row contains one 'A'.\r\n* All rows, except the first and last, have exactly two identical letters.\r\n* All rows have as many trailing spaces as leading spaces. (This might be 0).\r\n* The diamond is horizontally symmetric.\r\n* The diamond is vertically symmetric.\r\n* The diamond has a square shape (width equals height).\r\n* The letters form a diamond shape.\r\n* The top half has the letters in ascending order.\r\n* The bottom half has the letters in descending order.\r\n* The four corners (containing the spaces) are triangles.\r\n\r\n## Examples\r\n\r\nIn the following examples, spaces are indicated by `·` characters.\r\n\r\nDiamond for letter 'A':\r\n\r\n```text\r\nA\r\n```\r\n\r\nDiamond for letter 'C':\r\n\r\n```text\r\n··A··\r\n·B·B·\r\nC···C\r\n·B·B·\r\n··A··\r\n```\r\n\r\nDiamond for letter 'E':\r\n\r\n```text\r\n····A····\r\n···B·B···\r\n··C···C··\r\n·D·····D·\r\nE·······E\r\n·D·····D·\r\n··C···C··\r\n···B·B···\r\n····A····\r\n```\r\n",
  "isogram" : "# Instructions\r\n\r\nDetermine if a word or phrase is an isogram.\r\n\r\nAn isogram (also known as a \"nonpattern word\") is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times.\r\n\r\nExamples of isograms:\r\n\r\n- lumberjacks\r\n- background\r\n- downstream\r\n- six-year-old\r\n\r\nThe word *isograms*, however, is not an isogram, because the s repeats.\r\n",
  "complex_numbers" : "# Instructions\r\n\r\nA complex number is a number in the form `a + b * i` where `a` and `b` are real and `i` satisfies `i^2 = -1`.\r\n\r\n`a` is called the real part and `b` is called the imaginary part of `z`.\r\nThe conjugate of the number `a + b * i` is the number `a - b * i`.\r\nThe absolute value of a complex number `z = a + b * i` is a real number `|z| = sqrt(a^2 + b^2)`. The square of the absolute value `|z|^2` is the result of multiplication of `z` by its complex conjugate.\r\n\r\nThe sum/difference of two complex numbers involves adding/subtracting their real and imaginary parts separately:\r\n`(a + i * b) + (c + i * d) = (a + c) + (b + d) * i`,\r\n`(a + i * b) - (c + i * d) = (a - c) + (b - d) * i`.\r\n\r\nMultiplication result is by definition\r\n`(a + i * b) * (c + i * d) = (a * c - b * d) + (b * c + a * d) * i`.\r\n\r\nThe reciprocal of a non-zero complex number is\r\n`1 / (a + i * b) = a/(a^2 + b^2) - b/(a^2 + b^2) * i`.\r\n\r\nDividing a complex number `a + i * b` by another `c + i * d` gives:\r\n`(a + i * b) / (c + i * d) = (a * c + b * d)/(c^2 + d^2) + (b * c - a * d)/(c^2 + d^2) * i`.\r\n\r\nRaising e to a complex exponent can be expressed as `e^(a + i * b) = e^a * e^(i * b)`, the last term of which is given by Euler's formula `e^(i * b) = cos(b) + i * sin(b)`.\r\n\r\nImplement the following operations:\r\n - addition, subtraction, multiplication and division of two complex numbers,\r\n - conjugate, absolute value, exponent of a given complex number.\r\n\r\n\r\nAssume the programming language you are using does not have an implementation of complex numbers.\r\n",
  "gigasecond" : "# Instructions\r\n\r\nYour task is to determine the date and time one gigasecond after a certain date.\r\n\r\nA gigasecond is one thousand million seconds.\r\nThat is a one with nine zeros after it.\r\n\r\nIf you were born on _January 24th, 2015 at 22:00 (10:00:00pm)_, then you would be a gigasecond old on _October 2nd, 2046 at 23:46:40 (11:46:40pm)_.\r\n",
  "difference_of_squares" : "# Instructions\r\n\r\nFind the difference between the square of the sum and the sum of the squares of the first N natural numbers.\r\n\r\nThe square of the sum of the first ten natural numbers is\r\n(1 + 2 + ... + 10)² = 55² = 3025.\r\n\r\nThe sum of the squares of the first ten natural numbers is\r\n1² + 2² + ... + 10² = 385.\r\n\r\nHence the difference between the square of the sum of the first\r\nten natural numbers and the sum of the squares of the first ten\r\nnatural numbers is 3025 - 385 = 2640.\r\n\r\nYou are not expected to discover an efficient solution to this yourself from\r\nfirst principles; research is allowed, indeed, encouraged. Finding the best\r\nalgorithm for the problem is a key skill in software engineering.\r\n",
  "pascals_triangle" : "# Instructions\r\n\r\nCompute Pascal's triangle up to a given number of rows.\r\n\r\nIn Pascal's Triangle each number is computed by adding the numbers to\r\nthe right and left of the current position in the previous row.\r\n\r\n```text\r\n    1\r\n   1 1\r\n  1 2 1\r\n 1 3 3 1\r\n1 4 6 4 1\r\n# ... etc\r\n```\r\n",
  "leap" : "# Instructions\r\n\r\nGiven a year, report if it is a leap year.\r\n\r\nThe tricky thing here is that a leap year in the Gregorian calendar occurs:\r\n\r\n```text\r\non every year that is evenly divisible by 4\r\n  except every year that is evenly divisible by 100\r\n    unless the year is also evenly divisible by 400\r\n```\r\n\r\nFor example, 1997 is not a leap year, but 1996 is.  1900 is not a leap\r\nyear, but 2000 is.\r\n\r\n## Notes\r\n\r\nThough our exercise adopts some very simple rules, there is more to\r\nlearn!\r\n\r\nFor a delightful, four minute explanation of the whole leap year\r\nphenomenon, go watch [this youtube video][video].\r\n\r\n[video]: http://www.youtube.com/watch?v=xX96xng7sAE\r\n",
  "zipper" : "# Description\r\n\r\nCreating a zipper for a binary tree.\r\n\r\n[Zippers][zipper] are a purely functional way of navigating within a data structure and manipulating it.\r\nThey essentially contain a data structure and a pointer into that data structure (called the focus).\r\n\r\nFor example given a rose tree (where each node contains a value and a list of child nodes) a zipper might support these operations:\r\n\r\n- `from_tree` (get a zipper out of a rose tree, the focus is on the root node)\r\n- `to_tree` (get the rose tree out of the zipper)\r\n- `value` (get the value of the focus node)\r\n- `prev` (move the focus to the previous child of the same parent,\r\n  returns a new zipper)\r\n- `next` (move the focus to the next child of the same parent, returns a\r\n  new zipper)\r\n- `up` (move the focus to the parent, returns a new zipper)\r\n- `set_value` (set the value of the focus node, returns a new zipper)\r\n- `insert_before` (insert a new subtree before the focus node, it\r\n  becomes the `prev` of the focus node, returns a new zipper)\r\n- `insert_after` (insert a new subtree after the focus node, it becomes\r\n  the `next` of the focus node, returns a new zipper)\r\n- `delete` (removes the focus node and all subtrees, focus moves to the\r\n  `next` node if possible otherwise to the `prev` node if possible,\r\n  otherwise to the parent node, returns a new zipper)\r\n\r\n[zipper]: https://en.wikipedia.org/wiki/Zipper_%28data_structure%29\r\n",
  "minesweeper" : "# Instructions\r\n\r\nAdd the mine counts to a completed Minesweeper board.\r\n\r\nMinesweeper is a popular game where the user has to find the mines using\r\nnumeric hints that indicate how many mines are directly adjacent\r\n(horizontally, vertically, diagonally) to a square.\r\n\r\nIn this exercise you have to create some code that counts the number of\r\nmines adjacent to a given empty square and replaces that square with the\r\ncount.\r\n\r\nThe board is a rectangle composed of blank space (' ') characters. A mine\r\nis represented by an asterisk ('\\*') character.\r\n\r\nIf a given space has no adjacent mines at all, leave that square blank.\r\n\r\n## Examples\r\n\r\nFor example you may receive a 5 x 4 board like this (empty spaces are\r\nrepresented here with the '·' character for display on screen):\r\n\r\n```\r\n·*·*·\r\n··*··\r\n··*··\r\n·····\r\n```\r\n\r\nAnd your code will transform it into this:\r\n\r\n```\r\n1*3*1\r\n13*31\r\n·2*2·\r\n·111·\r\n```\r\n",
  "space_age" : "# Instructions\r\n\r\nGiven an age in seconds, calculate how old someone would be on:\r\n\r\n   - Mercury: orbital period 0.2408467 Earth years\r\n   - Venus: orbital period 0.61519726 Earth years\r\n   - Earth: orbital period 1.0 Earth years, 365.25 Earth days, or 31557600 seconds\r\n   - Mars: orbital period 1.8808158 Earth years\r\n   - Jupiter: orbital period 11.862615 Earth years\r\n   - Saturn: orbital period 29.447498 Earth years\r\n   - Uranus: orbital period 84.016846 Earth years\r\n   - Neptune: orbital period 164.79132 Earth years\r\n\r\nSo if you were told someone were 1,000,000,000 seconds old, you should\r\nbe able to say that they're 31.69 Earth-years old.\r\n\r\nIf you're wondering why Pluto didn't make the cut, go watch [this\r\nyoutube video](http://www.youtube.com/watch?v=Z_2gbGXzFbs).\r\n",
  "flatten_array" : "# Instructions\r\n\r\nTake a nested list and return a single flattened list with all values except nil/null.\r\n\r\nThe challenge is to write a function that accepts an arbitrarily-deep nested list-like structure and returns a flattened structure without any nil/null values.\r\n\r\nFor Example\r\n\r\ninput: [1,[2,3,null,4],[null],5]\r\n\r\noutput: [1,2,3,4,5]\r\n",
  "crypto_square" : "# Instructions\r\n\r\nImplement the classic method for composing secret messages called a square code.\r\n\r\nGiven an English text, output the encoded version of that text.\r\n\r\nFirst, the input is normalized: the spaces and punctuation are removed\r\nfrom the English text and the message is downcased.\r\n\r\nThen, the normalized characters are broken into rows.  These rows can be\r\nregarded as forming a rectangle when printed with intervening newlines.\r\n\r\nFor example, the sentence\r\n\r\n```text\r\n\"If man was meant to stay on the ground, god would have given us roots.\"\r\n```\r\n\r\nis normalized to:\r\n\r\n```text\r\n\"ifmanwasmeanttostayonthegroundgodwouldhavegivenusroots\"\r\n```\r\n\r\nThe plaintext should be organized in to a rectangle.  The size of the\r\nrectangle (`r x c`) should be decided by the length of the message,\r\nsuch that `c >= r` and `c - r <= 1`, where `c` is the number of columns\r\nand `r` is the number of rows.\r\n\r\nOur normalized text is 54 characters long, dictating a rectangle with\r\n`c = 8` and `r = 7`:\r\n\r\n```text\r\n\"ifmanwas\"\r\n\"meanttos\"\r\n\"tayonthe\"\r\n\"groundgo\"\r\n\"dwouldha\"\r\n\"vegivenu\"\r\n\"sroots  \"\r\n```\r\n\r\nThe coded message is obtained by reading down the columns going left to\r\nright.\r\n\r\nThe message above is coded as:\r\n\r\n```text\r\n\"imtgdvsfearwermayoogoanouuiontnnlvtwttddesaohghnsseoau\"\r\n```\r\n\r\nOutput the encoded text in chunks that fill perfect rectangles `(r X c)`,\r\nwith `c` chunks of `r` length, separated by spaces. For phrases that are\r\n`n` characters short of the perfect rectangle, pad each of the last `n`\r\nchunks with a single trailing space.\r\n\r\n```text\r\n\"imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn  sseoau \"\r\n```\r\n\r\nNotice that were we to stack these, we could visually decode the\r\nciphertext back in to the original message:\r\n\r\n```text\r\n\"imtgdvs\"\r\n\"fearwer\"\r\n\"mayoogo\"\r\n\"anouuio\"\r\n\"ntnnlvt\"\r\n\"wttddes\"\r\n\"aohghn \"\r\n\"sseoau \"\r\n```\r\n",
  "pov" : "# Instructions\r\n\r\nReparent a graph on a selected node.\r\n\r\nThis exercise is all about re-orientating a graph to see things from a different\r\npoint of view. For example family trees are usually presented from the\r\nancestor's perspective:\r\n\r\n```text\r\n    +------0------+\r\n    |      |      |\r\n  +-1-+  +-2-+  +-3-+\r\n  |   |  |   |  |   |\r\n  4   5  6   7  8   9\r\n```\r\n\r\nBut the same information can be presented from the perspective of any other node\r\nin the graph, by pulling it up to the root and dragging its relationships along\r\nwith it. So the same graph from 6's perspective would look like:\r\n\r\n```text\r\n        6\r\n        |\r\n  +-----2-----+\r\n  |           |\r\n  7     +-----0-----+\r\n        |           |\r\n      +-1-+       +-3-+\r\n      |   |       |   |\r\n      4   5       8   9\r\n```\r\n\r\nThis lets us more simply describe the paths between two nodes. So for example\r\nthe path from 6-9 (which in the first graph goes up to the root and then down to\r\na different leaf node) can be seen to follow the path 6-2-0-3-9\r\n\r\nThis exercise involves taking an input graph and re-orientating it from the point\r\nof view of one of the nodes.\r\n",
  "prime_factors" : "# Instructions\r\n\r\nCompute the prime factors of a given natural number.\r\n\r\nA prime number is only evenly divisible by itself and 1.\r\n\r\nNote that 1 is not a prime number.\r\n\r\n## Example\r\n\r\nWhat are the prime factors of 60?\r\n\r\n- Our first divisor is 2. 2 goes into 60, leaving 30.\r\n- 2 goes into 30, leaving 15.\r\n  - 2 doesn't go cleanly into 15. So let's move on to our next divisor, 3.\r\n- 3 goes cleanly into 15, leaving 5.\r\n  - 3 does not go cleanly into 5. The next possible factor is 4.\r\n  - 4 does not go cleanly into 5. The next possible factor is 5.\r\n- 5 does go cleanly into 5.\r\n- We're left only with 1, so now, we're done.\r\n\r\nOur successful divisors in that computation represent the list of prime\r\nfactors of 60: 2, 2, 3, and 5.\r\n\r\nYou can check this yourself:\r\n\r\n- 2 * 2 * 3 * 5\r\n- = 4 * 15\r\n- = 60\r\n- Success!\r\n",
  "dominoes" : "# Instructions\r\n\r\nMake a chain of dominoes.\r\n\r\nCompute a way to order a given set of dominoes in such a way that they form a\r\ncorrect domino chain (the dots on one half of a stone match the dots on the\r\nneighbouring half of an adjacent stone) and that dots on the halves of the\r\nstones which don't have a neighbour (the first and last stone) match each other.\r\n\r\nFor example given the stones `[2|1]`, `[2|3]` and `[1|3]` you should compute something\r\nlike `[1|2] [2|3] [3|1]` or `[3|2] [2|1] [1|3]` or `[1|3] [3|2] [2|1]` etc, where the first and last numbers are the same.\r\n\r\nFor stones `[1|2]`, `[4|1]` and `[2|3]` the resulting chain is not valid: `[4|1] [1|2] [2|3]`'s first and last numbers are not the same. 4 != 3\r\n\r\nSome test cases may use duplicate stones in a chain solution, assume that multiple Domino sets are being used.\r\n",
  "spiral_matrix" : "# Instructions\r\n\r\nGiven the size, return a square matrix of numbers in spiral order.\r\n\r\nThe matrix should be filled with natural numbers, starting from 1\r\nin the top-left corner, increasing in an inward, clockwise spiral order,\r\nlike these examples:\r\n\r\n## Examples\r\n### Spiral matrix of size 3\r\n\r\n```text\r\n1 2 3\r\n8 9 4\r\n7 6 5\r\n```\r\n\r\n### Spiral matrix of size 4\r\n\r\n```text\r\n 1  2  3 4\r\n12 13 14 5\r\n11 16 15 6\r\n10  9  8 7\r\n```\r\n",
  "robot_name" : "# Instructions\r\n\r\nManage robot factory settings.\r\n\r\nWhen a robot comes off the factory floor, it has no name.\r\n\r\nThe first time you turn on a robot, a random name is generated in the format\r\nof two uppercase letters followed by three digits, such as RX837 or BC811.\r\n\r\nEvery once in a while we need to reset a robot to its factory settings,\r\nwhich means that its name gets wiped. The next time you ask, that robot will\r\nrespond with a new random name.\r\n\r\nThe names must be random: they should not follow a predictable sequence.\r\nUsing random names means a risk of collisions. Your solution must ensure that\r\nevery existing robot has a unique name.\r\n",
  "roman_numerals" : "# Instructions\r\n\r\nWrite a function to convert from normal numbers to Roman Numerals.\r\n\r\nThe Romans were a clever bunch. They conquered most of Europe and ruled\r\nit for hundreds of years. They invented concrete and straight roads and\r\neven bikinis. One thing they never discovered though was the number\r\nzero. This made writing and dating extensive histories of their exploits\r\nslightly more challenging, but the system of numbers they came up with\r\nis still in use today. For example the BBC uses Roman numerals to date\r\ntheir programmes.\r\n\r\nThe Romans wrote numbers using letters - I, V, X, L, C, D, M. (notice\r\nthese letters have lots of straight lines and are hence easy to hack\r\ninto stone tablets).\r\n\r\n```text\r\n 1  => I\r\n10  => X\r\n 7  => VII\r\n```\r\n\r\nThere is no need to be able to convert numbers larger than about 3000.\r\n(The Romans themselves didn't tend to go any higher)\r\n\r\nWikipedia says: Modern Roman numerals ... are written by expressing each\r\ndigit separately starting with the left most digit and skipping any\r\ndigit with a value of zero.\r\n\r\nTo see this in practice, consider the example of 1990.\r\n\r\nIn Roman numerals 1990 is MCMXC:\r\n\r\n1000=M\r\n900=CM\r\n90=XC\r\n\r\n2008 is written as MMVIII:\r\n\r\n2000=MM\r\n8=VIII\r\n\r\nSee also: http://www.novaroma.org/via_romana/numbers.html\r\n",
  "nucleotide_count" : "# Instructions\r\n\r\nEach of us inherits from our biological parents a set of chemical instructions known as DNA that influence how our bodies are constructed. All known life depends on DNA!\r\n\r\n> Note: You do not need to understand anything about nucleotides or DNA to complete this exercise.\r\n\r\nDNA is a long chain of other chemicals and the most important are the four nucleotides, adenine, cytosine, guanine and thymine. A single DNA chain can contain billions of these four nucleotides and the order in which they occur is important!\r\nWe call the order of these nucleotides in a bit of DNA a \"DNA sequence\".\r\n\r\nWe represent a DNA sequence as an ordered collection of these four nucleotides and a common way to do that is with a string of characters such as \"ATTACG\" for a DNA sequence of 6 nucleotides.\r\n'A' for adenine, 'C' for cytosine, 'G' for guanine, and 'T' for thymine.\r\n\r\nGiven a string representing a DNA sequence, count how many of each nucleotide is present.\r\nIf the string contains characters that aren't A, C, G, or T then it is invalid and you should signal an error.\r\n\r\nFor example:\r\n\r\n```\r\n\"GATTACA\" -> 'A': 3, 'C': 1, 'G': 1, 'T': 2\r\n\"INVALID\" -> error\r\n```\r\n",
  "run_length_encoding" : "# Instructions\r\n\r\nImplement run-length encoding and decoding.\r\n\r\nRun-length encoding (RLE) is a simple form of data compression, where runs\r\n(consecutive data elements) are replaced by just one data value and count.\r\n\r\nFor example we can represent the original 53 characters with only 13.\r\n\r\n```text\r\n\"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB\"  ->  \"12WB12W3B24WB\"\r\n```\r\n\r\nRLE allows the original data to be perfectly reconstructed from\r\nthe compressed data, which makes it a lossless data compression.\r\n\r\n```text\r\n\"AABCCCDEEEE\"  ->  \"2AB3CD4E\"  ->  \"AABCCCDEEEE\"\r\n```\r\n\r\nFor simplicity, you can assume that the unencoded string will only contain\r\nthe letters A through Z (either lower or upper case) and whitespace. This way\r\ndata to be encoded will never contain any numbers and numbers inside data to\r\nbe decoded always represent the count for the following character.\r\n",
  "anagram" : "# Instructions\r\n\r\nAn anagram is a rearrangement of letters to form a new word.\r\nGiven a word and a list of candidates, select the sublist of anagrams of the given word.\r\n\r\nGiven `\"listen\"` and a list of candidates like `\"enlists\" \"google\"\r\n\"inlets\" \"banana\"` the program should return a list containing\r\n`\"inlets\"`.\r\n",
  "perfect_numbers" : "# Instructions\r\n\r\nDetermine if a number is perfect, abundant, or deficient based on\r\nNicomachus' (60 - 120 CE) classification scheme for positive integers.\r\n\r\nThe Greek mathematician [Nicomachus](https://en.wikipedia.org/wiki/Nicomachus) devised a classification scheme for positive integers, identifying each as belonging uniquely to the categories of **perfect**, **abundant**, or **deficient** based on their [aliquot sum](https://en.wikipedia.org/wiki/Aliquot_sum). The aliquot sum is defined as the sum of the factors of a number not including the number itself. For example, the aliquot sum of 15 is (1 + 3 + 5) = 9\r\n\r\n- **Perfect**: aliquot sum = number\r\n  - 6 is a perfect number because (1 + 2 + 3) = 6\r\n  - 28 is a perfect number because (1 + 2 + 4 + 7 + 14) = 28\r\n- **Abundant**: aliquot sum > number\r\n  - 12 is an abundant number because (1 + 2 + 3 + 4 + 6) = 16\r\n  - 24 is an abundant number because (1 + 2 + 3 + 4 + 6 + 8 + 12) = 36\r\n- **Deficient**: aliquot sum < number\r\n  - 8 is a deficient number because (1 + 2 + 4) = 7\r\n  - Prime numbers are deficient\r\n\r\nImplement a way to determine whether a given number is **perfect**. Depending on your language track, you may also need to implement a way to determine whether a given number is **abundant** or **deficient**.\r\n",
  "meetup" : "# Instructions\r\n\r\nCalculate the date of meetups.\r\n\r\nTypically meetups happen on the same day of the week.  In this exercise, you\r\nwill take a description of a meetup date, and return the actual meetup date.\r\n\r\nExamples of general descriptions are:\r\n\r\n- The first Monday of January 2017\r\n- The third Tuesday of January 2017\r\n- The wednesteenth of January 2017\r\n- The last Thursday of January 2017\r\n\r\nThe descriptors you are expected to parse are:\r\nfirst, second, third, fourth, fifth, last, monteenth, tuesteenth, wednesteenth,\r\nthursteenth, friteenth, saturteenth, sunteenth\r\n\r\nNote that \"monteenth\", \"tuesteenth\", etc are all made up words. There was a\r\nmeetup whose members realized that there are exactly 7 numbered days in a month\r\nthat end in '-teenth'. Therefore, one is guaranteed that each day of the week\r\n(Monday, Tuesday, ...) will have exactly one date that is named with '-teenth'\r\nin every month.\r\n\r\nGiven examples of a meetup dates, each containing a month, day, year, and\r\ndescriptor calculate the date of the actual meetup.  For example, if given\r\n\"The first Monday of January 2017\", the correct meetup date is 2017/1/2.\r\n",
  "hello_world" : "# Instructions\r\n\r\nThe classical introductory exercise. Just say \"Hello, World!\".\r\n\r\n[\"Hello, World!\"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is\r\nthe traditional first program for beginning programming in a new language\r\nor environment.\r\n\r\nThe objectives are simple:\r\n\r\n- Write a function that returns the string \"Hello, World!\".\r\n- Run the test suite and make sure that it succeeds.\r\n- Submit your solution and check it at the website.\r\n\r\nIf everything goes well, you will be ready to fetch your first real exercise.\r\n",
  "wordy" : "# Instructions\r\n\r\nParse and evaluate simple math word problems returning the answer as an integer.\r\n\r\n## Iteration 0 — Numbers\r\n\r\nProblems with no operations simply evaluate to the number given.\r\n\r\n> What is 5?\r\n\r\nEvaluates to 5.\r\n\r\n## Iteration 1 — Addition\r\n\r\nAdd two numbers together.\r\n\r\n> What is 5 plus 13?\r\n\r\nEvaluates to 18.\r\n\r\nHandle large numbers and negative numbers.\r\n\r\n## Iteration 2 — Subtraction, Multiplication and Division\r\n\r\nNow, perform the other three operations.\r\n\r\n> What is 7 minus 5?\r\n\r\n2\r\n\r\n> What is 6 multiplied by 4?\r\n\r\n24\r\n\r\n> What is 25 divided by 5?\r\n\r\n5\r\n\r\n## Iteration 3 — Multiple Operations\r\n\r\nHandle a set of operations, in sequence.\r\n\r\nSince these are verbal word problems, evaluate the expression from\r\nleft-to-right, _ignoring the typical order of operations._\r\n\r\n> What is 5 plus 13 plus 6?\r\n\r\n24\r\n\r\n> What is 3 plus 2 multiplied by 3?\r\n\r\n15  (i.e. not 9)\r\n\r\n## Iteration 4 — Errors\r\n\r\nThe parser should reject:\r\n\r\n* Unsupported operations (\"What is 52 cubed?\")\r\n* Non-math questions (\"Who is the President of the United States\")\r\n* Word problems with invalid syntax (\"What is 1 plus plus 2?\")\r\n\r\n## Bonus — Exponentials\r\n\r\nIf you'd like, handle exponentials.\r\n\r\n> What is 2 raised to the 5th power?\r\n\r\n32\r\n",
  "go_counting" : "# Instructions\r\n\r\nCount the scored points on a Go board.\r\n\r\nIn the game of go (also known as baduk, igo, cờ vây and wéiqí) points\r\nare gained by completely encircling empty intersections with your\r\nstones. The encircled intersections of a player are known as its\r\nterritory.\r\n\r\nWrite a function that determines the territory of each player. You may\r\nassume that any stones that have been stranded in enemy territory have\r\nalready been taken off the board.\r\n\r\nWrite a function that determines the territory which includes a specified coordinate.\r\n\r\nMultiple empty intersections may be encircled at once and for encircling\r\nonly horizontal and vertical neighbours count. In the following diagram\r\nthe stones which matter are marked \"O\" and the stones that don't are\r\nmarked \"I\" (ignored).  Empty spaces represent empty intersections.\r\n\r\n```text\r\n+----+\r\n|IOOI|\r\n|O  O|\r\n|O OI|\r\n|IOI |\r\n+----+\r\n```\r\n\r\nTo be more precise an empty intersection is part of a player's territory\r\nif all of its neighbours are either stones of that player or empty\r\nintersections that are part of that player's territory.\r\n\r\nFor more information see\r\n[wikipedia](https://en.wikipedia.org/wiki/Go_%28game%29) or [Sensei's\r\nLibrary](http://senseis.xmp.net/).\r\n",
  "sieve" : "# Instructions\r\n\r\nYour task is to create a program that implements the Sieve of Eratosthenes algorithm to find prime numbers.\r\n\r\nA prime number is a number that is only divisible by 1 and itself.\r\nFor example, 2, 3, 5, 7, 11, and 13 are prime numbers.\r\n\r\nThe Sieve of Eratosthenes is an ancient algorithm that works by taking a list of numbers and crossing out all the numbers that aren't prime.\r\n\r\nA number that is **not** prime is called a \"composite number\".\r\n\r\nTo use the Sieve of Eratosthenes, you first create a list of all the numbers between 2 and your given number.\r\nThen you repeat the following steps:\r\n\r\n1. Find the next unmarked number in your list. This is a prime number.\r\n2. Mark all the multiples of that prime number as composite (not prime).\r\n\r\nYou keep repeating these steps until you've gone through every number in your list.\r\nAt the end, all the unmarked numbers are prime.\r\n\r\n```exercism/note\r\n[Wikipedia's Sieve of Eratosthenes article][eratosthenes] has a useful graphic that explains the algorithm.\r\n\r\nThe tests don't check that you've implemented the algorithm, only that you've come up with the correct list of primes.\r\nA good first test is to check that you do not use division or remainder operations.\r\n\r\n[eratosthenes]: https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\r\n```\r\n",
  "nth_prime" : "# Instructions\r\n\r\nGiven a number n, determine what the nth prime is.\r\n\r\nBy listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that\r\nthe 6th prime is 13.\r\n\r\nIf your language provides methods in the standard library to deal with prime\r\nnumbers, pretend they don't exist and implement them yourself.\r\n",
  "phone_number" : "# Instructions\r\n\r\nClean up user-entered phone numbers so that they can be sent SMS messages.\r\n\r\nThe **North American Numbering Plan (NANP)** is a telephone numbering system used by many countries in North America like the United States, Canada or Bermuda. All NANP-countries share the same international country code: `1`.\r\n\r\nNANP numbers are ten-digit numbers consisting of a three-digit Numbering Plan Area code, commonly known as *area code*, followed by a seven-digit local number. The first three digits of the local number represent the *exchange code*, followed by the unique four-digit number which is the *subscriber number*.\r\n\r\nThe format is usually represented as\r\n\r\n```text\r\n(NXX)-NXX-XXXX\r\n```\r\n\r\nwhere `N` is any digit from 2 through 9 and `X` is any digit from 0 through 9.\r\n\r\nYour task is to clean up differently formatted telephone numbers by removing punctuation and the country code (1) if present.\r\n\r\nFor example, the inputs\r\n- `+1 (613)-995-0253`\r\n- `613-995-0253`\r\n- `1 613 995 0253`\r\n- `613.995.0253`\r\n\r\nshould all produce the output\r\n\r\n`6139950253`\r\n\r\n**Note:** As this exercise only deals with telephone numbers used in NANP-countries, only 1 is considered a valid country code.\r\n",
  "binary_search_tree" : "# Instructions\r\n\r\nInsert and search for numbers in a binary tree.\r\n\r\nWhen we need to represent sorted data, an array does not make a good\r\ndata structure.\r\n\r\nSay we have the array `[1, 3, 4, 5]`, and we add 2 to it so it becomes\r\n`[1, 3, 4, 5, 2]` now we must sort the entire array again! We can\r\nimprove on this by realizing that we only need to make space for the new\r\nitem `[1, nil, 3, 4, 5]`, and then adding the item in the space we\r\nadded. But this still requires us to shift many elements down by one.\r\n\r\nBinary Search Trees, however, can operate on sorted data much more\r\nefficiently.\r\n\r\nA binary search tree consists of a series of connected nodes. Each node\r\ncontains a piece of data (e.g. the number 3), a variable named `left`,\r\nand a variable named `right`. The `left` and `right` variables point at\r\n`nil`, or other nodes. Since these other nodes in turn have other nodes\r\nbeneath them, we say that the left and right variables are pointing at\r\nsubtrees. All data in the left subtree is less than or equal to the\r\ncurrent node's data, and all data in the right subtree is greater than\r\nthe current node's data.\r\n\r\nFor example, if we had a node containing the data 4, and we added the\r\ndata 2, our tree would look like this:\r\n\r\n      4\r\n     /\r\n    2\r\n\r\nIf we then added 6, it would look like this:\r\n\r\n      4\r\n     / \\\r\n    2   6\r\n\r\nIf we then added 3, it would look like this\r\n\r\n       4\r\n     /   \\\r\n    2     6\r\n     \\\r\n      3\r\n\r\nAnd if we then added 1, 5, and 7, it would look like this\r\n\r\n          4\r\n        /   \\\r\n       /     \\\r\n      2       6\r\n     / \\     / \\\r\n    1   3   5   7\r\n",
  "binary" : "# Instructions\r\n\r\nConvert a binary number, represented as a string (e.g. '101010'), to its decimal equivalent using first principles.\r\n\r\nImplement binary to decimal conversion. Given a binary input\r\nstring, your program should produce a decimal output. The\r\nprogram should handle invalid inputs.\r\n\r\n## Note\r\n\r\n- Implement the conversion yourself.\r\n  Do not use something else to perform the conversion for you.\r\n\r\n## About Binary (Base-2)\r\n\r\nDecimal is a base-10 system.\r\n\r\nA number 23 in base 10 notation can be understood\r\nas a linear combination of powers of 10:\r\n\r\n- The rightmost digit gets multiplied by 10^0 = 1\r\n- The next number gets multiplied by 10^1 = 10\r\n- ...\r\n- The *n*th number gets multiplied by 10^*(n-1)*.\r\n- All these values are summed.\r\n\r\nSo: `23 => 2*10^1 + 3*10^0 => 2*10 + 3*1 = 23 base 10`\r\n\r\nBinary is similar, but uses powers of 2 rather than powers of 10.\r\n\r\nSo: `101 => 1*2^2 + 0*2^1 + 1*2^0 => 1*4 + 0*2 + 1*1 => 4 + 1 => 5 base 10`.\r\n",
  "scrabble_score" : "# Instructions\r\n\r\nGiven a word, compute the Scrabble score for that word.\r\n\r\n## Letter Values\r\n\r\nYou'll need these:\r\n\r\n```text\r\nLetter                           Value\r\nA, E, I, O, U, L, N, R, S, T       1\r\nD, G                               2\r\nB, C, M, P                         3\r\nF, H, V, W, Y                      4\r\nK                                  5\r\nJ, X                               8\r\nQ, Z                               10\r\n```\r\n\r\n## Examples\r\n\r\n\"cabbage\" should be scored as worth 14 points:\r\n\r\n- 3 points for C\r\n- 1 point for A, twice\r\n- 3 points for B, twice\r\n- 2 points for G\r\n- 1 point for E\r\n\r\nAnd to total:\r\n\r\n- `3 + 2*1 + 2*3 + 2 + 1`\r\n- = `3 + 2 + 6 + 3`\r\n- = `5 + 9`\r\n- = 14\r\n\r\n## Extensions\r\n\r\n- You can play a double or a triple letter.\r\n- You can play a double or a triple word.\r\n",
  "queen_attack" : "# Instructions\r\n\r\nGiven the position of two queens on a chess board, indicate whether or not they\r\nare positioned so that they can attack each other.\r\n\r\nIn the game of chess, a queen can attack pieces which are on the same\r\nrow, column, or diagonal.\r\n\r\nA chessboard can be represented by an 8 by 8 array.\r\n\r\nSo if you're told the white queen is at (2, 3) and the black queen at\r\n(5, 6), then you'd know you've got a set-up like so:\r\n\r\n```text\r\n_ _ _ _ _ _ _ _\r\n_ _ _ _ _ _ _ _\r\n_ _ _ W _ _ _ _\r\n_ _ _ _ _ _ _ _\r\n_ _ _ _ _ _ _ _\r\n_ _ _ _ _ _ B _\r\n_ _ _ _ _ _ _ _\r\n_ _ _ _ _ _ _ _\r\n```\r\n\r\nYou'd also be able to answer whether the queens can attack each other.\r\nIn this case, that answer would be yes, they can, because both pieces\r\nshare a diagonal.\r\n",
  "atbash_cipher" : "# Instructions\r\n\r\nCreate an implementation of the atbash cipher, an ancient encryption system created in the Middle East.\r\n\r\nThe Atbash cipher is a simple substitution cipher that relies on\r\ntransposing all the letters in the alphabet such that the resulting\r\nalphabet is backwards. The first letter is replaced with the last\r\nletter, the second with the second-last, and so on.\r\n\r\nAn Atbash cipher for the Latin alphabet would be as follows:\r\n\r\n```text\r\nPlain:  abcdefghijklmnopqrstuvwxyz\r\nCipher: zyxwvutsrqponmlkjihgfedcba\r\n```\r\n\r\nIt is a very weak cipher because it only has one possible key, and it is\r\na simple monoalphabetic substitution cipher. However, this may not have\r\nbeen an issue in the cipher's time.\r\n\r\nCiphertext is written out in groups of fixed length, the traditional group size\r\nbeing 5 letters, and punctuation is excluded. This is to make it harder to guess\r\nthings based on word boundaries.\r\n\r\n## Examples\r\n\r\n- Encoding `test` gives `gvhg`\r\n- Decoding `gvhg` gives `test`\r\n- Decoding `gsvjf rxpyi ldmul cqfnk hlevi gsvoz abwlt` gives `thequickbrownfoxjumpsoverthelazydog`\r\n",
  "bob" : "# Instructions\r\n\r\nYour task is to determine what Bob will reply to someone when they say something to him or ask him a question.\r\n\r\nBob only ever answers one of five things:\r\n\r\n- **\"Sure.\"**\r\n  This is his response if you ask him a question, such as \"How are you?\"\r\n  The convention used for questions is that it ends with a question mark.\r\n- **\"Whoa, chill out!\"**\r\n  This is his answer if you YELL AT HIM.\r\n  The convention used for yelling is ALL CAPITAL LETTERS.\r\n- **\"Calm down, I know what I'm doing!\"**\r\n  This is what he says if you yell a question at him.\r\n- **\"Fine. Be that way!\"**\r\n  This is how he responds to silence.\r\n  The convention used for silence is nothing, or various combinations of whitespace characters.\r\n- **\"Whatever.\"**\r\n  This is what he answers to anything else.\r\n",
  "rna_transcription" : "# Instructions\r\n\r\nYour task is determine the RNA complement of a given DNA sequence.\r\n\r\nBoth DNA and RNA strands are a sequence of nucleotides.\r\n\r\nThe four nucleotides found in DNA are adenine (**A**), cytosine (**C**), guanine (**G**) and thymine (**T**).\r\n\r\nThe four nucleotides found in RNA are adenine (**A**), cytosine (**C**), guanine (**G**) and uracil (**U**).\r\n\r\nGiven a DNA strand, its transcribed RNA strand is formed by replacing each nucleotide with its complement:\r\n\r\n- `G` -> `C`\r\n- `C` -> `G`\r\n- `T` -> `A`\r\n- `A` -> `U`\r\n\r\n~~~~exercism/note\r\nIf you want to look at how the inputs and outputs are structured, take a look at the examples in the test suite.\r\n~~~~\r\n",
  "acronym" : "# Instructions\r\n\r\nConvert a phrase to its acronym.\r\n\r\nTechies love their TLA (Three Letter Acronyms)!\r\n\r\nHelp generate some jargon by writing a program that converts a long name\r\nlike Portable Network Graphics to its acronym (PNG).\r\n",
  "beer_song" : "# Instructions\r\n\r\nRecite the lyrics to that beloved classic, that field-trip favorite: 99 Bottles of Beer on the Wall.\r\n\r\nNote that not all verses are identical.\r\n\r\n```text\r\n99 bottles of beer on the wall, 99 bottles of beer.\r\nTake one down and pass it around, 98 bottles of beer on the wall.\r\n\r\n98 bottles of beer on the wall, 98 bottles of beer.\r\nTake one down and pass it around, 97 bottles of beer on the wall.\r\n\r\n97 bottles of beer on the wall, 97 bottles of beer.\r\nTake one down and pass it around, 96 bottles of beer on the wall.\r\n\r\n96 bottles of beer on the wall, 96 bottles of beer.\r\nTake one down and pass it around, 95 bottles of beer on the wall.\r\n\r\n95 bottles of beer on the wall, 95 bottles of beer.\r\nTake one down and pass it around, 94 bottles of beer on the wall.\r\n\r\n94 bottles of beer on the wall, 94 bottles of beer.\r\nTake one down and pass it around, 93 bottles of beer on the wall.\r\n\r\n93 bottles of beer on the wall, 93 bottles of beer.\r\nTake one down and pass it around, 92 bottles of beer on the wall.\r\n\r\n92 bottles of beer on the wall, 92 bottles of beer.\r\nTake one down and pass it around, 91 bottles of beer on the wall.\r\n\r\n91 bottles of beer on the wall, 91 bottles of beer.\r\nTake one down and pass it around, 90 bottles of beer on the wall.\r\n\r\n90 bottles of beer on the wall, 90 bottles of beer.\r\nTake one down and pass it around, 89 bottles of beer on the wall.\r\n\r\n89 bottles of beer on the wall, 89 bottles of beer.\r\nTake one down and pass it around, 88 bottles of beer on the wall.\r\n\r\n88 bottles of beer on the wall, 88 bottles of beer.\r\nTake one down and pass it around, 87 bottles of beer on the wall.\r\n\r\n87 bottles of beer on the wall, 87 bottles of beer.\r\nTake one down and pass it around, 86 bottles of beer on the wall.\r\n\r\n86 bottles of beer on the wall, 86 bottles of beer.\r\nTake one down and pass it around, 85 bottles of beer on the wall.\r\n\r\n85 bottles of beer on the wall, 85 bottles of beer.\r\nTake one down and pass it around, 84 bottles of beer on the wall.\r\n\r\n84 bottles of beer on the wall, 84 bottles of beer.\r\nTake one down and pass it around, 83 bottles of beer on the wall.\r\n\r\n83 bottles of beer on the wall, 83 bottles of beer.\r\nTake one down and pass it around, 82 bottles of beer on the wall.\r\n\r\n82 bottles of beer on the wall, 82 bottles of beer.\r\nTake one down and pass it around, 81 bottles of beer on the wall.\r\n\r\n81 bottles of beer on the wall, 81 bottles of beer.\r\nTake one down and pass it around, 80 bottles of beer on the wall.\r\n\r\n80 bottles of beer on the wall, 80 bottles of beer.\r\nTake one down and pass it around, 79 bottles of beer on the wall.\r\n\r\n79 bottles of beer on the wall, 79 bottles of beer.\r\nTake one down and pass it around, 78 bottles of beer on the wall.\r\n\r\n78 bottles of beer on the wall, 78 bottles of beer.\r\nTake one down and pass it around, 77 bottles of beer on the wall.\r\n\r\n77 bottles of beer on the wall, 77 bottles of beer.\r\nTake one down and pass it around, 76 bottles of beer on the wall.\r\n\r\n76 bottles of beer on the wall, 76 bottles of beer.\r\nTake one down and pass it around, 75 bottles of beer on the wall.\r\n\r\n75 bottles of beer on the wall, 75 bottles of beer.\r\nTake one down and pass it around, 74 bottles of beer on the wall.\r\n\r\n74 bottles of beer on the wall, 74 bottles of beer.\r\nTake one down and pass it around, 73 bottles of beer on the wall.\r\n\r\n73 bottles of beer on the wall, 73 bottles of beer.\r\nTake one down and pass it around, 72 bottles of beer on the wall.\r\n\r\n72 bottles of beer on the wall, 72 bottles of beer.\r\nTake one down and pass it around, 71 bottles of beer on the wall.\r\n\r\n71 bottles of beer on the wall, 71 bottles of beer.\r\nTake one down and pass it around, 70 bottles of beer on the wall.\r\n\r\n70 bottles of beer on the wall, 70 bottles of beer.\r\nTake one down and pass it around, 69 bottles of beer on the wall.\r\n\r\n69 bottles of beer on the wall, 69 bottles of beer.\r\nTake one down and pass it around, 68 bottles of beer on the wall.\r\n\r\n68 bottles of beer on the wall, 68 bottles of beer.\r\nTake one down and pass it around, 67 bottles of beer on the wall.\r\n\r\n67 bottles of beer on the wall, 67 bottles of beer.\r\nTake one down and pass it around, 66 bottles of beer on the wall.\r\n\r\n66 bottles of beer on the wall, 66 bottles of beer.\r\nTake one down and pass it around, 65 bottles of beer on the wall.\r\n\r\n65 bottles of beer on the wall, 65 bottles of beer.\r\nTake one down and pass it around, 64 bottles of beer on the wall.\r\n\r\n64 bottles of beer on the wall, 64 bottles of beer.\r\nTake one down and pass it around, 63 bottles of beer on the wall.\r\n\r\n63 bottles of beer on the wall, 63 bottles of beer.\r\nTake one down and pass it around, 62 bottles of beer on the wall.\r\n\r\n62 bottles of beer on the wall, 62 bottles of beer.\r\nTake one down and pass it around, 61 bottles of beer on the wall.\r\n\r\n61 bottles of beer on the wall, 61 bottles of beer.\r\nTake one down and pass it around, 60 bottles of beer on the wall.\r\n\r\n60 bottles of beer on the wall, 60 bottles of beer.\r\nTake one down and pass it around, 59 bottles of beer on the wall.\r\n\r\n59 bottles of beer on the wall, 59 bottles of beer.\r\nTake one down and pass it around, 58 bottles of beer on the wall.\r\n\r\n58 bottles of beer on the wall, 58 bottles of beer.\r\nTake one down and pass it around, 57 bottles of beer on the wall.\r\n\r\n57 bottles of beer on the wall, 57 bottles of beer.\r\nTake one down and pass it around, 56 bottles of beer on the wall.\r\n\r\n56 bottles of beer on the wall, 56 bottles of beer.\r\nTake one down and pass it around, 55 bottles of beer on the wall.\r\n\r\n55 bottles of beer on the wall, 55 bottles of beer.\r\nTake one down and pass it around, 54 bottles of beer on the wall.\r\n\r\n54 bottles of beer on the wall, 54 bottles of beer.\r\nTake one down and pass it around, 53 bottles of beer on the wall.\r\n\r\n53 bottles of beer on the wall, 53 bottles of beer.\r\nTake one down and pass it around, 52 bottles of beer on the wall.\r\n\r\n52 bottles of beer on the wall, 52 bottles of beer.\r\nTake one down and pass it around, 51 bottles of beer on the wall.\r\n\r\n51 bottles of beer on the wall, 51 bottles of beer.\r\nTake one down and pass it around, 50 bottles of beer on the wall.\r\n\r\n50 bottles of beer on the wall, 50 bottles of beer.\r\nTake one down and pass it around, 49 bottles of beer on the wall.\r\n\r\n49 bottles of beer on the wall, 49 bottles of beer.\r\nTake one down and pass it around, 48 bottles of beer on the wall.\r\n\r\n48 bottles of beer on the wall, 48 bottles of beer.\r\nTake one down and pass it around, 47 bottles of beer on the wall.\r\n\r\n47 bottles of beer on the wall, 47 bottles of beer.\r\nTake one down and pass it around, 46 bottles of beer on the wall.\r\n\r\n46 bottles of beer on the wall, 46 bottles of beer.\r\nTake one down and pass it around, 45 bottles of beer on the wall.\r\n\r\n45 bottles of beer on the wall, 45 bottles of beer.\r\nTake one down and pass it around, 44 bottles of beer on the wall.\r\n\r\n44 bottles of beer on the wall, 44 bottles of beer.\r\nTake one down and pass it around, 43 bottles of beer on the wall.\r\n\r\n43 bottles of beer on the wall, 43 bottles of beer.\r\nTake one down and pass it around, 42 bottles of beer on the wall.\r\n\r\n42 bottles of beer on the wall, 42 bottles of beer.\r\nTake one down and pass it around, 41 bottles of beer on the wall.\r\n\r\n41 bottles of beer on the wall, 41 bottles of beer.\r\nTake one down and pass it around, 40 bottles of beer on the wall.\r\n\r\n40 bottles of beer on the wall, 40 bottles of beer.\r\nTake one down and pass it around, 39 bottles of beer on the wall.\r\n\r\n39 bottles of beer on the wall, 39 bottles of beer.\r\nTake one down and pass it around, 38 bottles of beer on the wall.\r\n\r\n38 bottles of beer on the wall, 38 bottles of beer.\r\nTake one down and pass it around, 37 bottles of beer on the wall.\r\n\r\n37 bottles of beer on the wall, 37 bottles of beer.\r\nTake one down and pass it around, 36 bottles of beer on the wall.\r\n\r\n36 bottles of beer on the wall, 36 bottles of beer.\r\nTake one down and pass it around, 35 bottles of beer on the wall.\r\n\r\n35 bottles of beer on the wall, 35 bottles of beer.\r\nTake one down and pass it around, 34 bottles of beer on the wall.\r\n\r\n34 bottles of beer on the wall, 34 bottles of beer.\r\nTake one down and pass it around, 33 bottles of beer on the wall.\r\n\r\n33 bottles of beer on the wall, 33 bottles of beer.\r\nTake one down and pass it around, 32 bottles of beer on the wall.\r\n\r\n32 bottles of beer on the wall, 32 bottles of beer.\r\nTake one down and pass it around, 31 bottles of beer on the wall.\r\n\r\n31 bottles of beer on the wall, 31 bottles of beer.\r\nTake one down and pass it around, 30 bottles of beer on the wall.\r\n\r\n30 bottles of beer on the wall, 30 bottles of beer.\r\nTake one down and pass it around, 29 bottles of beer on the wall.\r\n\r\n29 bottles of beer on the wall, 29 bottles of beer.\r\nTake one down and pass it around, 28 bottles of beer on the wall.\r\n\r\n28 bottles of beer on the wall, 28 bottles of beer.\r\nTake one down and pass it around, 27 bottles of beer on the wall.\r\n\r\n27 bottles of beer on the wall, 27 bottles of beer.\r\nTake one down and pass it around, 26 bottles of beer on the wall.\r\n\r\n26 bottles of beer on the wall, 26 bottles of beer.\r\nTake one down and pass it around, 25 bottles of beer on the wall.\r\n\r\n25 bottles of beer on the wall, 25 bottles of beer.\r\nTake one down and pass it around, 24 bottles of beer on the wall.\r\n\r\n24 bottles of beer on the wall, 24 bottles of beer.\r\nTake one down and pass it around, 23 bottles of beer on the wall.\r\n\r\n23 bottles of beer on the wall, 23 bottles of beer.\r\nTake one down and pass it around, 22 bottles of beer on the wall.\r\n\r\n22 bottles of beer on the wall, 22 bottles of beer.\r\nTake one down and pass it around, 21 bottles of beer on the wall.\r\n\r\n21 bottles of beer on the wall, 21 bottles of beer.\r\nTake one down and pass it around, 20 bottles of beer on the wall.\r\n\r\n20 bottles of beer on the wall, 20 bottles of beer.\r\nTake one down and pass it around, 19 bottles of beer on the wall.\r\n\r\n19 bottles of beer on the wall, 19 bottles of beer.\r\nTake one down and pass it around, 18 bottles of beer on the wall.\r\n\r\n18 bottles of beer on the wall, 18 bottles of beer.\r\nTake one down and pass it around, 17 bottles of beer on the wall.\r\n\r\n17 bottles of beer on the wall, 17 bottles of beer.\r\nTake one down and pass it around, 16 bottles of beer on the wall.\r\n\r\n16 bottles of beer on the wall, 16 bottles of beer.\r\nTake one down and pass it around, 15 bottles of beer on the wall.\r\n\r\n15 bottles of beer on the wall, 15 bottles of beer.\r\nTake one down and pass it around, 14 bottles of beer on the wall.\r\n\r\n14 bottles of beer on the wall, 14 bottles of beer.\r\nTake one down and pass it around, 13 bottles of beer on the wall.\r\n\r\n13 bottles of beer on the wall, 13 bottles of beer.\r\nTake one down and pass it around, 12 bottles of beer on the wall.\r\n\r\n12 bottles of beer on the wall, 12 bottles of beer.\r\nTake one down and pass it around, 11 bottles of beer on the wall.\r\n\r\n11 bottles of beer on the wall, 11 bottles of beer.\r\nTake one down and pass it around, 10 bottles of beer on the wall.\r\n\r\n10 bottles of beer on the wall, 10 bottles of beer.\r\nTake one down and pass it around, 9 bottles of beer on the wall.\r\n\r\n9 bottles of beer on the wall, 9 bottles of beer.\r\nTake one down and pass it around, 8 bottles of beer on the wall.\r\n\r\n8 bottles of beer on the wall, 8 bottles of beer.\r\nTake one down and pass it around, 7 bottles of beer on the wall.\r\n\r\n7 bottles of beer on the wall, 7 bottles of beer.\r\nTake one down and pass it around, 6 bottles of beer on the wall.\r\n\r\n6 bottles of beer on the wall, 6 bottles of beer.\r\nTake one down and pass it around, 5 bottles of beer on the wall.\r\n\r\n5 bottles of beer on the wall, 5 bottles of beer.\r\nTake one down and pass it around, 4 bottles of beer on the wall.\r\n\r\n4 bottles of beer on the wall, 4 bottles of beer.\r\nTake one down and pass it around, 3 bottles of beer on the wall.\r\n\r\n3 bottles of beer on the wall, 3 bottles of beer.\r\nTake one down and pass it around, 2 bottles of beer on the wall.\r\n\r\n2 bottles of beer on the wall, 2 bottles of beer.\r\nTake one down and pass it around, 1 bottle of beer on the wall.\r\n\r\n1 bottle of beer on the wall, 1 bottle of beer.\r\nTake it down and pass it around, no more bottles of beer on the wall.\r\n\r\nNo more bottles of beer on the wall, no more bottles of beer.\r\nGo to the store and buy some more, 99 bottles of beer on the wall.\r\n```\r\n\r\n## For bonus points\r\n\r\nDid you get the tests passing and the code clean? If you want to, these\r\nare some additional things you could try:\r\n\r\n* Remove as much duplication as you possibly can.\r\n* Optimize for readability, even if it means introducing duplication.\r\n* If you've removed all the duplication, do you have a lot of\r\n  conditionals? Try replacing the conditionals with polymorphism, if it\r\n  applies in this language. How readable is it?\r\n\r\nThen please share your thoughts in a comment on the submission. Did this\r\nexperiment make the code better? Worse? Did you learn anything from it?\r\n",
  "hamming" : "# Instructions\r\n\r\nCalculate the Hamming Distance between two DNA strands.\r\n\r\nYour body is made up of cells that contain DNA. Those cells regularly wear out and need replacing, which they achieve by dividing into daughter cells. In fact, the average human body experiences about 10 quadrillion cell divisions in a lifetime!\r\n\r\nWhen cells divide, their DNA replicates too. Sometimes during this process mistakes happen and single pieces of DNA get encoded with the incorrect information. If we compare two strands of DNA and count the differences between them we can see how many mistakes occurred. This is known as the \"Hamming Distance\".\r\n\r\nWe read DNA using the letters C,A,G and T. Two strands might look like this:\r\n\r\n    GAGCCTACTAACGGGAT\r\n    CATCGTAATGACGGCCT\r\n    ^ ^ ^  ^ ^    ^^\r\n\r\nThey have 7 differences, and therefore the Hamming Distance is 7.\r\n\r\nThe Hamming Distance is useful for lots of things in science, not just biology, so it's a nice phrase to be familiar with :)\r\n\r\n# Implementation notes\r\n\r\nThe Hamming distance is only defined for sequences of equal length, so\r\nan attempt to calculate it between sequences of different lengths should\r\nnot work. The general handling of this situation (e.g., raising an\r\nexception vs returning a special value) may differ between languages.\r\n",
  "binary_search" : "# Instructions\r\n\r\nYour task is to implement a binary search algorithm.\r\n\r\nA binary search algorithm finds an item in a list by repeatedly splitting it in half, only keeping the half which contains the item we're looking for.\r\nIt allows us to quickly narrow down the possible locations of our item until we find it, or until we've eliminated all possible locations.\r\n\r\n~~~~exercism/caution\r\nBinary search only works when a list has been sorted.\r\n~~~~\r\n\r\nThe algorithm looks like this:\r\n\r\n- Find the middle element of a *sorted* list and compare it with the item we're looking for.\r\n- If the middle element is our item, then we're done!\r\n- If the middle element is greater than our item, we can eliminate that element and all the elements **after** it.\r\n- If the middle element is less than our item, we can eliminate that element and all the elements **before** it.\r\n- If every element of the list has been eliminated then the item is not in the list.\r\n- Otherwise, repeat the process on the part of the list that has not been eliminated.\r\n\r\nHere's an example:\r\n\r\nLet's say we're looking for the number 23 in the following sorted list: `[4, 8, 12, 16, 23, 28, 32]`.\r\n\r\n- We start by comparing 23 with the middle element, 16.\r\n- Since 23 is greater than 16, we can eliminate the left half of the list, leaving us with `[23, 28, 32]`.\r\n- We then compare 23 with the new middle element, 28.\r\n- Since 23 is less than 28, we can eliminate the right half of the list: `[23]`.\r\n- We've found our item.\r\n",
  "bank_account" : "# Instructions\r\n\r\nSimulate a bank account supporting opening/closing, withdrawals, and deposits\r\nof money. Watch out for concurrent transactions!\r\n\r\nA bank account can be accessed in multiple ways. Clients can make\r\ndeposits and withdrawals using the internet, mobile phones, etc. Shops\r\ncan charge against the account.\r\n\r\nCreate an account that can be accessed from multiple threads/processes\r\n(terminology depends on your programming language).\r\n\r\nIt should be possible to close an account; operations against a closed\r\naccount must fail.\r\n\r\n## Instructions\r\n\r\nRun the test file, and fix each of the errors in turn. When you get the\r\nfirst test to pass, go to the first pending or skipped test, and make\r\nthat pass as well. When all of the tests are passing, feel free to\r\nsubmit.\r\n\r\nRemember that passing code is just the first step. The goal is to work\r\ntowards a solution that is as readable and expressive as you can make\r\nit.\r\n\r\nHave fun!\r\n",
  "octal" : "# Instructions\r\n\r\nConvert an octal number, represented as a string (e.g. '1735263'), to its\r\ndecimal equivalent using first principles (i.e. no, you may not use built-in or\r\nexternal libraries to accomplish the conversion).\r\n\r\nImplement octal to decimal conversion.  Given an octal input\r\nstring, your program should produce a decimal output.\r\n\r\n## Note\r\n\r\n- Implement the conversion yourself.\r\n  Do not use something else to perform the conversion for you.\r\n- Treat invalid input as octal 0.\r\n\r\n## About Octal (Base-8)\r\n\r\nDecimal is a base-10 system.\r\n\r\nA number 233 in base 10 notation can be understood\r\nas a linear combination of powers of 10:\r\n\r\n- The rightmost digit gets multiplied by 10^0 = 1\r\n- The next number gets multiplied by 10^1 = 10\r\n- ...\r\n- The *n*th number gets multiplied by 10^*(n-1)*.\r\n- All these values are summed.\r\n\r\nSo:\r\n\r\n```text\r\n   233 # decimal\r\n = 2*10^2 + 3*10^1 + 3*10^0\r\n = 2*100  + 3*10   + 3*1\r\n```\r\n\r\nOctal is similar, but uses powers of 8 rather than powers of 10.\r\n\r\nSo:\r\n\r\n```text\r\n   233 # octal\r\n = 2*8^2 + 3*8^1 + 3*8^0\r\n = 2*64  + 3*8   + 3*1\r\n = 128   + 24    + 3\r\n = 155\r\n```\r\n",
  "raindrops" : "# Instructions\r\n\r\nYour task is to convert a number into a string that contains raindrop sounds corresponding to certain potential factors. A factor is a number that evenly divides into another number, leaving no remainder. The simplest way to test if a one number is a factor of another is to use the [modulo operation](https://en.wikipedia.org/wiki/Modulo_operation).\r\n\r\nThe rules of `raindrops` are that if a given number:\r\n\r\n- has 3 as a factor, add 'Pling' to the result.\r\n- has 5 as a factor, add 'Plang' to the result.\r\n- has 7 as a factor, add 'Plong' to the result.\r\n- _does not_ have any of 3, 5, or 7 as a factor, the result should be the digits of the number.\r\n\r\n## Examples\r\n\r\n- 28 has 7 as a factor, but not 3 or 5, so the result would be \"Plong\".\r\n- 30 has both 3 and 5 as factors, but not 7, so the result would be \"PlingPlang\".\r\n- 34 is not factored by 3, 5, or 7, so the result would be \"34\".\r\n",
  "reverse_string" : "# Instructions\r\n\r\nReverse a string\r\n\r\nFor example:\r\ninput: \"cool\"\r\noutput: \"looc\"\r\n",
  "sublist" : "# Instructions\r\n\r\nGiven two lists determine whether :\r\n- the first list is contained within the second \r\n- the second list is contained within the first list\r\n- both lists are equal\r\n- none of the above, lists are unequal\r\n\r\nSpecifically, a list A is a sublist of list B if by dropping 0 or more elements\r\nfrom the front of B and 0 or more elements from the back of B you get a list\r\nthat's completely equal to A.\r\n\r\n### Rules\r\n\r\nDetermine the relation between list1 and list2 and return the relation as a Clojure keyword.\r\nThe function `classify` should either return `:sublist`, `:superlist`, `:equal` or`:unequal`.\r\n\r\n\r\n### Examples:\r\n\r\n * A = [1, 2, 3], B = [1, 2, 3, 4, 5], A is a sublist of B\r\n * A = [3, 4, 5], B = [1, 2, 3, 4, 5], A is a sublist of B\r\n * A = [3, 4], B = [1, 2, 3, 4, 5], A is a sublist of B\r\n * A = [1, 2, 3], B = [1, 2, 3], A is equal to B\r\n * A = [1, 2, 3, 4, 5], B = [2, 3, 4], A is a superlist of B\r\n * A = [1, 2, 4], B = [1, 2, 3, 4, 5], A is neither a superlist, sublist nor equal to B : they are unequal\r\n",
  "triangle" : "# Instructions\r\n\r\nDetermine if a triangle is equilateral, isosceles, or scalene.\r\n\r\nAn _equilateral_ triangle has all three sides the same length.\r\n\r\nAn _isosceles_ triangle has at least two sides the same length. (It is sometimes\r\nspecified as having exactly two sides the same length, but for the purposes of\r\nthis exercise we'll say at least two.)\r\n\r\nA _scalene_ triangle has all sides of different lengths.\r\n\r\n## Note\r\n\r\nFor a shape to be a triangle at all, all sides have to be of length > 0, and\r\nthe sum of the lengths of any two sides must be greater than or equal to the\r\nlength of the third side. See [Triangle Inequality](https://en.wikipedia.org/wiki/Triangle_inequality).\r\n\r\n## Dig Deeper\r\n\r\nThe case where the sum of the lengths of two sides _equals_ that of the\r\nthird is known as a _degenerate_ triangle - it has zero area and looks like\r\na single line. Feel free to add your own code/tests to check for degenerate triangles.\r\n",
  "pig_latin" : "# Instructions\r\n\r\nImplement a program that translates from English to Pig Latin.\r\n\r\nPig Latin is a made-up children's language that's intended to be\r\nconfusing. It obeys a few simple rules (below), but when it's spoken\r\nquickly it's really difficult for non-children (and non-native speakers)\r\nto understand.\r\n\r\n- **Rule 1**: If a word begins with a vowel sound, add an \"ay\" sound to the end of the word. Please note that \"xr\" and \"yt\" at the beginning of a word make vowel sounds (e.g. \"xray\" -> \"xrayay\", \"yttria\" -> \"yttriaay\").\r\n- **Rule 2**: If a word begins with a consonant sound, move it to the end of the word and then add an \"ay\" sound to the end of the word. Consonant sounds can be made up of multiple consonants, a.k.a. a consonant cluster (e.g. \"chair\" -> \"airchay\").\r\n- **Rule 3**: If a word starts with a consonant sound followed by \"qu\", move it to the end of the word, and then add an \"ay\" sound to the end of the word (e.g. \"square\" -> \"aresquay\").\r\n- **Rule 4**: If a word contains a \"y\" after a consonant cluster or as the second letter in a two letter word it makes a vowel sound (e.g. \"rhythm\" -> \"ythmrhay\", \"my\" -> \"ymay\").\r\n\r\nThere are a few more rules for edge cases, and there are regional\r\nvariants too.\r\n\r\nSee <http://en.wikipedia.org/wiki/Pig_latin> for more details.\r\n",
  "clock" : "# Instructions\r\n\r\nImplement a clock that handles times without dates.\r\n\r\nYou should be able to add and subtract minutes to it.\r\n\r\nTwo clocks that represent the same time should be equal to each other.\r\n",
  "allergies" : "# Instructions\r\n\r\nGiven a person's allergy score, determine whether or not they're allergic to a given item, and their full list of allergies.\r\n\r\nAn allergy test produces a single numeric score which contains the\r\ninformation about all the allergies the person has (that they were\r\ntested for).\r\n\r\nThe list of items (and their value) that were tested are:\r\n\r\n* eggs (1)\r\n* peanuts (2)\r\n* shellfish (4)\r\n* strawberries (8)\r\n* tomatoes (16)\r\n* chocolate (32)\r\n* pollen (64)\r\n* cats (128)\r\n\r\nSo if Tom is allergic to peanuts and chocolate, he gets a score of 34.\r\n\r\nNow, given just that score of 34, your program should be able to say:\r\n\r\n- Whether Tom is allergic to any one of those allergens listed above.\r\n- All the allergens Tom is allergic to.\r\n\r\nNote: a given score may include allergens **not** listed above (i.e.\r\nallergens that score 256, 512, 1024, etc.).  Your program should\r\nignore those components of the score.  For example, if the allergy\r\nscore is 257, your program should only report the eggs (1) allergy.\r\n",
  "say" : "# Instructions\r\n\r\nGiven a number from 0 to 999,999,999,999, spell out that number in English.\r\n\r\n## Step 1\r\n\r\nHandle the basic case of 0 through 99.\r\n\r\nIf the input to the program is `22`, then the output should be\r\n`'twenty-two'`.\r\n\r\nYour program should complain loudly if given a number outside the\r\nblessed range.\r\n\r\nSome good test cases for this program are:\r\n\r\n- 0\r\n- 14\r\n- 50\r\n- 98\r\n- -1\r\n- 100\r\n\r\n### Extension\r\n\r\nIf you're on a Mac, shell out to Mac OS X's `say` program to talk out\r\nloud. If you're on Linux or Windows, eSpeakNG may be available with the command `espeak`.\r\n\r\n## Step 2\r\n\r\nImplement breaking a number up into chunks of thousands.\r\n\r\nSo `1234567890` should yield a list like 1, 234, 567, and 890, while the\r\nfar simpler `1000` should yield just 1 and 0.\r\n\r\nThe program must also report any values that are out of range.\r\n\r\n## Step 3\r\n\r\nNow handle inserting the appropriate scale word between those chunks.\r\n\r\nSo `1234567890` should yield `'1 billion 234 million 567 thousand 890'`\r\n\r\nThe program must also report any values that are out of range.  It's\r\nfine to stop at \"trillion\".\r\n\r\n## Step 4\r\n\r\nPut it all together to get nothing but plain English.\r\n\r\n`12345` should give `twelve thousand three hundred forty-five`.\r\n\r\nThe program must also report any values that are out of range.\r\n\r\n### Extensions\r\n\r\nUse _and_ (correctly) when spelling out the number in English:\r\n\r\n- 14 becomes \"fourteen\".\r\n- 100 becomes \"one hundred\".\r\n- 120 becomes \"one hundred and twenty\".\r\n- 1002 becomes \"one thousand and two\".\r\n- 1323 becomes \"one thousand three hundred and twenty-three\".\r\n",
  "luhn" : "# Instructions\r\n\r\nGiven a number determine whether or not it is valid per the Luhn formula.\r\n\r\nThe [Luhn algorithm](https://en.wikipedia.org/wiki/Luhn_algorithm) is\r\na simple checksum formula used to validate a variety of identification\r\nnumbers, such as credit card numbers and Canadian Social Insurance\r\nNumbers.\r\n\r\nThe task is to check if a given string is valid.\r\n\r\nValidating a Number\r\n------\r\n\r\nStrings of length 1 or less are not valid. Spaces are allowed in the input,\r\nbut they should be stripped before checking. All other non-digit characters\r\nare disallowed.\r\n\r\n## Example 1: valid credit card number\r\n\r\n```text\r\n4539 3195 0343 6467\r\n```\r\n\r\nThe first step of the Luhn algorithm is to double every second digit,\r\nstarting from the right. We will be doubling\r\n\r\n```text\r\n4_3_ 3_9_ 0_4_ 6_6_\r\n```\r\n\r\nIf doubling the number results in a number greater than 9 then subtract 9\r\nfrom the product. The results of our doubling:\r\n\r\n```text\r\n8569 6195 0383 3437\r\n```\r\n\r\nThen sum all of the digits:\r\n\r\n```text\r\n8+5+6+9+6+1+9+5+0+3+8+3+3+4+3+7 = 80\r\n```\r\n\r\nIf the sum is evenly divisible by 10, then the number is valid. This number is valid!\r\n\r\n## Example 2: invalid credit card number\r\n\r\n```text\r\n8273 1232 7352 0569\r\n```\r\n\r\nDouble the second digits, starting from the right\r\n\r\n```text\r\n7253 2262 5312 0539\r\n```\r\n\r\nSum the digits\r\n\r\n```text\r\n7+2+5+3+2+2+6+2+5+3+1+2+0+5+3+9 = 57\r\n```\r\n\r\n57 is not evenly divisible by 10, so this number is not valid.\r\n",
  "poker" : "# Instructions\r\n\r\nPick the best hand(s) from a list of poker hands.\r\n\r\nSee [wikipedia](https://en.wikipedia.org/wiki/List_of_poker_hands) for an\r\noverview of poker hands.\r\n",
  "all_your_base" : "# Instructions\r\n\r\nConvert a number, represented as a sequence of digits in one base, to any other base.\r\n\r\nImplement general base conversion. Given a number in base **a**,\r\nrepresented as a sequence of digits, convert it to base **b**.\r\n\r\n## Note\r\n\r\n- Try to implement the conversion yourself.\r\n  Do not use something else to perform the conversion for you.\r\n- Your solution should take base **a**, a sequence of digits, and base **b**, in that order.\r\n\r\n## About [Positional Notation](https://en.wikipedia.org/wiki/Positional_notation)\r\n\r\nIn positional notation, a number in base **b** can be understood as a linear\r\ncombination of powers of **b**.\r\n\r\nThe number 42, *in base 10*, means:\r\n\r\n(4 * 10^1) + (2 * 10^0)\r\n\r\nThe number 101010, *in base 2*, means:\r\n\r\n(1 * 2^5) + (0 * 2^4) + (1 * 2^3) + (0 * 2^2) + (1 * 2^1) + (0 * 2^0)\r\n\r\nThe number 1120, *in base 3*, means:\r\n\r\n(1 * 3^3) + (1 * 3^2) + (2 * 3^1) + (0 * 3^0)\r\n\r\nI think you got the idea!\r\n\r\n*Yes. Those three numbers above are exactly the same. Congratulations!*\r\n",
  "accumulate" : "# Instructions\r\n\r\nImplement the `accumulate` operation, which, given a collection and an\r\noperation to perform on each element of the collection, returns a new\r\ncollection containing the result of applying that operation to each element of\r\nthe input collection.\r\n\r\nGiven the collection of numbers:\r\n\r\n- 1, 2, 3, 4, 5\r\n\r\nAnd the operation:\r\n\r\n- square a number (`x => x * x`)\r\n\r\nYour code should be able to produce the collection of squares:\r\n\r\n- 1, 4, 9, 16, 25\r\n\r\nCheck out the test suite to see the expected function signature.\r\n\r\n## Restrictions\r\n\r\nKeep your hands off that collect/map/fmap/whatchamacallit functionality\r\nprovided by your standard library!\r\nSolve this one yourself using other basic tools instead.\r\n",
  "hexadecimal" : "# Instructions\r\n\r\nConvert a hexadecimal number, represented as a string (e.g. \"10af8c\"), to its decimal equivalent using first principles (i.e. no, you may not use built-in or external libraries to accomplish the conversion).\r\n\r\nOn the web we use hexadecimal to represent colors, e.g. green: 008000,\r\nteal: 008080, navy: 000080).\r\n\r\nThe program should handle invalid hexadecimal strings.\r\n",
  "series" : "# Instructions\r\n\r\nGiven a string of digits, output all the contiguous substrings of length `n` in\r\nthat string in the order that they appear.\r\n\r\nFor example, the string \"49142\" has the following 3-digit series:\r\n\r\n- \"491\"\r\n- \"914\"\r\n- \"142\"\r\n\r\nAnd the following 4-digit series:\r\n\r\n- \"4914\"\r\n- \"9142\"\r\n\r\nAnd if you ask for a 6-digit series from a 5-digit string, you deserve\r\nwhatever you get.\r\n\r\nNote that these series are only required to occupy *adjacent positions*\r\nin the input; the digits need not be *numerically consecutive*.\r\n",
  "kindergarten_garden" : "# Instructions\r\n\r\nGiven a diagram, determine which plants each child in the kindergarten class is\r\nresponsible for.\r\n\r\nThe kindergarten class is learning about growing plants. The teacher\r\nthought it would be a good idea to give them actual seeds, plant them in\r\nactual dirt, and grow actual plants.\r\n\r\nThey've chosen to grow grass, clover, radishes, and violets.\r\n\r\nTo this end, the children have put little cups along the window sills, and\r\nplanted one type of plant in each cup, choosing randomly from the available\r\ntypes of seeds.\r\n\r\n```text\r\n[window][window][window]\r\n........................ # each dot represents a cup\r\n........................\r\n```\r\n\r\nThere are 12 children in the class:\r\n\r\n- Alice, Bob, Charlie, David,\r\n- Eve, Fred, Ginny, Harriet,\r\n- Ileana, Joseph, Kincaid, and Larry.\r\n\r\nEach child gets 4 cups, two on each row. Their teacher assigns cups to\r\nthe children alphabetically by their names.\r\n\r\nThe following diagram represents Alice's plants:\r\n\r\n```text\r\n[window][window][window]\r\nVR......................\r\nRG......................\r\n```\r\n\r\nIn the first row, nearest the windows, she has a violet and a radish.  In the\r\nsecond row she has a radish and some grass.\r\n\r\nYour program will be given the plants from left-to-right starting with\r\nthe row nearest the windows. From this, it should be able to determine\r\nwhich plants belong to each student.\r\n\r\nFor example, if it's told that the garden looks like so:\r\n\r\n```text\r\n[window][window][window]\r\nVRCGVVRVCGGCCGVRGCVCGCGV\r\nVRCCCGCRRGVCGCRVVCVGCGCV\r\n```\r\n\r\nThen if asked for Alice's plants, it should provide:\r\n\r\n- Violets, radishes, violets, radishes\r\n\r\nWhile asking for Bob's plants would yield:\r\n\r\n- Clover, grass, clover, clover\r\n",
  "word_count" : "# Instructions\r\n\r\nYour task is to count how many times each word occurs in a subtitle of a drama.\r\n\r\nThe subtitles from these dramas use only ASCII characters.\r\n\r\nThe characters often speak in casual English, using contractions like _they're_ or _it's_.\r\nThough these contractions come from two words (e.g. _we are_), the contraction (_we're_) is considered a single word.\r\n\r\nWords can be separated by any form of punctuation (e.g. \":\", \"!\", or \"?\") or whitespace (e.g. \"\\t\", \"\\n\", or \" \").\r\nThe only punctuation that does not separate words is the apostrophe in contractions.\r\n\r\nNumbers are considered words.\r\nIf the subtitles say _It costs 100 dollars._ then _100_ will be its own word.\r\n\r\nWords are case insensitive.\r\nFor example, the word _you_ occurs three times in the following sentence:\r\n\r\n> You come back, you hear me? DO YOU HEAR ME?\r\n\r\nThe ordering of the word counts in the results doesn't matter.\r\n\r\nHere's an example that incorporates several of the elements discussed above:\r\n\r\n- simple words\r\n- contractions\r\n- numbers\r\n- case insensitive words\r\n- punctuation (including apostrophes) to separate words\r\n- different forms of whitespace to separate words\r\n\r\n`\"That's the password: 'PASSWORD 123'!\", cried the Special Agent.\\nSo I fled.`\r\n\r\nThe mapping for this subtitle would be:\r\n\r\n```text\r\n123: 1\r\nagent: 1\r\ncried: 1\r\nfled: 1\r\ni: 1\r\npassword: 2\r\nso: 1\r\nspecial: 1\r\nthat's: 1\r\nthe: 2\r\n```\r\n",
  "yacht" : "# Description\r\n\r\nThe dice game [Yacht][yacht] is from the same family as Poker Dice, Generala and particularly Yahtzee, of which it is a precursor.\r\nIn the game, five dice are rolled and the result can be entered in any of twelve categories.\r\nThe score of a throw of the dice depends on category chosen.\r\n\r\n## Scores in Yacht\r\n\r\n| Category | Score | Description | Example |\r\n| -------- | ----- | ----------- | ------- |\r\n| Ones | 1 × number of ones | Any combination | 1 1 1 4 5 scores 3 |\r\n| Twos | 2 × number of twos | Any combination | 2 2 3 4 5 scores 4 |\r\n| Threes | 3 × number of threes | Any combination | 3 3 3 3 3 scores 15 |\r\n| Fours | 4 × number of fours | Any combination | 1 2 3 3 5 scores 0 |\r\n| Fives | 5 × number of fives| Any combination | 5 1 5 2 5 scores 15 |\r\n| Sixes | 6 × number of sixes | Any combination | 2 3 4 5 6 scores 6 |\r\n| Full House | Total of the dice | Three of one number and two of another | 3 3 3 5 5 scores 19 |\r\n| Four of a Kind | Total of the four dice | At least four dice showing the same face | 4 4 4 4 6 scores 16 |\r\n| Little Straight |  30 points | 1-2-3-4-5 | 1 2 3 4 5 scores 30 |\r\n| Big Straight | 30 points | 2-3-4-5-6 | 2 3 4 5 6 scores 30 |\r\n| Choice | Sum of the dice | Any combination | 2 3 3 4 6 scores 18 |\r\n| Yacht | 50 points | All five dice showing the same face | 4 4 4 4 4 scores 50 |\r\n\r\nIf the dice do not satisfy the requirements of a category, the score is zero.\r\nIf, for example, *Four Of A Kind* is entered in the *Yacht* category, zero points are scored.\r\nA *Yacht* scores zero if entered in the *Full House* category.\r\n\r\n## Task\r\n\r\nGiven a list of values for five dice and a category, your solution should return the score of the dice for that category.\r\nIf the dice do not satisfy the requirements of the category your solution should return 0.\r\nYou can assume that five values will always be presented, and the value of each will be between one and six inclusively.\r\nYou should not assume that the dice are ordered.\r\n\r\n[yacht]: https://en.wikipedia.org/wiki/Yacht_(dice_game)\r\n",
  "armstrong_numbers" : "# Instructions\r\n\r\nAn [Armstrong number](https://en.wikipedia.org/wiki/Narcissistic_number) is a number that is the sum of its own digits each raised to the power of the number of digits.\r\n\r\nFor example:\r\n\r\n- 9 is an Armstrong number, because `9 = 9^1 = 9`\r\n- 10 is *not* an Armstrong number, because `10 != 1^2 + 0^2 = 1`\r\n- 153 is an Armstrong number, because: `153 = 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153`\r\n- 154 is *not* an Armstrong number, because: `154 != 1^3 + 5^3 + 4^3 = 1 + 125 + 64 = 190`\r\n\r\nWrite some code to determine whether a number is an Armstrong number.\r\n",
  "grains" : "# Instructions\r\n\r\nCalculate the number of grains of wheat on a chessboard given that the number\r\non each square doubles.\r\n\r\nThere once was a wise servant who saved the life of a prince. The king\r\npromised to pay whatever the servant could dream up. Knowing that the\r\nking loved chess, the servant told the king he would like to have grains\r\nof wheat. One grain on the first square of a chess board, with the number\r\nof grains doubling on each successive square.\r\n\r\nThere are 64 squares on a chessboard (where square 1 has one grain, square 2 has two grains, and so on).\r\n\r\nWrite code that shows:\r\n- how many grains were on a given square, and\r\n- the total number of grains on the chessboard\r\n\r\n## For bonus points\r\n\r\nDid you get the tests passing and the code clean? If you want to, these\r\nare some additional things you could try:\r\n\r\n- Optimize for speed.\r\n- Optimize for readability.\r\n\r\nThen please share your thoughts in a comment on the submission. Did this\r\nexperiment make the code better? Worse? Did you learn anything from it?\r\n",
  "proverb" : "# Instructions\r\n\r\nFor want of a horseshoe nail, a kingdom was lost, or so the saying goes.\r\n\r\nGiven a list of inputs, generate the relevant proverb. For example, given the list `[\"nail\", \"shoe\", \"horse\", \"rider\", \"message\", \"battle\", \"kingdom\"]`, you will output the full text of this proverbial rhyme:\r\n\r\n```text\r\nFor want of a nail the shoe was lost.\r\nFor want of a shoe the horse was lost.\r\nFor want of a horse the rider was lost.\r\nFor want of a rider the message was lost.\r\nFor want of a message the battle was lost.\r\nFor want of a battle the kingdom was lost.\r\nAnd all for the want of a nail.\r\n```\r\n\r\nNote that the list of inputs may vary; your solution should be able to handle lists of arbitrary length and content. No line of the output text should be a static, unchanging string; all should vary according to the input given.\r\n",
  "collatz_conjecture" : "# Instructions\r\n\r\nThe Collatz Conjecture or 3x+1 problem can be summarized as follows:\r\n\r\nTake any positive integer n. If n is even, divide n by 2 to get n / 2. If n is\r\nodd, multiply n by 3 and add 1 to get 3n + 1. Repeat the process indefinitely.\r\nThe conjecture states that no matter which number you start with, you will\r\nalways reach 1 eventually.\r\n\r\nGiven a number n, return the number of steps required to reach 1.\r\n\r\n## Examples\r\n\r\nStarting with n = 12, the steps would be as follows:\r\n\r\n0. 12\r\n1. 6\r\n2. 3\r\n3. 10\r\n4. 5\r\n5. 16\r\n6. 8\r\n7. 4\r\n8. 2\r\n9. 1\r\n\r\nResulting in 9 steps. So for input n = 12, the return value would be 9.\r\n",
  "pangram" : "# Instructions\r\n\r\nYour task is to figure out if a sentence is a pangram.\r\n\r\nA pangram is a sentence using every letter of the alphabet at least once.\r\nIt is case insensitive, so it doesn't matter if a letter is lower-case (e.g. `k`) or upper-case (e.g. `K`).\r\n\r\nFor this exercise we only use the basic letters used in the English alphabet: `a` to `z`.\r\n",
  "secret_handshake" : "# Instructions\r\n\r\nYour task is to convert a number between 1 and 31 to a sequence of actions in the secret handshake.\r\n\r\nThe sequence of actions is chosen by looking at the rightmost five digits of the number once it's been converted to binary.\r\nStart at the right-most digit and move left.\r\n\r\nThe actions for each number place are:\r\n\r\n```plaintext\r\n00001 = wink\r\n00010 = double blink\r\n00100 = close your eyes\r\n01000 = jump\r\n10000 = Reverse the order of the operations in the secret handshake.\r\n```\r\n\r\nLet's use the number `9` as an example:\r\n\r\n- 9 in binary is `1001`.\r\n- The digit that is farthest to the right is 1, so the first action is `wink`.\r\n- Going left, the next digit is 0, so there is no double-blink.\r\n- Going left again, the next digit is 0, so you leave your eyes open.\r\n- Going left again, the next digit is 1, so you jump.\r\n\r\nThat was the last digit, so the final code is:\r\n\r\n```plaintext\r\nwink, jump\r\n```\r\n\r\nGiven the number 26, which is `11010` in binary, we get the following actions:\r\n\r\n- double blink\r\n- jump\r\n- reverse actions\r\n\r\nThe secret handshake for 26 is therefore:\r\n\r\n```plaintext\r\njump, double blink\r\n```\r\n\r\n~~~~exercism/note\r\nIf you aren't sure what binary is or how it works, check out [this binary tutorial][intro-to-binary].\r\n[intro-to-binary]: https://medium.com/basecs/bits-bytes-building-with-binary-13cb4289aafa\r\n~~~~\r\n",
  "protein_translation" : "# Instructions\r\n\r\nTranslate RNA sequences into proteins.\r\n\r\nRNA can be broken into three nucleotide sequences called codons, and then translated to a polypeptide like so:\r\n\r\nRNA: `\"AUGUUUUCU\"` => translates to\r\n\r\nCodons: `\"AUG\", \"UUU\", \"UCU\"`\r\n=> which become a polypeptide with the following sequence =>\r\n\r\nProtein: `\"Methionine\", \"Phenylalanine\", \"Serine\"`\r\n\r\nThere are 64 codons which in turn correspond to 20 amino acids; however, all of the codon sequences and resulting amino acids are not important in this exercise.  If it works for one codon, the program should work for all of them.\r\nHowever, feel free to expand the list in the test suite to include them all.\r\n\r\nThere are also three terminating codons (also known as 'STOP' codons); if any of these codons are encountered (by the ribosome), all translation ends and the protein is terminated.\r\n\r\nAll subsequent codons after are ignored, like this:\r\n\r\nRNA: `\"AUGUUUUCUUAAAUG\"` =>\r\n\r\nCodons: `\"AUG\", \"UUU\", \"UCU\", \"UAA\", \"AUG\"` =>\r\n\r\nProtein: `\"Methionine\", \"Phenylalanine\", \"Serine\"`\r\n\r\nNote the stop codon `\"UAA\"` terminates the translation and the final methionine is not translated into the protein sequence.\r\n\r\nBelow are the codons and resulting Amino Acids needed for the exercise.\r\n\r\nCodon                 | Protein\r\n:---                  | :---\r\nAUG                   | Methionine\r\nUUU, UUC              | Phenylalanine\r\nUUA, UUG              | Leucine\r\nUCU, UCC, UCA, UCG    | Serine\r\nUAU, UAC              | Tyrosine\r\nUGU, UGC              | Cysteine\r\nUGG                   | Tryptophan\r\nUAA, UAG, UGA         | STOP\r\n\r\nLearn more about [protein translation on Wikipedia](http://en.wikipedia.org/wiki/Translation_(biology))\r\n",
  "rotational_cipher" : "# Instructions\r\n\r\nCreate an implementation of the rotational cipher, also sometimes called the Caesar cipher.\r\n\r\nThe Caesar cipher is a simple shift cipher that relies on\r\ntransposing all the letters in the alphabet using an integer key\r\nbetween `0` and `26`. Using a key of `0` or `26` will always yield\r\nthe same output due to modular arithmetic. The letter is shifted\r\nfor as many values as the value of the key.\r\n\r\nThe general notation for rotational ciphers is `ROT + <key>`.\r\nThe most commonly used rotational cipher is `ROT13`.\r\n\r\nA `ROT13` on the Latin alphabet would be as follows:\r\n\r\n```text\r\nPlain:  abcdefghijklmnopqrstuvwxyz\r\nCipher: nopqrstuvwxyzabcdefghijklm\r\n```\r\n\r\nIt is stronger than the Atbash cipher because it has 27 possible keys, and 25 usable keys.\r\n\r\nCiphertext is written out in the same formatting as the input including spaces and punctuation.\r\n\r\n## Examples\r\n\r\n- ROT5  `omg` gives `trl`\r\n- ROT0  `c` gives `c`\r\n- ROT26 `Cool` gives `Cool`\r\n- ROT13 `The quick brown fox jumps over the lazy dog.` gives `Gur dhvpx oebja sbk whzcf bire gur ynml qbt.`\r\n- ROT13 `Gur dhvpx oebja sbk whzcf bire gur ynml qbt.` gives `The quick brown fox jumps over the lazy dog.`\r\n",
  "two_fer" : "# Instructions\r\n\r\nYour task is to determine what you will say as you give away the extra cookie.\r\n\r\nIf your friend likes cookies, and is named Do-yun, then you will say:\r\n\r\n```text\r\nOne for Do-yun, one for me.\r\n```\r\n\r\nIf your friend doesn't like cookies, you give the cookie to the next person in line at the bakery.\r\nSince you don't know their name, you will say _you_ instead.\r\n\r\n```text\r\nOne for you, one for me.\r\n```\r\n\r\nHere are some examples:\r\n\r\n|Name    |Dialogue\r\n|:-------|:------------------\r\n|Alice   |One for Alice, one for me.\r\n|Bohdan  |One for Bohdan, one for me.\r\n|        |One for you, one for me.\r\n|Zaphod  |One for Zaphod, one for me.\r\n",
  "sum_of_multiples" : "# Instructions\r\n\r\nYour task is to write the code that calculates the energy points that get awarded to players when they complete a level.\r\n\r\nThe points awarded depend on two things:\r\n\r\n- The level (a number) that the player completed.\r\n- The base value of each magical item collected by the player during that level.\r\n\r\nThe energy points are awarded according to the following rules:\r\n\r\n1. For each magical item, take the base value and find all the multiples of that value that are less than the level number.\r\n2. Combine the sets of numbers.\r\n3. Remove any duplicates.\r\n4. Calculate the sum of all the numbers that are left.\r\n\r\nLet's look at an example:\r\n\r\n**The player completed level 20 and found two magical items with base values of 3 and 5.**\r\n\r\nTo calculate the energy points earned by the player, we need to find all the unique multiples of these base values that are less than level 20.\r\n\r\n- Multiples of 3 less than 20: `{3, 6, 9, 12, 15, 18}`\r\n- Multiples of 5 less than 20: `{5, 10, 15}`\r\n- Combine the sets and remove duplicates: `{3, 5, 6, 9, 10, 12, 15, 18}`\r\n- Sum the unique multiples: `3 + 5 + 6 + 9 + 10 + 12 + 15 + 18 = 78`\r\n- Therefore, the player earns **78** energy points for completing level 20 and finding the two magical items with base values of 3 and 5.\r\n",
  "isbn_verifier" : "# Instructions\r\n\r\nThe [ISBN-10 verification process](https://en.wikipedia.org/wiki/International_Standard_Book_Number) is used to validate book identification\r\nnumbers. These normally contain dashes and look like: `3-598-21508-8`\r\n\r\n## ISBN\r\n\r\nThe ISBN-10 format is 9 digits (0 to 9) plus one check character (either a digit or an X only). In the case the check character is an X, this represents the value '10'. These may be communicated with or without hyphens, and can be checked for their validity by the following formula:\r\n\r\n```\r\n(x1 * 10 + x2 * 9 + x3 * 8 + x4 * 7 + x5 * 6 + x6 * 5 + x7 * 4 + x8 * 3 + x9 * 2 + x10 * 1) mod 11 == 0\r\n```\r\n\r\nIf the result is 0, then it is a valid ISBN-10, otherwise it is invalid.\r\n\r\n## Example\r\n\r\nLet's take the ISBN-10 `3-598-21508-8`. We plug it in to the formula, and get:\r\n```\r\n(3 * 10 + 5 * 9 + 9 * 8 + 8 * 7 + 2 * 6 + 1 * 5 + 5 * 4 + 0 * 3 + 8 * 2 + 8 * 1) mod 11 == 0\r\n```\r\n\r\nSince the result is 0, this proves that our ISBN is valid.\r\n\r\n## Task\r\n\r\nGiven a string the program should check if the provided string is a valid ISBN-10.\r\nPutting this into place requires some thinking about preprocessing/parsing of the string prior to calculating the check digit for the ISBN.\r\n\r\nThe program should be able to verify ISBN-10 both with and without separating dashes.\r\n\r\n\r\n## Caveats\r\n\r\nConverting from strings to numbers can be tricky in certain languages.\r\nNow, it's even trickier since the check digit of an ISBN-10 may be 'X' (representing '10'). For instance `3-598-21507-X` is a valid ISBN-10.\r\n\r\n## Bonus tasks\r\n\r\n* Generate a valid ISBN-13 from the input ISBN-10 (and maybe verify it again with a derived verifier).\r\n\r\n* Generate valid ISBN, maybe even from a given starting ISBN.\r\n",
  "strain" : "# Instructions\r\n\r\nImplement the `keep` and `discard` operation on collections. Given a collection\r\nand a predicate on the collection's elements, `keep` returns a new collection\r\ncontaining those elements where the predicate is true, while `discard` returns\r\na new collection containing those elements where the predicate is false.\r\n\r\nFor example, given the collection of numbers:\r\n\r\n- 1, 2, 3, 4, 5\r\n\r\nAnd the predicate:\r\n\r\n- is the number even?\r\n\r\nThen your keep operation should produce:\r\n\r\n- 2, 4\r\n\r\nWhile your discard operation should produce:\r\n\r\n- 1, 3, 5\r\n\r\nNote that the union of keep and discard is all the elements.\r\n\r\nThe functions may be called `keep` and `discard`, or they may need different\r\nnames in order to not clash with existing functions or concepts in your\r\nlanguage.\r\n\r\n## Restrictions\r\n\r\nKeep your hands off that filter/reject/whatchamacallit functionality\r\nprovided by your standard library!  Solve this one yourself using other\r\nbasic tools instead.\r\n",
  "matching_brackets" : "# Instructions\r\n\r\nGiven a string containing brackets `[]`, braces `{}`, parentheses `()`,\r\nor any combination thereof, verify that any and all pairs are matched\r\nand nested correctly.\r\n",
  "trinary" : "# Instructions\r\n\r\nConvert a trinary number, represented as a string (e.g. '102012'), to its\r\ndecimal equivalent using first principles.\r\n\r\nThe program should consider strings specifying an invalid trinary as the\r\nvalue 0.\r\n\r\nTrinary numbers contain three symbols: 0, 1, and 2.\r\n\r\nThe last place in a trinary number is the 1's place. The second to last\r\nis the 3's place, the third to last is the 9's place, etc.\r\n\r\n```shell\r\n# \"102012\"\r\n    1       0       2       0       1       2    # the number\r\n1*3^5 + 0*3^4 + 2*3^3 + 0*3^2 + 1*3^1 + 2*3^0    # the value\r\n  243 +     0 +    54 +     0 +     3 +     2 =  302\r\n```\r\n\r\nIf your language provides a method in the standard library to perform the\r\nconversion, pretend it doesn't exist and implement it yourself.\r\n",
  "etl" : "# Instructions\r\n\r\nYour task is to change the data format of letters and their point values in the game.\r\n\r\nCurrently, letters are stored in groups based on their score, in a one-to-many mapping.\r\n\r\n- 1 point: \"A\", \"E\", \"I\", \"O\", \"U\", \"L\", \"N\", \"R\", \"S\", \"T\",\r\n- 2 points: \"D\", \"G\",\r\n- 3 points: \"B\", \"C\", \"M\", \"P\",\r\n- 4 points: \"F\", \"H\", \"V\", \"W\", \"Y\",\r\n- 5 points: \"K\",\r\n- 8 points: \"J\", \"X\",\r\n- 10 points: \"Q\", \"Z\",\r\n\r\nThis needs to be changed to store each individual letter with its score in a one-to-one mapping.\r\n\r\n- \"a\" is worth 1 point.\r\n- \"b\" is worth 3 points.\r\n- \"c\" is worth 3 points.\r\n- \"d\" is worth 2 points.\r\n- etc.\r\n\r\nAs part of this change, the team has also decided to change the letters to be lower-case rather than upper-case.\r\n\r\n~~~~exercism/note\r\nIf you want to look at how the data was previously structured and how it needs to change, take a look at the examples in the test suite.\r\n~~~~\r\n",
  "largest_series_product" : "# Instructions\r\n\r\nYour task is to look for patterns in the long sequence of digits in the encrypted signal.\r\n\r\nThe technique you're going to use here is called the largest series product.\r\n\r\nLet's define a few terms, first.\r\n\r\n- **input**: the sequence of digits that you need to analyze\r\n- **series**: a sequence of adjacent digits (those that are next to each other) that is contained within the input\r\n- **span**: how many digits long each series is\r\n- **product**: what you get when you multiply numbers together\r\n\r\nLet's work through an example, with the input `\"63915\"`.\r\n\r\n- To form a series, take adjacent digits in the original input.\r\n- If you are working with a span of `3`, there will be three possible series:\r\n  - `\"639\"`\r\n  - `\"391\"`\r\n  - `\"915\"`\r\n- Then we need to calculate the product of each series:\r\n  - The product of the series `\"639\"` is 162 (`6 × 3 × 9 = 162`)\r\n  - The product of the series `\"391\"` is 27 (`3 × 9 × 1 = 27`)\r\n  - The product of the series `\"915\"` is 45 (`9 × 1 × 5 = 45`)\r\n- 162 is bigger than both 27 and 45, so the largest series product of `\"63915\"` is from the series `\"639\"`.\r\n  So the answer is **162**.\r\n",
  "robot_simulator" : "# Instructions\r\n\r\nWrite a robot simulator.\r\n\r\nA robot factory's test facility needs a program to verify robot movements.\r\n\r\nThe robots have three possible movements:\r\n\r\n- turn right\r\n- turn left\r\n- advance\r\n\r\nRobots are placed on a hypothetical infinite grid, facing a particular\r\ndirection (north, east, south, or west) at a set of {x,y} coordinates,\r\ne.g., {3,8}, with coordinates increasing to the north and east.\r\n\r\nThe robot then receives a number of instructions, at which point the\r\ntesting facility verifies the robot's new position, and in which\r\ndirection it is pointing.\r\n\r\n- The letter-string \"RAALAL\" means:\r\n  - Turn right\r\n  - Advance twice\r\n  - Turn left\r\n  - Advance once\r\n  - Turn left yet again\r\n- Say a robot starts at {7, 3} facing north. Then running this stream\r\n  of instructions should leave it at {9, 4} facing west.\r\n",
  "change" : "# Instructions\r\n\r\nCorrectly determine the fewest number of coins to be given to a customer such\r\nthat the sum of the coins' value would equal the correct amount of change.\r\n\r\n## For example\r\n\r\n- An input of 15 with [1, 5, 10, 25, 100] should return one nickel (5)\r\n  and one dime (10) or [5, 10]\r\n- An input of 40 with [1, 5, 10, 25, 100] should return one nickel (5)\r\n  and one dime (10) and one quarter (25) or [5, 10, 25]\r\n\r\n## Edge cases\r\n\r\n- Does your algorithm work for any given set of coins?\r\n- Can you ask for negative change?\r\n- Can you ask for a change value smaller than the smallest coin value?\r\n",
  "grade_school" : "# Instructions\r\n\r\nGiven students' names along with the grade that they are in, create a roster\r\nfor the school.\r\n\r\nIn the end, you should be able to:\r\n\r\n- Add a student's name to the roster for a grade\r\n  - \"Add Jim to grade 2.\"\r\n  - \"OK.\"\r\n- Get a list of all students enrolled in a grade\r\n  - \"Which students are in grade 2?\"\r\n  - \"We've only got Jim just now.\"\r\n- Get a sorted list of all students in all grades.  Grades should sort\r\n  as 1, 2, 3, etc., and students within a grade should be sorted\r\n  alphabetically by name.\r\n  - \"Who is enrolled in school right now?\"\r\n  - \"Let me think. We have\r\n  Anna, Barb, and Charlie in grade 1,\r\n  Alex, Peter, and Zoe in grade 2\r\n  and Jim in grade 5.\r\n  So the answer is: Anna, Barb, Charlie, Alex, Peter, Zoe and Jim\"\r\n\r\nNote that all our students only have one name.  (It's a small town, what\r\ndo you want?)\r\n\r\n## For bonus points\r\n\r\nDid you get the tests passing and the code clean? If you want to, these\r\nare some additional things you could try:\r\n\r\n- If you're working in a language with mutable data structures and your\r\n  implementation allows outside code to mutate the school's internal DB\r\n  directly, see if you can prevent this. Feel free to introduce additional\r\n  tests.\r\n\r\nThen please share your thoughts in a comment on the submission. Did this\r\nexperiment make the code better? Worse? Did you learn anything from it?\r\n"
}