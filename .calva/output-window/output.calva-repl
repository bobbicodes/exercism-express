; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "Babashka" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd c:\Users\porko\exercism-express & bb --nrepl-server 55215 & popd
; Using host:port 127.0.0.1:55215 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉>  ; Use `alt+enter` to evaluate
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉user꞉> 
; clojure.lang.ExceptionInfo: [line 1, col 26] Unsupported escape character: \p. user c:\Users\porko\exercism-express\scratch.clj:1:
clj꞉user꞉> 
[#object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x1aa39d3 "exercises\\practice\\accumulate"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x39eef645 "exercises\\practice\\acronym"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x6c3c1cd8 "exercises\\practice\\all-your-base"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x3299d14 "exercises\\practice\\allergies"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x31bc6b9b "exercises\\practice\\anagram"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x757944d9 "exercises\\practice\\armstrong-numbers"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x61c409e8 "exercises\\practice\\atbash-cipher"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x2e28321c "exercises\\practice\\bank-account"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x2e9f5551 "exercises\\practice\\beer-song"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x46906234 "exercises\\practice\\binary"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x6a983970 "exercises\\practice\\binary-search"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0xdcb7be0 "exercises\\practice\\binary-search-tree"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x4ce12c0d "exercises\\practice\\bob"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x24f8d25a "exercises\\practice\\change"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x773902af "exercises\\practice\\clock"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x6c4422a0 "exercises\\practice\\collatz-conjecture"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x6b42dc92 "exercises\\practice\\complex-numbers"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x2dcdd667 "exercises\\practice\\crypto-square"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x40f9ecf7 "exercises\\practice\\diamond"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x46702c5e "exercises\\practice\\difference-of-squares"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x635642d6 "exercises\\practice\\dominoes"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x57c309a0 "exercises\\practice\\etl"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x46eb29ef "exercises\\practice\\flatten-array"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x227fa563 "exercises\\practice\\gigasecond"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x2e5867d6 "exercises\\practice\\go-counting"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x266f3416 "exercises\\practice\\grade-school"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x411fc2bc "exercises\\practice\\grains"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x26fc0b84 "exercises\\practice\\hamming"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x4209e010 "exercises\\practice\\hello-world"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x52e320c7 "exercises\\practice\\hexadecimal"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x53242a63 "exercises\\practice\\isbn-verifier"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x3e278774 "exercises\\practice\\isogram"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x22513e3f "exercises\\practice\\kindergarten-garden"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x2d61f43f "exercises\\practice\\largest-series-product"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x13b8cb18 "exercises\\practice\\leap"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x4e2495b3 "exercises\\practice\\luhn"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x692efe60 "exercises\\practice\\matching-brackets"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x2d0d8066 "exercises\\practice\\meetup"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x6cf08dfc "exercises\\practice\\minesweeper"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0xfde57d "exercises\\practice\\nth-prime"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x5669867a "exercises\\practice\\nucleotide-count"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x18ba71a9 "exercises\\practice\\octal"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x20ca9dcd "exercises\\practice\\pangram"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x42fb9300 "exercises\\practice\\pascals-triangle"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x30920c2a "exercises\\practice\\perfect-numbers"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x4c917f30 "exercises\\practice\\phone-number"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x18cff5ed "exercises\\practice\\pig-latin"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x6bd9f139 "exercises\\practice\\poker"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x174c2576 "exercises\\practice\\pov"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x42ab6806 "exercises\\practice\\prime-factors"]
 ...]
clj꞉user꞉> 
; java.lang.IllegalArgumentException: Cannot open <#object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x4a7fbf5e "exercises\\practice\\accumulate"]> as an InputStream. user c:\Users\porko\exercism-express\scratch.clj:1:1
clj꞉user꞉> 
#object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x307e9f7e "exercises\\practice\\accumulate"]
clj꞉user꞉> 
#object[java.io.File 0x1973f6d0 "exercises\\practice\\accumulate\\src"]
clj꞉user꞉> 
[#object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x448b4d20 "exercises\\practice\\accumulate"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x45f77dd8 "exercises\\practice\\acronym"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x1f2052c8 "exercises\\practice\\all-your-base"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x7b68c3b9 "exercises\\practice\\allergies"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x11b8eb78 "exercises\\practice\\anagram"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x67b4f5cf "exercises\\practice\\armstrong-numbers"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x5ddb92b4 "exercises\\practice\\atbash-cipher"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x52454d74 "exercises\\practice\\bank-account"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x34cc2035 "exercises\\practice\\beer-song"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x538a6d3f "exercises\\practice\\binary"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x709cb0e3 "exercises\\practice\\binary-search"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x53df243f "exercises\\practice\\binary-search-tree"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x49c1a54 "exercises\\practice\\bob"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x12c37c1c "exercises\\practice\\change"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x42923303 "exercises\\practice\\clock"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x72078ea2 "exercises\\practice\\collatz-conjecture"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x315df21c "exercises\\practice\\complex-numbers"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x5721b607 "exercises\\practice\\crypto-square"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x480db7ee "exercises\\practice\\diamond"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x271e8429 "exercises\\practice\\difference-of-squares"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x1640a5dc "exercises\\practice\\dominoes"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x66567e "exercises\\practice\\etl"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x1758ab2e "exercises\\practice\\flatten-array"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x1ffcdc70 "exercises\\practice\\gigasecond"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x6b5d4a28 "exercises\\practice\\go-counting"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x7b25a4ea "exercises\\practice\\grade-school"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x38e3e57 "exercises\\practice\\grains"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x5f79ee1b "exercises\\practice\\hamming"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x81164b5 "exercises\\practice\\hello-world"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x76d6d89c "exercises\\practice\\hexadecimal"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x6425337b "exercises\\practice\\isbn-verifier"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x66db794e "exercises\\practice\\isogram"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x2d774fe4 "exercises\\practice\\kindergarten-garden"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x794ef63f "exercises\\practice\\largest-series-product"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x1da2f836 "exercises\\practice\\leap"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x4dfdcd67 "exercises\\practice\\luhn"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x46e6137 "exercises\\practice\\matching-brackets"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x42ea33b "exercises\\practice\\meetup"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x69a9c9d4 "exercises\\practice\\minesweeper"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x4535b93b "exercises\\practice\\nth-prime"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x52064378 "exercises\\practice\\nucleotide-count"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0xd28fe52 "exercises\\practice\\octal"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x7ef3264d "exercises\\practice\\pangram"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0xdbb2521 "exercises\\practice\\pascals-triangle"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x5448679b "exercises\\practice\\perfect-numbers"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x4a3460dd "exercises\\practice\\phone-number"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x3f9002da "exercises\\practice\\pig-latin"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x2343380d "exercises\\practice\\poker"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x13016ffd "exercises\\practice\\pov"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x1c951be5 "exercises\\practice\\prime-factors"]
 ...]
clj꞉user꞉> 
#object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x11aca119 "exercises\\practice\\accumulate"]
clj꞉user꞉> 
"exercises\\practice\\accumulate"
clj꞉user꞉> 
"exercises\\"
clj꞉user꞉> 
"exercises\\practice"
clj꞉user꞉> 
"\\accumulate"
clj꞉user꞉> 
"ccumulate"
clj꞉user꞉> 
"accumulate"
clj꞉user꞉> 
#object[clojure.core$map$fn__5931 0x24ba6d8d "clojure.core$map$fn__5931@24ba6d8d"]
clj꞉user꞉> 
("accumulate"
 "acronym"
 "all-your-base"
 "allergies"
 "anagram"
 "armstrong-numbers"
 "atbash-cipher"
 "bank-account"
 "beer-song"
 "binary"
 "binary-search"
 "binary-search-tree"
 "bob"
 "change"
 "clock"
 "collatz-conjecture"
 "complex-numbers"
 "crypto-square"
 "diamond"
 "difference-of-squares"
 "dominoes"
 "etl"
 "flatten-array"
 "gigasecond"
 "go-counting"
 "grade-school"
 "grains"
 "hamming"
 "hello-world"
 "hexadecimal"
 "isbn-verifier"
 "isogram"
 "kindergarten-garden"
 "largest-series-product"
 "leap"
 "luhn"
 "matching-brackets"
 "meetup"
 "minesweeper"
 "nth-prime"
 "nucleotide-count"
 "octal"
 "pangram"
 "pascals-triangle"
 "perfect-numbers"
 "phone-number"
 "pig-latin"
 "poker"
 "pov"
 "prime-factors"
 ...)
clj꞉user꞉> 
#'user/exercises
clj꞉user꞉> 
#'user/practice-exercises
clj꞉user꞉> 
#object[java.io.File 0x2ec716ff "exercises\\practice\\minesweeper"]
clj꞉user꞉> 
#object[java.io.File 0x6970c3f "exercises\\practice\\minesweeper\\src"]
clj꞉user꞉> 
#object[java.io.File 0xf4e6375 "exercises\\practice\\minesweeper\\src\\minesweeper.clj"]
clj꞉user꞉> 
"(ns minesweeper)\r\n\r\n(defn draw [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
clj꞉user꞉> 
nil
clj꞉user꞉> 
; java.lang.IllegalArgumentException: No implementation of method: :as-file of protocol: #'clojure.java.io/Coercions found for class: java.lang.Character user c:\Users\porko\exercism-express\scratch.clj:3:18
clj꞉user꞉> 
; java.lang.IllegalArgumentException: No implementation of method: :as-file of protocol: #'clojure.java.io/Coercions found for class: java.lang.Character user c:\Users\porko\exercism-express\scratch.clj:4:19
clj꞉user꞉> 
; java.lang.IllegalArgumentException: No implementation of method: :as-file of protocol: #'clojure.java.io/Coercions found for class: java.lang.Character user c:\Users\porko\exercism-express\scratch.clj:4:19
clj꞉user꞉> 
; java.lang.IllegalArgumentException: No implementation of method: :as-file of protocol: #'clojure.java.io/Coercions found for class: java.lang.Character user c:\Users\porko\exercism-express\scratch.clj:4:19
clj꞉user꞉> 
; java.lang.IllegalArgumentException: No implementation of method: :as-file of protocol: #'clojure.java.io/Coercions found for class: java.lang.Character user c:\Users\porko\exercism-express\scratch.clj:4:19
clj꞉user꞉> 
"accumulate"
clj꞉user꞉> 
\a
clj꞉user꞉> 
"accumulate"
clj꞉user꞉> 
"accumulate"
clj꞉user꞉> 
"accumulate"
clj꞉user꞉> 
; java.lang.IllegalArgumentException: No implementation of method: :as-file of protocol: #'clojure.java.io/Coercions found for class: java.lang.Character user c:\Users\porko\exercism-express\scratch.clj:4:19
clj꞉user꞉> 
; java.io.FileNotFoundException: exercises\practice\accumulate\src\a.clj (The system cannot find the file specified) user c:\Users\porko\exercism-express\scratch.clj:4:12
clj꞉user꞉> 
; java.io.FileNotFoundException: exercises\practice\accumulate\src\a.clj (The system cannot find the file specified) user c:\Users\porko\exercism-express\scratch.clj:4:12
clj꞉user꞉> 
; java.io.FileNotFoundException: exercises\practice\accumulate\src\a.clj (The system cannot find the file specified) user c:\Users\porko\exercism-express\scratch.clj:4:12
clj꞉user꞉> 
; java.io.FileNotFoundException: exercises\practice\accumulate\src\a.clj (The system cannot find the file specified) user c:\Users\porko\exercism-express\scratch.clj:3:11
clj꞉user꞉> 
; : Don't know how to create ISeq from: java.io.File user 
clj꞉user꞉> 
(#object[java.io.File 0x5df47296 "exercises\\practice\\accumulate\\src\\accumulate.clj"]
 #object[java.io.File 0x425b2ce3 "exercises\\practice\\acronym\\src\\acronym.clj"]
 #object[java.io.File 0x6de67c70 "exercises\\practice\\all-your-base\\src\\all_your_base.clj"]
 #object[java.io.File 0x52b8eb6c "exercises\\practice\\allergies\\src\\allergies.clj"]
 #object[java.io.File 0x4c8c7680 "exercises\\practice\\anagram\\src\\anagram.clj"]
 #object[java.io.File 0xff057bd "exercises\\practice\\armstrong-numbers\\src\\armstrong_numbers.clj"]
 #object[java.io.File 0x18a6ab81 "exercises\\practice\\atbash-cipher\\src\\atbash_cipher.clj"]
 #object[java.io.File 0x1d86d9a2 "exercises\\practice\\bank-account\\src\\bank_account.clj"]
 #object[java.io.File 0x10a938ef "exercises\\practice\\beer-song\\src\\beer_song.clj"]
 #object[java.io.File 0x414f55f6 "exercises\\practice\\binary\\src\\binary.clj"]
 #object[java.io.File 0x4f6c35a1 "exercises\\practice\\binary-search\\src\\binary_search.clj"]
 #object[java.io.File 0x61cce584 "exercises\\practice\\binary-search-tree\\src\\binary_search_tree.clj"]
 #object[java.io.File 0x30392276 "exercises\\practice\\bob\\src\\bob.clj"]
 #object[java.io.File 0x2154c96e "exercises\\practice\\change\\src\\change.clj"]
 #object[java.io.File 0x57c8c53b "exercises\\practice\\clock\\src\\clock.clj"]
 #object[java.io.File 0x20845e19 "exercises\\practice\\collatz-conjecture\\src\\collatz_conjecture.clj"]
 #object[java.io.File 0x2a276c32 "exercises\\practice\\complex-numbers\\src\\complex_numbers.clj"]
 #object[java.io.File 0x566b54d2 "exercises\\practice\\crypto-square\\src\\crypto_square.clj"]
 #object[java.io.File 0x21f45b63 "exercises\\practice\\diamond\\src\\diamond.clj"]
 #object[java.io.File 0x6960bb55 "exercises\\practice\\difference-of-squares\\src\\difference_of_squares.clj"]
 #object[java.io.File 0x3a1955c9 "exercises\\practice\\dominoes\\src\\dominoes.clj"]
 #object[java.io.File 0x49f81562 "exercises\\practice\\etl\\src\\etl.clj"]
 #object[java.io.File 0x4633747 "exercises\\practice\\flatten-array\\src\\flatten_array.clj"]
 #object[java.io.File 0xedf4fbe "exercises\\practice\\gigasecond\\src\\gigasecond.clj"]
 #object[java.io.File 0xa23d717 "exercises\\practice\\go-counting\\src\\go_counting.clj"]
 #object[java.io.File 0x6ff0f5e6 "exercises\\practice\\grade-school\\src\\grade_school.clj"]
 #object[java.io.File 0x536d2926 "exercises\\practice\\grains\\src\\grains.clj"]
 #object[java.io.File 0x4d768ba4 "exercises\\practice\\hamming\\src\\hamming.clj"]
 #object[java.io.File 0x66327507 "exercises\\practice\\hello-world\\src\\hello_world.clj"]
 #object[java.io.File 0x54aa3a7e "exercises\\practice\\hexadecimal\\src\\hexadecimal.clj"]
 #object[java.io.File 0x95f2d59 "exercises\\practice\\isbn-verifier\\src\\isbn_verifier.clj"]
 #object[java.io.File 0x6d06cf0 "exercises\\practice\\isogram\\src\\isogram.clj"]
 #object[java.io.File 0x7f836f2d "exercises\\practice\\kindergarten-garden\\src\\kindergarten_garden.clj"]
 #object[java.io.File 0x6b893b7f "exercises\\practice\\largest-series-product\\src\\largest_series_product.clj"]
 #object[java.io.File 0x54a08260 "exercises\\practice\\leap\\src\\leap.clj"]
 #object[java.io.File 0x50917a7f "exercises\\practice\\luhn\\src\\luhn.clj"]
 #object[java.io.File 0x390afd9f "exercises\\practice\\matching-brackets\\src\\matching_brackets.clj"]
 #object[java.io.File 0x2de94c62 "exercises\\practice\\meetup\\src\\meetup.clj"]
 #object[java.io.File 0x75b19456 "exercises\\practice\\minesweeper\\src\\minesweeper.clj"]
 #object[java.io.File 0x7c51c66d "exercises\\practice\\nth-prime\\src\\nth_prime.clj"]
 #object[java.io.File 0x20177e14 "exercises\\practice\\nucleotide-count\\src\\nucleotide_count.clj"]
 #object[java.io.File 0x5cd6eeb6 "exercises\\practice\\octal\\src\\octal.clj"]
 #object[java.io.File 0x63463f9e "exercises\\practice\\pangram\\src\\pangram.clj"]
 #object[java.io.File 0x7fbb03e1 "exercises\\practice\\pascals-triangle\\src\\pascals_triangle.clj"]
 #object[java.io.File 0x67535ffc "exercises\\practice\\perfect-numbers\\src\\perfect_numbers.clj"]
 #object[java.io.File 0x5eac47f3 "exercises\\practice\\phone-number\\src\\phone_number.clj"]
 #object[java.io.File 0x39f511fd "exercises\\practice\\pig-latin\\src\\pig_latin.clj"]
 #object[java.io.File 0x74fb892b "exercises\\practice\\poker\\src\\poker.clj"]
 #object[java.io.File 0x67e9d10b "exercises\\practice\\pov\\src\\pov.clj"]
 #object[java.io.File 0x627b00 "exercises\\practice\\prime-factors\\src\\prime_factors.clj"]
 ...)
clj꞉user꞉> 
("(ns accumulate)\r\n\r\n(defn accumulate [] ;; <- arglist goes here\r\n      ;; your code goes here\r\n)\r\n"
 "(ns acronym)\r\n\r\n(defn acronym\r\n  \"Converts phrase to its acronym.\"\r\n  [phrase]\r\n  )\r\n"
 "(ns all-your-base)\r\n\r\n(defn convert [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns allergies)\r\n\r\n(defn allergies [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn allergic-to? [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns anagram)\r\n\r\n(defn anagrams-for [word prospect-list] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns armstrong-numbers)\r\n\r\n(defn armstrong? [num] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns atbash-cipher)\r\n\r\n(defn encode [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns bank-account)\r\n\r\n(defn open-account [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n  )\r\n\r\n(defn close-account [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n  )\r\n\r\n(defn get-balance [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n  )\r\n\r\n(defn update-balance [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n  )\r\n"
 "(ns beer-song)\r\n\r\n(defn verse\r\n  \"Returns the nth verse of the song.\"\r\n  [num])\r\n\r\n(defn sing\r\n  \"Given a start and an optional end, returns all verses in this interval. If\r\n  end is not given, the whole song from start is sung.\"\r\n  ([start])\r\n  ([start end]))\r\n"
 "(ns binary)\r\n\r\n(defn to-decimal [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns binary-search)\r\n\r\n(defn search-for [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn middle [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns binary-search-tree)\r\n\r\n(defn value [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn singleton [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn insert [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn left [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn right [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn to-list [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn from-list [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns bob)\r\n\r\n(defn response-for [s] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns change)\r\n\r\n(defn issue [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns clock)\r\n\r\n(defn clock->string [clock] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn clock [hours minutes] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn add-time [clock time] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns collatz-conjecture)\r\n\r\n(defn collatz [num] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns complex-numbers)\r\n\r\n(defn real [[a b]] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn imaginary [[a b]] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn abs [[a b]] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn conjugate [[a b]] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn add [[a b] [c d]] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn sub [[a b] [c d]] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn mul [[a b] [c d]] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn div [[a b] [c d]] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns crypto-square)\r\n\r\n(defn normalize-plaintext [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn square-size [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn plaintext-segments [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn ciphertext [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn normalize-ciphertext [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns diamond)\r\n\r\n(defn diamond [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns difference-of-squares)\r\n\r\n(defn difference [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn sum-of-squares [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn square-of-sum [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns dominoes)\r\n\r\n(defn can-chain? [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns etl)\r\n\r\n(defn transform [source] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns flatten-array)\r\n\r\n(defn flatten [arr] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns gigasecond)\r\n\r\n(defn from []  ;; <- arglist goes here\r\n    ;; your code goes here\r\n)\r\n"
 "(ns go-counting)\r\n\r\n(defn territory [grid [x y]])\r\n\r\n(defn territories [grid])\r\n"
 "(ns grade-school)\r\n\r\n(defn grade [school grade]  ;; <- arglist goes here\r\n    ;; your code goes here\r\n)\r\n\r\n(defn add [school name grade]  ;; <- arglist goes here\r\n    ;; your code goes here\r\n)\r\n\r\n(defn sorted [school]  ;; <- arglist goes here\r\n    ;; your code goes here\r\n)\r\n"
 "(ns grains)\r\n\r\n(defn square [] ;; <- arglist goes here\r\n    ;; your code goes here\r\n)\r\n\r\n(defn total []  ;; <- arglist goes here\r\n    ;; your code goes here\r\n)\r\n"
 "(ns hamming)\r\n\r\n(defn distance [strand1 strand2] ; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns hello-world)\r\n\r\n(defn hello []\r\n  \"Goodbye, Mars!\")\r\n"
 "(ns hexadecimal)\r\n\r\n(defn hex-to-int [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns isbn-verifier)\r\n\r\n(defn isbn? [isbn] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns isogram)\r\n\r\n(defn isogram? [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns kindergarten-garden)\r\n\r\n(defn garden [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns largest-series-product)\r\n\r\n(defn largest-product [] ;; <- arglist goes here\r\n      ;; your code goes here\r\n)\r\n"
 "(ns leap)\r\n\r\n(defn leap-year? [year] ;; <- argslist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns luhn)\r\n\r\n(defn valid? [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns matching-brackets)\r\n\r\n(defn valid? [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns meetup)\r\n\r\n(defn meetup [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n  )"
 "(ns minesweeper)\r\n\r\n(defn draw [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns nth-prime)\r\n\r\n(defn nth-prime \r\n  \"Returns the prime number in the nth position.\"\r\n  [n] ;; <- arglist goes here\r\n  ;; your code goes here\r\n  )\r\n"
 "(ns nucleotide-count)\r\n\r\n(defn count-of-nucleotide-in-strand [nucleotide strand] ;; <- Arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n\r\n(defn nucleotide-counts [strand] ;; <- Arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns octal)\r\n\r\n(defn to-decimal [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns pangram)\r\n\r\n(defn pangram? [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns pascals-triangle)\r\n\r\n(def triangle)\r\n\r\n(defn row [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns perfect-numbers)\r\n\r\n(defn classify [] ;; <- arglist goes here\r\n      ;; your code goes here\r\n)\r\n"
 "(ns phone-number)\r\n\r\n(defn number [num-string] ;; <- arglist goes here\r\n      ;; your code goes here\r\n)\r\n\r\n(defn area-code [num-string] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n\r\n(defn pretty-print [num-string] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns pig-latin)\r\n\r\n(defn translate [] ;; <- arglist goes here\r\n      ;; your code goes here\r\n)\r\n"
 "(ns poker)\r\n\r\n(defn best-hands [hands] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns pov)\r\n\r\n(defn of [] ;; <- arglist goes here\r\n      ;; your code goes here\r\n)\r\n\r\n(defn path-from-to [] ;; <- arglist goes here\r\n  ;; your code goes here\r\n)\r\n"
 "(ns prime-factors)\r\n\r\n(defn of [] ;; <- arglist goes here\r\n      ;; your code goes here\r\n)\r\n"
 ...)
clj꞉user꞉> 
#'user/src-all
clj꞉user꞉> 
"{\r\n  \"diamond\" : \"(ns diamond)\\r\\n\\r\\n(defn diamond [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"isogram\" : \"(ns isogram)\\r\\n\\r\\n(defn isogram? [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"gigasecond\" : \"(ns gigasecond)\\r\\n\\r\\n(defn from []  ;; <- arglist goes here\\r\\n    ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"leap\" : \"(ns leap)\\r\\n\\r\\n(defn leap-year? [year] ;; <- argslist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"zipper\" : \"(ns zipper)\\r\\n\\r\\n(defn from-tree [] \\r\\n  )\\r\\n\\r\\n(defn value [] \\r\\n  )\\r\\n\\r\\n(defn left []\\r\\n  )\\r\\n\\r\\n(defn right []\\r\\n  )\\r\\n\\r\\n(defn to-tree []\\r\\n  )\\r\\n\\r\\n(defn up []\\r\\n  )\\r\\n\\r\\n(defn set-value []\\r\\n  )\\r\\n\\r\\n(defn set-left []\\r\\n  )\\r\\n\\r\\n(defn set-right []\\r\\n  )\\r\\n\",\r\n  \"roman-numerals\" : \"(ns roman-numerals)\\r\\n\\r\\n(defn numerals [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"minesweeper\" : \"(ns minesweeper)\\r\\n\\r\\n(defn draw [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"pov\" : \"(ns pov)\\r\\n\\r\\n(defn of [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn path-from-to [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"matching-brackets\" : \"(ns matching-brackets)\\r\\n\\r\\n(defn valid? [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"dominoes\" : \"(ns dominoes)\\r\\n\\r\\n(defn can-chain? [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"rotational-cipher\" : \"(ns rotational-cipher)\\r\\n\\r\\n(defn rotate [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"kindergarten-garden\" : \"(ns kindergarten-garden)\\r\\n\\r\\n(defn garden [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"all-your-base\" : \"(ns all-your-base)\\r\\n\\r\\n(defn convert [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"spiral-matrix\" : \"(ns spiral-matrix)\\r\\n\\r\\n(defn spiral [n] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"anagram\" : \"(ns anagram)\\r\\n\\r\\n(defn anagrams-for [word prospect-list] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"atbash-cipher\" : \"(ns atbash-cipher)\\r\\n\\r\\n(defn encode [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"grade-school\" : \"(ns grade-school)\\r\\n\\r\\n(defn grade [school grade]  ;; <- arglist goes here\\r\\n    ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn add [school name grade]  ;; <- arglist goes here\\r\\n    ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn sorted [school]  ;; <- arglist goes here\\r\\n    ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"meetup\" : \"(ns meetup)\\r\\n\\r\\n(defn meetup [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n  )\",\r\n  \"two-fer\" : \"(ns two-fer)\\r\\n\\r\\n(defn two-fer [name] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"run-length-encoding\" : \"(ns run-length-encoding)\\r\\n\\r\\n(defn run-length-encode\\r\\n  \\\"encodes a string with run-length-encoding\\\"\\r\\n  [plain-text])\\r\\n\\r\\n(defn run-length-decode\\r\\n  \\\"decodes a run-length-encoded string\\\"\\r\\n  [cipher-text])\\r\\n\",\r\n  \"wordy\" : \"(ns wordy)\\r\\n\\r\\n(defn evaluate [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"sieve\" : \"(ns sieve)\\r\\n\\r\\n(defn sieve [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"binary\" : \"(ns binary)\\r\\n\\r\\n(defn to-decimal [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"pig-latin\" : \"(ns pig-latin)\\r\\n\\r\\n(defn translate [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"bob\" : \"(ns bob)\\r\\n\\r\\n(defn response-for [s] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"rna-transcription\" : \"(ns rna-transcription)\\r\\n\\r\\n(defn to-rna [dna] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"pascals-triangle\" : \"(ns pascals-triangle)\\r\\n\\r\\n(def triangle)\\r\\n\\r\\n(defn row [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"space-age\" : \"(ns space-age)\\r\\n\\r\\n(defn on-mercury [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn on-venus [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn on-earth [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn on-mars [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn on-jupiter [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn on-saturn [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn on-uranus [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn on-neptune [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"queen-attack\" : \"(ns queen-attack)\\r\\n\\r\\n(defn board-string [] ;; <- glister goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn can-attack [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"acronym\" : \"(ns acronym)\\r\\n\\r\\n(defn acronym\\r\\n  \\\"Converts phrase to its acronym.\\\"\\r\\n  [phrase]\\r\\n  )\\r\\n\",\r\n  \"secret-handshake\" : \"(ns secret-handshake)\\r\\n\\r\\n(defn commands [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"crypto-square\" : \"(ns crypto-square)\\r\\n\\r\\n(defn normalize-plaintext [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn square-size [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn plaintext-segments [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn ciphertext [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn normalize-ciphertext [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"word-count\" : \"(ns word-count)\\r\\n\\r\\n(defn word-count [s] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"armstrong-numbers\" : \"(ns armstrong-numbers)\\r\\n\\r\\n(defn armstrong? [num] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"hamming\" : \"(ns hamming)\\r\\n\\r\\n(defn distance [strand1 strand2] ; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"scrabble-score\" : \"(ns scrabble-score)\\r\\n\\r\\n(defn score-letter [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn score-word [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"octal\" : \"(ns octal)\\r\\n\\r\\n(defn to-decimal [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"raindrops\" : \"(ns raindrops)\\r\\n\\r\\n(defn convert [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"binary-search-tree\" : \"(ns binary-search-tree)\\r\\n\\r\\n(defn value [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn singleton [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn insert [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn left [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn right [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn to-list [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn from-list [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"nth-prime\" : \"(ns nth-prime)\\r\\n\\r\\n(defn nth-prime \\r\\n  \\\"Returns the prime number in the nth position.\\\"\\r\\n  [n] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n  )\\r\\n\",\r\n  \"largest-series-product\" : \"(ns largest-series-product)\\r\\n\\r\\n(defn largest-product [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"protein-translation\" : \"(ns protein-translation)\\r\\n\\r\\n(defn translate-codon [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn translate-rna [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"sublist\" : \"(ns sublist)\\r\\n\\r\\n(defn classify [list1 list2] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"prime-factors\" : \"(ns prime-factors)\\r\\n\\r\\n(defn of [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"triangle\" : \"(ns triangle)\\r\\n\\r\\n(defn is-valid? [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn equilateral? [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn isosceles? [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn scalene? [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"reverse-string\" : \"(ns reverse-string)\\r\\n\\r\\n(defn reverse-string [s] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"beer-song\" : \"(ns beer-song)\\r\\n\\r\\n(defn verse\\r\\n  \\\"Returns the nth verse of the song.\\\"\\r\\n  [num])\\r\\n\\r\\n(defn sing\\r\\n  \\\"Given a start and an optional end, returns all verses in this interval. If\\r\\n  end is not given, the whole song from start is sung.\\\"\\r\\n  ([start])\\r\\n  ([start end]))\\r\\n\",\r\n  \"binary-search\" : \"(ns binary-search)\\r\\n\\r\\n(defn search-for [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn middle [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"clock\" : \"(ns clock)\\r\\n\\r\\n(defn clock->string [clock] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn clock [hours minutes] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn add-time [clock time] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"allergies\" : \"(ns allergies)\\r\\n\\r\\n(defn allergies [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn allergic-to? [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"say\" : \"(ns say)\\r\\n\\r\\n(defn number [num] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"luhn\" : \"(ns luhn)\\r\\n\\r\\n(defn valid? [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"difference-of-squares\" : \"(ns difference-of-squares)\\r\\n\\r\\n(defn difference [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn sum-of-squares [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn square-of-sum [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"complex-numbers\" : \"(ns complex-numbers)\\r\\n\\r\\n(defn real [[a b]] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn imaginary [[a b]] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn abs [[a b]] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn conjugate [[a b]] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn add [[a b] [c d]] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn sub [[a b] [c d]] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn mul [[a b] [c d]] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn div [[a b] [c d]] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"poker\" : \"(ns poker)\\r\\n\\r\\n(defn best-hands [hands] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"go-counting\" : \"(ns go-counting)\\r\\n\\r\\n(defn territory [grid [x y]])\\r\\n\\r\\n(defn territories [grid])\\r\\n\",\r\n  \"accumulate\" : \"(ns accumulate)\\r\\n\\r\\n(defn accumulate [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"hexadecimal\" : \"(ns hexadecimal)\\r\\n\\r\\n(defn hex-to-int [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"series\" : \"(ns series)\\r\\n\\r\\n(defn slices [string length] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"yacht\" : \"(ns yacht)\\r\\n\\r\\n(defn score []\\r\\n  )\\r\\n\",\r\n  \"grains\" : \"(ns grains)\\r\\n\\r\\n(defn square [] ;; <- arglist goes here\\r\\n    ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn total []  ;; <- arglist goes here\\r\\n    ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"robot-simulator\" : \"(ns robot-simulator)\\r\\n\\r\\n(defn robot [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn simulate [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn turn-right [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn turn-left [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"proverb\" : \"(ns proverb)\\r\\n\\r\\n(defn recite [] ;; <- arglist goes here\\r\\n    ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"flatten-array\" : \"(ns flatten-array)\\r\\n\\r\\n(defn flatten [arr] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"pangram\" : \"(ns pangram)\\r\\n\\r\\n(defn pangram? [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"bank-account\" : \"(ns bank-account)\\r\\n\\r\\n(defn open-account [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n  )\\r\\n\\r\\n(defn close-account [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n  )\\r\\n\\r\\n(defn get-balance [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n  )\\r\\n\\r\\n(defn update-balance [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n  )\\r\\n\",\r\n  \"strain\" : \"(ns strain)\\r\\n\\r\\n(defn retain [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn discard [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"sum-of-multiples\" : \"(ns sum-of-multiples)\\r\\n\\r\\n(defn sum-of-multiples [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"collatz-conjecture\" : \"(ns collatz-conjecture)\\r\\n\\r\\n(defn collatz [num] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"trinary\" : \"(ns trinary)\\r\\n\\r\\n(defn to-decimal [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"etl\" : \"(ns etl)\\r\\n\\r\\n(defn transform [source] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"perfect-numbers\" : \"(ns perfect-numbers)\\r\\n\\r\\n(defn classify [] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"hello-world\" : \"(ns hello-world)\\r\\n\\r\\n(defn hello []\\r\\n  \\\"Goodbye, Mars!\\\")\\r\\n\",\r\n  \"nucleotide-count\" : \"(ns nucleotide-count)\\r\\n\\r\\n(defn count-of-nucleotide-in-strand [nucleotide strand] ;; <- Arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n\\r\\n(defn nucleotide-counts [strand] ;; <- Arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"phone-number\" : \"(ns phone-number)\\r\\n\\r\\n(defn number [num-string] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn area-code [num-string] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn pretty-print [num-string] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"change\" : \"(ns change)\\r\\n\\r\\n(defn issue [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"isbn-verifier\" : \"(ns isbn-verifier)\\r\\n\\r\\n(defn isbn? [isbn] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\",\r\n  \"robot-name\" : \"(ns robot-name)\\r\\n\\r\\n(defn robot [] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn robot-name [robot] ;; <- arglist goes here\\r\\n      ;; your code goes here\\r\\n)\\r\\n\\r\\n(defn reset-name [robot] ;; <- arglist goes here\\r\\n  ;; your code goes here\\r\\n)\\r\\n\"\r\n}"
clj꞉user꞉> 
nil
clj꞉user꞉> 
#'user/practice-exercises
clj꞉user꞉> 
#'user/src-all
clj꞉user꞉> 
; java.io.FileNotFoundException: exercises\practice\all_your_base\src\all_your_base.clj (The system cannot find the path specified) user c:\Users\porko\exercism-express\scratch.clj:5:7
clj꞉user꞉> 
; java.lang.NullPointerException user c:\Users\porko\exercism-express\scratch.clj:1:46
clj꞉user꞉> 
#'user/practice-exercises
clj꞉user꞉> 
#'user/src-all
clj꞉user꞉> 
nil
clj꞉user꞉> 
; nREPL connection failed: Error: read ECONNRESET
; Failed connecting.
; nREPL Connection was closed
; Jacking in...
; Connecting using "Babashka" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd c:\Users\porko\exercism-express & bb --nrepl-server 63732 & popd
; Using host:port 127.0.0.1:63732 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉user꞉> 
[#object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x7ca09ee8 "exercise_tests\\accumulate_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x464666d0 "exercise_tests\\acronym_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x7db8b71e "exercise_tests\\allergies_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x1e97158c "exercise_tests\\all_your_base_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x3f6a1d65 "exercise_tests\\anagram_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x356a39d9 "exercise_tests\\annalyns_infiltration_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x47935389 "exercise_tests\\armstrong_numbers_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x5a49da7a "exercise_tests\\atbash_cipher_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x68433ad6 "exercise_tests\\bank_account_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x6e465060 "exercise_tests\\beer_song_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x60cdc9a2 "exercise_tests\\binary_search_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x4aedfeed "exercise_tests\\binary_search_tree_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x7ecc8882 "exercise_tests\\binary_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x3f3efd72 "exercise_tests\\bird_watcher_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x1c86b061 "exercise_tests\\bob_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x58b4f905 "exercise_tests\\cars_assemble_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x29d5c99e "exercise_tests\\change_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x2607ae7f "exercise_tests\\clock_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x4f968c30 "exercise_tests\\collatz_conjecture_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x263d629b "exercise_tests\\complex_numbers_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x6f010868 "exercise_tests\\coordinate_transformation_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x7cd37219 "exercise_tests\\crypto_square_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x408e01b3 "exercise_tests\\date_parser_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x6cc7fe51 "exercise_tests\\diamond_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x529da29d "exercise_tests\\difference_of_squares_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x5a748445 "exercise_tests\\dominoes_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x6225bd10 "exercise_tests\\elyses_destructured_enchantments_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x488447a1 "exercise_tests\\etl_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x9b846c "exercise_tests\\flatten_array_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x5f7f5ec8 "exercise_tests\\gigasecond_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x4281b4cf "exercise_tests\\go_counting_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x3cbbb9d1 "exercise_tests\\grade_school_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x32626c6a "exercise_tests\\grains_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x5f5cdfa8 "exercise_tests\\hamming_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x18af5487 "exercise_tests\\hello_world_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x70bfde73 "exercise_tests\\hexadecimal_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x1abe6995 "exercise_tests\\interest_is_interesting_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x16df3878 "exercise_tests\\international_calling_connoisseur_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x5733c8e8 "exercise_tests\\isbn_verifier_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x2f1a3a83 "exercise_tests\\isogram_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x294f590c "exercise_tests\\kindergarten_garden_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x18a2396d "exercise_tests\\largest_series_product_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x77c50419 "exercise_tests\\leap_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x19229920 "exercise_tests\\log_levels_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x7a0c1b56 "exercise_tests\\lucians_luscious_lasagna_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x27a393c0 "exercise_tests\\luhn_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x1bf9e3b4 "exercise_tests\\matching_brackets_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x5356c8b1 "exercise_tests\\meetup_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x75d40592 "exercise_tests\\minesweeper_test.clj"]
 #object[sun.nio.fs.WindowsPath$WindowsPathWithAttributes 0x3156e981 "exercise_tests\\nth_prime_test.clj"]
 ...]
clj꞉user꞉> 
("exercise_tests\\accumulate_test.clj"
 "exercise_tests\\acronym_test.clj"
 "exercise_tests\\allergies_test.clj"
 "exercise_tests\\all_your_base_test.clj"
 "exercise_tests\\anagram_test.clj"
 "exercise_tests\\annalyns_infiltration_test.clj"
 "exercise_tests\\armstrong_numbers_test.clj"
 "exercise_tests\\atbash_cipher_test.clj"
 "exercise_tests\\bank_account_test.clj"
 "exercise_tests\\beer_song_test.clj"
 "exercise_tests\\binary_search_test.clj"
 "exercise_tests\\binary_search_tree_test.clj"
 "exercise_tests\\binary_test.clj"
 "exercise_tests\\bird_watcher_test.clj"
 "exercise_tests\\bob_test.clj"
 "exercise_tests\\cars_assemble_test.clj"
 "exercise_tests\\change_test.clj"
 "exercise_tests\\clock_test.clj"
 "exercise_tests\\collatz_conjecture_test.clj"
 "exercise_tests\\complex_numbers_test.clj"
 "exercise_tests\\coordinate_transformation_test.clj"
 "exercise_tests\\crypto_square_test.clj"
 "exercise_tests\\date_parser_test.clj"
 "exercise_tests\\diamond_test.clj"
 "exercise_tests\\difference_of_squares_test.clj"
 "exercise_tests\\dominoes_test.clj"
 "exercise_tests\\elyses_destructured_enchantments_test.clj"
 "exercise_tests\\etl_test.clj"
 "exercise_tests\\flatten_array_test.clj"
 "exercise_tests\\gigasecond_test.clj"
 "exercise_tests\\go_counting_test.clj"
 "exercise_tests\\grade_school_test.clj"
 "exercise_tests\\grains_test.clj"
 "exercise_tests\\hamming_test.clj"
 "exercise_tests\\hello_world_test.clj"
 "exercise_tests\\hexadecimal_test.clj"
 "exercise_tests\\interest_is_interesting_test.clj"
 "exercise_tests\\international_calling_connoisseur_test.clj"
 "exercise_tests\\isbn_verifier_test.clj"
 "exercise_tests\\isogram_test.clj"
 "exercise_tests\\kindergarten_garden_test.clj"
 "exercise_tests\\largest_series_product_test.clj"
 "exercise_tests\\leap_test.clj"
 "exercise_tests\\log_levels_test.clj"
 "exercise_tests\\lucians_luscious_lasagna_test.clj"
 "exercise_tests\\luhn_test.clj"
 "exercise_tests\\matching_brackets_test.clj"
 "exercise_tests\\meetup_test.clj"
 "exercise_tests\\minesweeper_test.clj"
 "exercise_tests\\nth_prime_test.clj"
 ...)
clj꞉user꞉> 
("mulate_test.clj"
 "nym_test.clj"
 "rgies_test.clj"
 "your_base_test.clj"
 "ram_test.clj"
 "lyns_infiltration_test.clj"
 "trong_numbers_test.clj"
 "sh_cipher_test.clj"
 "_account_test.clj"
 "_song_test.clj"
 "ry_search_test.clj"
 "ry_search_tree_test.clj"
 "ry_test.clj"
 "_watcher_test.clj"
 "test.clj"
 "_assemble_test.clj"
 "ge_test.clj"
 "k_test.clj"
 "atz_conjecture_test.clj"
 "lex_numbers_test.clj"
 "dinate_transformation_test.clj"
 "to_square_test.clj"
 "_parser_test.clj"
 "ond_test.clj"
 "erence_of_squares_test.clj"
 "noes_test.clj"
 "es_destructured_enchantments_test.clj"
 "test.clj"
 "ten_array_test.clj"
 "second_test.clj"
 "ounting_test.clj"
 "e_school_test.clj"
 "ns_test.clj"
 "ing_test.clj"
 "o_world_test.clj"
 "decimal_test.clj"
 "rest_is_interesting_test.clj"
 "rnational_calling_connoisseur_test.clj"
 "_verifier_test.clj"
 "ram_test.clj"
 "ergarten_garden_test.clj"
 "est_series_product_test.clj"
 "_test.clj"
 "levels_test.clj"
 "ans_luscious_lasagna_test.clj"
 "_test.clj"
 "hing_brackets_test.clj"
 "up_test.clj"
 "sweeper_test.clj"
 "prime_test.clj"
 ...)
clj꞉user꞉> 
("accumulate_test.clj"
 "acronym_test.clj"
 "allergies_test.clj"
 "all_your_base_test.clj"
 "anagram_test.clj"
 "annalyns_infiltration_test.clj"
 "armstrong_numbers_test.clj"
 "atbash_cipher_test.clj"
 "bank_account_test.clj"
 "beer_song_test.clj"
 "binary_search_test.clj"
 "binary_search_tree_test.clj"
 "binary_test.clj"
 "bird_watcher_test.clj"
 "bob_test.clj"
 "cars_assemble_test.clj"
 "change_test.clj"
 "clock_test.clj"
 "collatz_conjecture_test.clj"
 "complex_numbers_test.clj"
 "coordinate_transformation_test.clj"
 "crypto_square_test.clj"
 "date_parser_test.clj"
 "diamond_test.clj"
 "difference_of_squares_test.clj"
 "dominoes_test.clj"
 "elyses_destructured_enchantments_test.clj"
 "etl_test.clj"
 "flatten_array_test.clj"
 "gigasecond_test.clj"
 "go_counting_test.clj"
 "grade_school_test.clj"
 "grains_test.clj"
 "hamming_test.clj"
 "hello_world_test.clj"
 "hexadecimal_test.clj"
 "interest_is_interesting_test.clj"
 "international_calling_connoisseur_test.clj"
 "isbn_verifier_test.clj"
 "isogram_test.clj"
 "kindergarten_garden_test.clj"
 "largest_series_product_test.clj"
 "leap_test.clj"
 "log_levels_test.clj"
 "lucians_luscious_lasagna_test.clj"
 "luhn_test.clj"
 "matching_brackets_test.clj"
 "meetup_test.clj"
 "minesweeper_test.clj"
 "nth_prime_test.clj"
 ...)
clj꞉user꞉> 
("accumulate_test"
 "acronym_test"
 "allergies_test"
 "all_your_base_test"
 "anagram_test"
 "annalyns_infiltration_test"
 "armstrong_numbers_test"
 "atbash_cipher_test"
 "bank_account_test"
 "beer_song_test"
 "binary_search_test"
 "binary_search_tree_test"
 "binary_test"
 "bird_watcher_test"
 "bob_test"
 "cars_assemble_test"
 "change_test"
 "clock_test"
 "collatz_conjecture_test"
 "complex_numbers_test"
 "coordinate_transformation_test"
 "crypto_square_test"
 "date_parser_test"
 "diamond_test"
 "difference_of_squares_test"
 "dominoes_test"
 "elyses_destructured_enchantments_test"
 "etl_test"
 "flatten_array_test"
 "gigasecond_test"
 "go_counting_test"
 "grade_school_test"
 "grains_test"
 "hamming_test"
 "hello_world_test"
 "hexadecimal_test"
 "interest_is_interesting_test"
 "international_calling_connoisseur_test"
 "isbn_verifier_test"
 "isogram_test"
 "kindergarten_garden_test"
 "largest_series_product_test"
 "leap_test"
 "log_levels_test"
 "lucians_luscious_lasagna_test"
 "luhn_test"
 "matching_brackets_test"
 "meetup_test"
 "minesweeper_test"
 "nth_prime_test"
 ...)
clj꞉user꞉> 
#'user/exercises
clj꞉user꞉> 
#'user/test-all
clj꞉user꞉> 
("(ns accumulate-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            accumulate))\r\n\r\n(defn- square [n] (* n n))\r\n\r\n(defn- to-s [xs] (apply str xs))\r\n\r\n(deftest empty-accumulation\r\n  (is (= [] (accumulate/accumulate square []))))\r\n\r\n(deftest accumulate-squares\r\n  (is (= [1 4 9] (accumulate/accumulate square [1 2 3]))))\r\n\r\n(deftest accumulate-upcases\r\n  (is (= [\"HELLO\", \"WORLD\"]\r\n         (->> [\"hello\" \"world\"]\r\n              (accumulate/accumulate clojure.string/upper-case)\r\n              (map to-s)))))\r\n\r\n(deftest accumulate-reversed-strings\r\n  (is (= [\"eht\" \"kciuq\" \"nworb\" \"xof\" \"cte\"]\r\n         (->> [\"the\" \"quick\" \"brown\" \"fox\" \"etc\"]\r\n              (accumulate/accumulate reverse)\r\n              (map to-s)))))\r\n\r\n(deftest accumulate-recursively\r\n  (is (= [[\"a1\" \"a2\" \"a3\"] [\"b1\" \"b2\" \"b3\"] [\"c1\" \"c2\" \"c3\"]]\r\n         (-> #(accumulate/accumulate (fn [n] (str % n)) [1 2 3])\r\n             (accumulate/accumulate \"abc\")))))\r\n"
 "(ns acronym-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            acronym))\r\n\r\n(deftest test-acronym-empty-string\r\n  (is (= \"\" (acronym/acronym \"\"))))\r\n\r\n(deftest test-acronym-png\r\n  (is (= \"PNG\" (acronym/acronym \"Portable Network Graphics\"))))\r\n\r\n(deftest test-acronym-ror\r\n  (is (= \"ROR\" (acronym/acronym \"Ruby on Rails\"))))\r\n\r\n(deftest test-acronym-html\r\n  (is (= \"HTML\" (acronym/acronym \"HyperText Markup Language\"))))\r\n\r\n(deftest test-acronym-fifo\r\n  (is (= \"FIFO\" (acronym/acronym \"First In, First Out\"))))\r\n\r\n(deftest test-acronym-php\r\n  (is (= \"PHP\" (acronym/acronym \"PHP: Hypertext Preprocessor\"))))\r\n\r\n(deftest test-acronym-cmos\r\n  (is (= \"CMOS\" (acronym/acronym \"Complementary metal-oxide semiconductor\"))))\r\n"
 "(ns allergies-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            allergies))\r\n\r\n(deftest no-allergies-at-all\r\n  (is (= [] (allergies/allergies 0))))\r\n\r\n(deftest allergic-to-just-eggs\r\n  (is (= [:eggs] (allergies/allergies 1))))\r\n\r\n(deftest allergic-to-just-peanuts\r\n  (is (= [:peanuts] (allergies/allergies 2))))\r\n\r\n(deftest allergic-to-just-strawberries\r\n  (is (= [:strawberries] (allergies/allergies 8))))\r\n\r\n(deftest allergic-to-eggs-and-peanuts\r\n  (is (= [:eggs :peanuts] (allergies/allergies 3))))\r\n\r\n(deftest allergic-to-more-than-eggs-but-not-peanuts\r\n  (is (= [:eggs :shellfish] (allergies/allergies 5))))\r\n\r\n(deftest allergic-to-lots-of-stuff\r\n  (is (= [:strawberries :tomatoes :chocolate :pollen :cats]\r\n         (allergies/allergies 248))))\r\n\r\n(deftest allergic-to-everything\r\n  (is (= [:eggs :peanuts :shellfish :strawberries\r\n          :tomatoes :chocolate :pollen :cats]\r\n         (allergies/allergies 255))))\r\n\r\n(deftest no-allergies-means-not-allergic-peanuts\r\n  (is (not (allergies/allergic-to? 0 :peanuts))))\r\n\r\n(deftest no-allergies-means-not-allergic-cats\r\n  (is (not (allergies/allergic-to? 0 :cats))))\r\n\r\n(deftest no-allergies-means-not-allergic-strawberries\r\n  (is (not (allergies/allergic-to? 0 :strawberries))))\r\n\r\n(deftest is-allergic-to-eggs\r\n  (is (allergies/allergic-to? 1 :eggs)))\r\n\r\n(deftest allergic-to-eggs-in-addition-to-other-stuff\r\n  (is (allergies/allergic-to? 5 :eggs)))\r\n\r\n(deftest ignore-non-allergen-score-parts\r\n  (is (= [:eggs :shellfish :strawberries :tomatoes :chocolate :pollen :cats]\r\n         (allergies/allergies 509))))\r\n"
 "(ns all-your-base-test\r\n  (:require [clojure.test :refer [deftest testing is]]\r\n            [all-your-base]))\r\n\r\n(deftest test-single-bit-to-one-decimal\r\n  (testing \"Base 2 '1' converts to base 10 '1'\"\r\n    (is (= '(1) (all-your-base/convert 2 '(1) 10)))))\r\n\r\n(deftest test-binary-to-single-decimal\r\n  (testing \"Base 2 '1 0 1' converts to base 10 '5'\"\r\n    (is (= '(5) (all-your-base/convert 2 '(1 0 1) 10)))))\r\n\r\n(deftest test-single-decimal-to-binary\r\n  (testing \"Base 10 '5' converts to base 2 '1 0 1'\"\r\n    (is (= '(1 0 1) (all-your-base/convert 10 '(5) 2)))))\r\n\r\n(deftest test-binary-to-multiple-decimal\r\n  (testing \"Base 2 '1 0 1 0 1 0' converts to base 10 '4 2'\"\r\n    (is (= '(4 2) (all-your-base/convert 2 '(1 0 1 0 1 0) 10)))))\r\n\r\n(deftest test-decimal-to-binary\r\n  (testing \"Base 10 '4 2' conves to base 2 '1 0 1 0 1 0'\"\r\n    (is (= '(1 0 1 0 1 0) (all-your-base/convert 10 '(4 2) 2)))))\r\n\r\n(deftest test-trinary-to-hexadecimal\r\n  (testing \"Base 3 '1 1 2 0' converts to base 16 '2 10'\"\r\n    (is (= '(2 10) (all-your-base/convert 3 '(1 1 2 0) 16)))))\r\n\r\n(deftest test-hexadecimal-to-trinary\r\n  (testing \"Base 16 '2 10' converts to base 3 '1 1 2 0'\"\r\n    (is (= '(1 1 2 0) (all-your-base/convert 16 '(2 10) 3)))))\r\n\r\n(deftest test-15-bit-integer\r\n  (testing \"Base 97 '3 46 60' converts to base 73 '6 10 45'\"\r\n    (is (= '(6 10 45) (all-your-base/convert 97 '(3 46 60) 73)))))\r\n\r\n(deftest test-empty-list\r\n  (testing \"Empty input digits returns empty sequence\"\r\n    (is (empty? (all-your-base/convert 2 () 10)))))\r\n\r\n(deftest test-single-zero\r\n  (testing \"0 converts to 0, no matter the base\"\r\n    (is (= '(0) (all-your-base/convert 10 '(0) 2)))))\r\n\r\n(deftest test-multiple-zeroes\r\n  (testing \"0 converts to 0, no matter the how many zeroes\"\r\n    (is (= '(0) (all-your-base/convert 10 '(0 0 0) 2)))))\r\n\r\n(deftest test-leading-zeros\r\n  (testing \"Leading zeroes don't affect conversion\"\r\n    (is (= '(4 2) (all-your-base/convert 7 '(0 6 0) 10)))))\r\n\r\n(deftest test-negative-digit\r\n  (testing \"Negative digits result in nil\"\r\n    (is (nil? (all-your-base/convert 2 '(1 -1 1 0 1 0) 10)))))\r\n\r\n(deftest test-invalid-positive-digit\r\n  (testing \"Invalid digits return nil\"\r\n    (is (nil? (all-your-base/convert 2 '(1 2 1 0 1 0) 10)))))\r\n\r\n(deftest test-first-base-is-one\r\n  (testing \"Input base of 1 returns nil\"\r\n    (is (nil? (all-your-base/convert 1 () 10)))))\r\n\r\n(deftest test-second-base-is-one\r\n  (testing \"Output base of 1 returns nil\"\r\n    (is (nil? (all-your-base/convert 2 '(1 0 1 0 1 0) 1)))))\r\n\r\n(deftest test-first-base-is-zero\r\n  (testing \"Input base of 0 returns nil\"\r\n    (is (nil? (all-your-base/convert 0 () 10)))))\r\n\r\n(deftest test-second-base-is-zero\r\n  (testing \"Output base of 0 returns nil\"\r\n    (is (nil? (all-your-base/convert 10 '(7) 0)))))\r\n\r\n(deftest test-first-base-is-negative\r\n  (testing \"Negative input base returns nil\"\r\n    (is (nil? (all-your-base/convert -2 '(1) 10)))))\r\n\r\n(deftest test-second-base-is-negative\r\n  (testing \"Negative output base returns nil\"\r\n    (is (nil? (all-your-base/convert 2 '(1) -7)))))\r\n\r\n(deftest test-both-bases-are-negative\r\n  (testing \"When both bases are negative, nil is returned\"\r\n    (is (nil? (all-your-base/convert -2 '(1) -7)))))\r\n"
 "(ns anagram-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            anagram))\r\n\r\n(deftest no-matches\r\n  (is (= []\r\n         (anagram/anagrams-for \"diaper\" [\"hello\" \"world\" \"zombies\" \"pants\"]))))\r\n\r\n(deftest detect-simple-anagram\r\n  (is (= [\"tan\"] (anagram/anagrams-for \"ant\" [\"tan\" \"stand\" \"at\"]))))\r\n\r\n(deftest does-not-confuse-different-duplicates\r\n  (is (= [] (anagram/anagrams-for \"galea\" [\"eagle\"]))))\r\n\r\n(deftest eliminate-anagram-subsets\r\n  (is (= [] (anagram/anagrams-for \"good\" [\"dog\" \"goody\"]))))\r\n\r\n(deftest detect-anagram\r\n  (is (= [\"inlets\"]\r\n         (let [coll [\"enlists\" \"google\" \"inlets\" \"banana\"]]\r\n           (anagram/anagrams-for \"listen\" coll)))))\r\n\r\n(deftest multiple-anagrams\r\n  (is (= [\"gallery\" \"regally\" \"largely\"]\r\n         (let [coll [\"gallery\" \"ballerina\" \"regally\"\r\n                     \"clergy\"  \"largely\"   \"leading\"]]\r\n           (anagram/anagrams-for \"allergy\" coll)))))\r\n\r\n(deftest case-insensitive-anagrams\r\n  (is (= [\"Carthorse\"]\r\n         (let [coll [\"cashregister\" \"Carthorse\" \"radishes\"]]\r\n           (anagram/anagrams-for \"Orchestra\" coll)))))\r\n\r\n(deftest word-is-not-own-anagram\r\n  (is (= [] (anagram/anagrams-for \"banana\" [\"banana\"]))))\r\n\r\n(deftest capital-word-is-not-own-anagram\r\n  (is (= [] (anagram/anagrams-for \"BANANA\" [\"banana\"]))))\r\n"
 "(ns annalyns-infiltration-test\r\n  (:require annalyns-infiltration\r\n            [clojure.test :refer [deftest is testing]]))\r\n\r\n(deftest ^{:task 1} fast-attack-awake-test\r\n  (testing \"Fast attack if knight is awake\"\r\n    (is (= false (annalyns-infiltration/can-fast-attack? true)))))\r\n\r\n(deftest ^{:task 1} fast-attack-asleep-test\r\n  (testing \"Fast attack if knight is sleeping\"\r\n    (is (= true (annalyns-infiltration/can-fast-attack? false)))))\r\n\r\n(deftest ^{:task 2} spy-everyone-sleeping-test\r\n  (testing \"Cannot spy if everyone is sleeping\"\r\n    (is (= false (annalyns-infiltration/can-spy? false false false)))))\r\n\r\n(deftest ^{:task 2} spy-but-knight-sleeping-test\r\n  (testing \"Can spy if everyone but knight is sleeping\"\r\n    (is (= true (annalyns-infiltration/can-spy? true false false)))))\r\n\r\n(deftest ^{:task 2} spy-but-archer-sleeping-test\r\n  (testing \"Can spy if everyone but archer is sleeping\"\r\n    (is (= true (annalyns-infiltration/can-spy? false true false)))))\r\n\r\n(deftest ^{:task 2} spy-but-prisoner-sleeping-test\r\n  (testing \"Can spy if everyone but prisoner is sleeping\"\r\n    (is (= true (annalyns-infiltration/can-spy? false false true)))))\r\n\r\n(deftest ^{:task 2} spy-only-knight-sleeping-test\r\n  (testing \"Can spy if only knight is sleeping\"\r\n    (is (= true (annalyns-infiltration/can-spy? false true true)))))\r\n\r\n(deftest ^{:task 2} spy-only-archer-sleeping-test\r\n  (testing \"Can spy if only archer is sleeping\"\r\n    (is (= true (annalyns-infiltration/can-spy? true false true)))))\r\n\r\n(deftest ^{:task 2} spy-only-prisoner-sleeping-test\r\n  (testing \"Can spy if only prisoner is sleeping\"\r\n    (is (= true (annalyns-infiltration/can-spy? true true false)))))\r\n\r\n(deftest ^{:task 2} spy-everyone-awake-test\r\n  (testing \"Can spy if everyone is awake\"\r\n    (is (= true (annalyns-infiltration/can-spy? true true true)))))\r\n\r\n(deftest ^{:task 3} signal-prisoner-archer-sleeping-prisoner-awake-test\r\n  (testing \"Can signal prisoner if archer is sleeping and prisoner is awake\"\r\n    (is (= true (annalyns-infiltration/can-signal-prisoner? false true)))))\r\n\r\n(deftest ^{:task 3} signal-prisoner-archer-awake-prisoner-sleeping-test\r\n  (testing \"Cannot signal prisoner if archer is awake and prisoner is sleeping\"\r\n    (is (= false (annalyns-infiltration/can-signal-prisoner? true false)))))\r\n\r\n(deftest ^{:task 3} signal-prisoner-both-sleeping-test\r\n  (testing \"Cannot signal prisoner if archer and prisoner are both sleeping\"\r\n    (is (= false (annalyns-infiltration/can-signal-prisoner? false false)))))\r\n\r\n(deftest ^{:task 3} signal-prisoner-both-awake-test\r\n  (testing \"Cannot signal prisoner if archer and prisoner are both awake\"\r\n    (is (= false (annalyns-infiltration/can-signal-prisoner? true true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-everyone-awake-dog-present-test\r\n  (testing \"Cannot release prisoner if everyone is awake and pet dog is present\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? true true true true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-everyone-awake-dog-absent-test\r\n  (testing \"Cannot release prisoner if everyone is awake and pet dog is absent\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? true true true false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-everyone-asleep-dog-absent-test\r\n  (testing \"Cannot release prisoner if everyone is asleep and pet dog is absent\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? false false false false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-archer-awake-dog-present-test\r\n  (testing \"Cannot release prisoner if only archer is awake and pet dog is present\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? false true false true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-archer-awake-dog-absent-test\r\n  (testing \"Cannot release prisoner if only archer is awake and pet dog is absent\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? false true false false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-knight-awake-dog-absent-test\r\n  (testing \"Cannot release prisoner if only knight is awake and pet dog is absent\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? true false false false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-knight-awake-dog-present-test\r\n  (testing \"Cannot release prisoner if only knight is asleep and pet dog is present\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? false true true true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-knight-asleep-dog-absent-test\r\n  (testing \"Cannot release prisoner if only knight is asleep and pet dog is absent\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? false true true false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-archer-asleep-dog-absent-test\r\n  (testing \"Cannot release prisoner if only archer is asleep and pet dog is absent\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? true false true false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-prisoner-asleep-dog-present-test\r\n  (testing \"Cannot release prisoner if only prisoner is asleep and pet dog is present\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? true true false true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-prisoner-asleep-dog-absent-test\r\n  (testing \"Cannot release prisoner if only prisoner is asleep and pet dog is absent\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? true true false false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-everyone-asleep-dog-present-test\r\n  (testing \"Can release prisoner if everyone is asleep and pet dog is present\"\r\n    (is (= true (annalyns-infiltration/can-free-prisoner? false false false true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-prisoner-awake-dog-present-test\r\n  (testing \"Can release prisoner if only prisoner is awake and pet dog is present\"\r\n    (is (= true (annalyns-infiltration/can-free-prisoner? false false true true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-prisoner-awake-dog-absent-test\r\n  (testing \"Can release prisoner if only prisoner is awake and pet dog is absent\"\r\n    (is (= true (annalyns-infiltration/can-free-prisoner? false false true false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-knight-awake-dog-present-test\r\n  (testing \"Can release prisoner if only knight is awake and pet dog is present\"\r\n    (is (= true (annalyns-infiltration/can-free-prisoner? true false false true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-archer-asleep-dog-present-test\r\n  (testing \"Can release prisoner if only archer is asleep and pet dog is present\"\r\n    (is (= true (annalyns-infiltration/can-free-prisoner? true false true true)))))\r\n"
 "(ns armstrong-numbers-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [armstrong-numbers :refer [armstrong?]]))\r\n\r\n(deftest armstrong-number-0\r\n  (testing \"Zero is an Armstrong number\"\r\n    (is (armstrong? 0))))\r\n\r\n(deftest armstrong-number-5\r\n  (testing \"Single digit numbers are Armstrong numbers\"\r\n    (is (armstrong? 5))))\r\n\r\n(deftest not-armstrong-number-10\r\n  (testing \"There are no 2 digit Armstrong numbers\"\r\n    (is (not (armstrong? 10)))))\r\n\r\n(deftest armstrong-number-153\r\n  (testing \"Three digit number that is an Armstrong number\"\r\n    (is (armstrong? 153))))\r\n\r\n(deftest not-armstrong-number-100\r\n  (testing \"Three digit number that is not an Armstrong number\"\r\n    (is (not (armstrong? 100)))))\r\n\r\n(deftest armstrong-number-9474\r\n  (testing \"Four digit number that is an Armstrong number\"\r\n    (is (armstrong? 9474))))\r\n\r\n(deftest not-armstrong-number-9475\r\n  (testing \"Four digit number that is not an Armstrong number\"\r\n    (is (not (armstrong? 9475)))))\r\n\r\n(deftest armstrong-number-9926315\r\n  (testing \"Seven digit number that is an Armstrong number\"\r\n    (is (armstrong? 9926315))))\r\n\r\n(deftest not-armstrong-number-9926314\r\n  (testing \"Seven digit number that is not an Armstrong number\"\r\n    (is (not (armstrong? 9926314)))))\r\n\r\n(deftest armstrong-number-21897142587612075\r\n  (testing \"Seventeen digit number that is an Armstrong number\"\r\n    (is (armstrong? 21897142587612075))))\r\n"
 "(ns atbash-cipher-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            atbash-cipher))\r\n\r\n(deftest encode-no\r\n  (is (= \"ml\" (atbash-cipher/encode \"no\"))))\r\n\r\n(deftest encode-yes\r\n  (is (= \"bvh\" (atbash-cipher/encode \"yes\"))))\r\n\r\n(deftest encode-OMG\r\n  (is (= \"lnt\" (atbash-cipher/encode \"OMG\"))))\r\n\r\n(deftest encode-O-M-G\r\n  (is (= \"lnt\" (atbash-cipher/encode \"O M G\"))))\r\n\r\n(deftest encode-long-word\r\n  (is (= \"nrmwy oldrm tob\" (atbash-cipher/encode \"mindblowingly\"))))\r\n\r\n(deftest encode-numbers\r\n  (is (= \"gvhgr mt123 gvhgr mt\"\r\n         (atbash-cipher/encode \"Testing, 1 2 3, testing.\"))))\r\n\r\n(deftest encode-sentence\r\n  (is (= \"gifgs rhurx grlm\" (atbash-cipher/encode \"Truth is fiction.\"))))\r\n\r\n(deftest encode-all-the-things\r\n  (let [plaintext \"The quick brown fox jumps over the lazy dog.\"\r\n        cipher    \"gsvjf rxpyi ldmul cqfnk hlevi gsvoz abwlt\"]\r\n    (is (= cipher (atbash-cipher/encode plaintext)))))\r\n"
 "(ns bank-account-test\r\n  (:require\r\n   [clojure.test :refer [deftest testing is use-fixtures]]\r\n   [bank-account]))\r\n\r\n(defn pcalls\r\n  \"Executes the no-arg fns in parallel, returning a lazy sequence of\r\n  their values\"\r\n  {:added \"1.0\"\r\n   :static true}\r\n  [& fns] (pmap #(%) fns))\r\n\r\n#_(defn shutdown-agents-fixture [f]\r\n  (f)\r\n  (shutdown-agents))\r\n\r\n;(use-fixtures :once shutdown-agents-fixture)\r\n\r\n(deftest initial-account-state\r\n  (testing \"Accounts are opened with a balance of 0\"\r\n    (is (= 0 (-> (bank-account/open-account)\r\n                 (bank-account/get-balance))))))\r\n\r\n(deftest increment-and-get-balance\r\n  (testing \"Adding money to the account works\"\r\n    (let [account (bank-account/open-account)]\r\n      (is (= 0 (bank-account/get-balance account)))\r\n      (bank-account/update-balance account 10)\r\n      (is (= 10 (bank-account/get-balance account))))))\r\n\r\n(deftest increment-decrement-and-get-balance\r\n  (testing \"Taking money out of the account works\"\r\n    (let [account (bank-account/open-account)]\r\n      (is (= 0 (bank-account/get-balance account)))\r\n      (bank-account/update-balance account 10)\r\n      (is (= 10 (bank-account/get-balance account)))\r\n      (bank-account/update-balance account -10)\r\n      (is (= 0 (bank-account/get-balance account))))))\r\n\r\n(deftest closed-accounts-are-nil\r\n  (testing \"Closing an account makes it nil\"\r\n    (let [account (bank-account/open-account)]\r\n      (bank-account/close-account account)\r\n      (is (nil? (bank-account/get-balance account))))))\r\n\r\n(deftest check-concurrent-access\r\n  (testing \"The account can handle parallel access\"\r\n    (let [account (bank-account/open-account)\r\n          add-10 #(bank-account/update-balance account 10)]\r\n      (doall (pcalls add-10 add-10 add-10 add-10 add-10))\r\n      (is (= 50 (bank-account/get-balance account))))))\r\n"
 "(ns beer-song-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            beer-song))\r\n\r\n(def verse-8\r\n  (str \"8 bottles of beer on the wall, 8 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 7 bottles of beer on the wall.\\n\"))\r\n\r\n(def verse-2\r\n  (str \"2 bottles of beer on the wall, 2 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 1 bottle of beer on the wall.\\n\"))\r\n\r\n(def verse-1\r\n  (str \"1 bottle of beer on the wall, 1 bottle of beer.\\n\"\r\n       \"Take it down and pass it around, no more bottles of beer on the wall.\\n\"))\r\n\r\n(def verse-0\r\n  (str \"No more bottles of beer on the wall, no more bottles of beer.\\n\"\r\n       \"Go to the store and buy some more, 99 bottles of beer on the wall.\\n\"))\r\n\r\n(def song-8-6\r\n  (str \"8 bottles of beer on the wall, 8 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 7 bottles of beer on the wall.\\n\\n\"\r\n       \"7 bottles of beer on the wall, 7 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 6 bottles of beer on the wall.\\n\\n\"\r\n       \"6 bottles of beer on the wall, 6 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 5 bottles of beer on the wall.\\n\"))\r\n\r\n(def song-3-0\r\n  (str \"3 bottles of beer on the wall, 3 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 2 bottles of beer on the wall.\\n\\n\"\r\n       \"2 bottles of beer on the wall, 2 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 1 bottle of beer on the wall.\\n\\n\"\r\n       \"1 bottle of beer on the wall, 1 bottle of beer.\\n\"\r\n       \"Take it down and pass it around, no more bottles of beer on the wall.\\n\\n\"\r\n       \"No more bottles of beer on the wall, no more bottles of beer.\\n\"\r\n       \"Go to the store and buy some more, 99 bottles of beer on the wall.\\n\"))\r\n\r\n(deftest test-verse-8\r\n  (is (= verse-8 (beer-song/verse 8))))\r\n\r\n(deftest test-verse-2\r\n  (is (= verse-2 (beer-song/verse 2))))\r\n\r\n(deftest test-verse-1\r\n  (is (= verse-1 (beer-song/verse 1))))\r\n\r\n(deftest test-verse-0\r\n  (is (= verse-0 (beer-song/verse 0))))\r\n\r\n(deftest test-song-8-6\r\n  (is (= song-8-6 (beer-song/sing 8 6))))\r\n\r\n(deftest test-song-3-0\r\n  (is (= song-3-0 (beer-song/sing 3))))\r\n"
 "(ns binary-search-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            binary-search))\r\n\r\n(def short-vector [1, 3, 4, 6, 8, 9, 11])\r\n\r\n(def large-vector [1, 3, 5, 8, 13, 21, 34, 55, 89])\r\n\r\n(def even-length-vector [1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377])\r\n\r\n(deftest it-finds-position-of-middle-item\r\n  (is (= 3 (binary-search/middle short-vector))))\r\n\r\n(deftest searches-a-singleton\r\n  (is (= 0 (binary-search/search-for 4 [4]))))\r\n\r\n(deftest it-finds-position-of-search-data\r\n  (is (= 5 (binary-search/search-for 9 short-vector))))\r\n\r\n(deftest it-finds-position-in-a-larger-list\r\n  (is (= 1 (binary-search/search-for 3 large-vector))))\r\n\r\n(deftest it-finds-position-in-a-larger-list-again\r\n  (is (= 7 (binary-search/search-for 55 large-vector))))\r\n\r\n(deftest it-finds-correct-position-in-a-list-with-an-even-number-of-elements\r\n  (is (= 5 (binary-search/search-for 21 even-length-vector))))\r\n\r\n(deftest it-finds-correct-position-in-a-list-with-an-even-number-of-elements-again\r\n  (is (= 6 (binary-search/search-for 34 even-length-vector))))\r\n\r\n(deftest it-works-on-lists\r\n  (is (= 7 (binary-search/search-for 7 (range 10)))))\r\n\r\n(deftest it-works-on-lists-again\r\n  (is (= 4 (binary-search/search-for 3 '(-3 -2 0 1 3 4)))))\r\n\r\n(deftest throws-exception-when-element-not-found\r\n  (is (thrown-with-msg? Throwable #\"not found\"\r\n                        (binary-search/search-for 20 short-vector))))\r\n"
 "(ns binary-search-tree-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [binary-search-tree :as bst]))\r\n\r\n(deftest data-is-retained\r\n  (is (= 4 (bst/value (bst/singleton 4)))))\r\n\r\n(deftest inserting-less\r\n  (let [t (bst/insert 2 (bst/singleton 4))]\r\n    (is (= 4 (bst/value t)))\r\n    (is (= 2 (bst/value (bst/left t))))))\r\n\r\n(deftest inserting-same\r\n  (let [t (bst/insert 4 (bst/singleton 4))]\r\n    (is (= 4 (bst/value t)))\r\n    (is (= 4 (bst/value (bst/left t))))))\r\n\r\n(deftest inserting-right\r\n  (let [t (bst/insert 5 (bst/singleton 4))]\r\n    (is (= 4 (bst/value t)))\r\n    (is (= 5 (bst/value (bst/right t))))))\r\n\r\n(deftest complex-tree\r\n  (let [t (bst/from-list [4 2 6 1 3 7 5])]\r\n    (is (= 4 (bst/value t)))\r\n    (is (= 2 (bst/value (bst/left t))))\r\n    (is (= 1 (bst/value (bst/left (bst/left t)))))\r\n    (is (= 3 (bst/value (bst/right (bst/left t)))))\r\n    (is (= 6 (bst/value (bst/right t))))\r\n    (is (= 5 (bst/value (bst/left (bst/right t)))))\r\n    (is (= 7 (bst/value (bst/right (bst/right t)))))))\r\n\r\n(deftest iterating-one-element\r\n  (is (= [4] (bst/to-list (bst/singleton 4)))))\r\n\r\n(deftest iterating-over-smaller-element\r\n  (is (= [2 4] (bst/to-list (bst/from-list [4 2])))))\r\n\r\n(deftest iterating-over-larger-element\r\n  (is (= [4 5] (bst/to-list (bst/from-list [4 5])))))\r\n\r\n(deftest iterating-over-complex-tree\r\n  (is (= (range 1 8) (bst/to-list (bst/from-list [4 2 1 3 6 7 5])))))\r\n"
 "(ns binary-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            binary))\r\n\r\n(deftest binary-1-is-decimal-1\r\n  (is (= 1 (binary/to-decimal \"1\"))))\r\n\r\n(deftest binary-10-is-decimal-2\r\n  (is (= 2 (binary/to-decimal \"10\"))))\r\n\r\n(deftest binary-11-is-decimal-3\r\n  (is (= 3 (binary/to-decimal \"11\"))))\r\n\r\n(deftest binary-100-is-decimal-4\r\n  (is (= 4 (binary/to-decimal \"100\"))))\r\n\r\n(deftest binary-1001-is-decimal-9\r\n  (is (= 9 (binary/to-decimal \"1001\"))))\r\n\r\n(deftest binary-11010-is-decimal-26\r\n  (is (= 26 (binary/to-decimal \"11010\"))))\r\n\r\n(deftest binary-10001101000-is-decimal-1128\r\n  (is (= 1128 (binary/to-decimal \"10001101000\"))))\r\n\r\n(deftest invalid-binary-is-decimal-0\r\n  (is (= 0 (binary/to-decimal \"carrot\"))))\r\n"
 "(ns bird-watcher-test\r\n  (:require bird-watcher\r\n            [clojure.test :refer [deftest is testing]]))\r\n\r\n(deftest ^{:task 1} last-week-test\r\n  (is (= [0 2 5 3 7 8 4] bird-watcher/last-week)))\r\n\r\n(deftest ^{:task 2} today-disappointing-week-test\r\n  (testing \"Today's bird count of disappointing week\"\r\n    (is (= 0 (bird-watcher/today [0 0 2 0 0 1 0])))))\r\n\r\n(deftest ^{:task 2} today-busy-week-test\r\n  (testing \"Today's bird count of busy week\"\r\n    (is (= 10 (bird-watcher/today [8 8 9 5 4 7 10])))))\r\n\r\n(deftest ^{:task 3} increment-bird-no-visits-test\r\n  (testing \"Increment today's count with no previous visits\"\r\n    (is (= [6 5 5 11 2 5 1] (bird-watcher/inc-bird [6 5 5 11 2 5 0])))))\r\n\r\n(deftest ^{:task 3} increment-bird-multiple-visits-test\r\n  (testing \"Increment today's count with multiple previous visits\"\r\n    (is (= [5 2 4 2 4 5 8] (bird-watcher/inc-bird [5 2 4 2 4 5 7])))))\r\n\r\n(deftest ^{:task 4} day-without-birds-test\r\n  (testing \"Has day without birds with day without birds\"\r\n    (is (= true (bird-watcher/day-without-birds? [5 5 4 0 7 6 7])))))\r\n\r\n(deftest ^{:task 4} no-day-without-birds-test\r\n  (testing \"Has day without birds with no day without birds\"\r\n    (is (= false (bird-watcher/day-without-birds? [5 5 4 1 7 6 7])))))\r\n\r\n(deftest ^{:task 5} n-days-count-disappointing-week-test\r\n  (testing \"Count for first three days of disappointing week\"\r\n    (is (= 1 (bird-watcher/n-days-count [0, 0, 1, 0, 0, 1, 0] 3)))))\r\n\r\n(deftest ^{:task 5} n-days-count-busy-week-test\r\n  (testing \"Count for first 6 days of busy week\"\r\n    (is (= 48 (bird-watcher/n-days-count [5, 9, 12, 6, 8, 8, 17] 6)))))\r\n\r\n(deftest ^{:task 6} busy-days-disappointing-week-test\r\n  (testing \"Busy days for disappointing week\"\r\n    (is (= 0 (bird-watcher/busy-days [1 1 1 0 0 0 0])))))\r\n\r\n(deftest ^{:task 6} busy-days-busy-week-test\r\n  (testing \"Busy days for busy week\"\r\n    (is (= 5 (bird-watcher/busy-days [4 9 5 7 8 8 2])))))\r\n\r\n(deftest ^{:task 7} odd-week-matching-test\r\n  (testing \"Odd week for week matching odd pattern\"\r\n    (is (= true (bird-watcher/odd-week? [1 0 1 0 1 0 1])))))\r\n\r\n(deftest ^{:task 7} odd-week-not-matching-test\r\n  (testing \"Odd week for week that does not match pattern\"\r\n    (is (= false (bird-watcher/odd-week? [2 2 1 0 1 1 1])))))"
 "(ns bob-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            bob))\r\n\r\n(deftest responds-to-something\r\n  (is (= \"Whatever.\" (bob/response-for \"Tom-ay-to, tom-aaaah-to.\"))))\r\n\r\n(deftest responds-to-shouts\r\n  (is (= \"Whoa, chill out!\" (bob/response-for \"WATCH OUT!\"))))\r\n\r\n(deftest responds-to-shouting-gibberish\r\n  (is (= \"Whoa, chill out!\" (bob/response-for \"FCECDFCAAB\"))))\r\n\r\n(deftest responds-to-questions\r\n  (is (= \"Sure.\"\r\n         (bob/response-for \"Does this cryogenic chamber make me look fat?\"))))\r\n\r\n(deftest responds-to-numeric-question\r\n  (is (= \"Sure.\" (bob/response-for \"You are, what, like 15?\"))))\r\n\r\n(deftest responds-to-gibberish-question\r\n  (is (= \"Sure.\" (bob/response-for \"fffbbcbeab?\"))))\r\n\r\n(deftest responds-to-forceful-talking\r\n  (is (= \"Whatever.\" (bob/response-for \"Let's go make out behind the gym!\"))))\r\n\r\n(deftest responds-to-acronyms\r\n  (is (= \"Whatever.\"\r\n         (bob/response-for \"It's OK if you don't want to go to the DMV.\"))))\r\n\r\n(deftest responds-to-forceful-questions\r\n  (is (= \"Calm down, I know what I'm doing!\"\r\n         (bob/response-for \"WHAT THE HELL WERE YOU THINKING?\"))))\r\n\r\n(deftest responds-to-shouting-numbers\r\n  (is (= \"Whoa, chill out!\" (bob/response-for \"1, 2, 3 GO!\"))))\r\n\r\n(deftest responds-to-no-letters\r\n  (is (= \"Whatever.\" (bob/response-for \"1, 2, 3\"))))\r\n\r\n(deftest responds-to-question-with-no-letters\r\n  (is (= \"Sure.\" (bob/response-for \"4?\"))))\r\n\r\n(deftest responds-to-shouting-with-special-characters\r\n  (is (= \"Whoa, chill out!\"\r\n         (bob/response-for \"ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!\"))))\r\n\r\n(deftest responds-to-shouting-with-no-exclamation-mark\r\n  (is (= \"Whoa, chill out!\" (bob/response-for \"I HATE THE DMV\"))))\r\n\r\n(deftest responds-to-statement-containing-question-mark\r\n  (is (= \"Whatever.\" (bob/response-for \"Ending with ? means a question.\"))))\r\n\r\n(deftest responds-to-non-letters-with-question\r\n  (is (= \"Sure.\" (bob/response-for \":) ?\"))))\r\n\r\n(deftest responds-to-prattling-on\r\n  (is (= \"Sure.\" (bob/response-for \"Wait! Hang on. Are you going to be OK?\"))))\r\n\r\n(deftest responds-to-silence\r\n  (is (= \"Fine. Be that way!\" (bob/response-for \"\"))))\r\n\r\n(deftest responds-to-prolonged-silence\r\n  (is (= \"Fine. Be that way!\" (bob/response-for \"    \"))))\r\n\r\n(deftest responds-to-alternate-silence\r\n  (is (= \"Fine. Be that way!\" (bob/response-for \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\"))))\r\n\r\n(deftest responds-to-multiple-line-question\r\n  (is (= \"Whatever.\"\r\n         (bob/response-for \"\\nDoes this cryogenic chamber make me look fat?\\nNo.\"))))\r\n\r\n(deftest responds-to-starting-with-whitespace\r\n  (is (= \"Whatever.\" (bob/response-for \"         hmmmmmmm...\"))))\r\n\r\n(deftest responds-to-ending-with-whitespace\r\n  (is (= \"Sure.\" (bob/response-for \"Okay if like my  spacebar  quite a bit?   \"))))\r\n\r\n(deftest responds-to-other-whitespace\r\n  (is (= \"Fine. Be that way!\" (bob/response-for \"\\n\\r \\t\"))))\r\n\r\n(deftest responds-to-non-question-ending-with-whitespace\r\n  (is (= \"Whatever.\"\r\n         (bob/response-for \"This is a statement ending with whitespace      \"))))\r\n"
 "(ns cars-assemble-test\r\n  (:require cars-assemble\r\n            [clojure.test :refer [deftest is testing]]))\r\n\r\n(deftest ^{:task 1} production-rate-speed-0-test\r\n  (testing \"Production rate for speed 0\"\r\n    (is (= 0.0 (cars-assemble/production-rate 0)))))\r\n\r\n(deftest ^{:task 1} production-rate-speed-1-test\r\n  (testing \"Production rate for speed 1\"\r\n    (is (= 221.0 (cars-assemble/production-rate 1)))))\r\n\r\n(deftest ^{:task 1} production-rate-speed-4-test\r\n  (testing \"Production rate for speed 4\"\r\n    (is (= 884.0 (cars-assemble/production-rate 4)))))\r\n\r\n(deftest ^{:task 1} production-rate-speed-7-test\r\n  (testing \"Production rate for speed 7\"\r\n    (is (= 1392.3 (cars-assemble/production-rate 7)))))\r\n\r\n(deftest ^{:task 1} production-rate-speed-9-test\r\n  (testing \"Production rate for speed 9\"\r\n    (is (= 1591.2 (cars-assemble/production-rate 9)))))\r\n\r\n(deftest ^{:task 1} production-rate-speed-10-test\r\n  (testing \"Production rate for speed 10\"\r\n    (is (= 1701.7 (cars-assemble/production-rate 10)))))\r\n\r\n(deftest ^{:task 2} working-items-speed-0-test\r\n  (testing \"Working items for speed 0\"\r\n    (is (= 0 (cars-assemble/working-items 0)))))\r\n\r\n(deftest ^{:task 2} working-items-speed-1-test\r\n  (testing \"Working items for speed 1\"\r\n    (is (= 3 (cars-assemble/working-items 1)))))\r\n\r\n(deftest ^{:task 2} working-items-speed-5-test\r\n  (testing \"Working items for speed 5\"\r\n    (is (= 16 (cars-assemble/working-items 5)))))\r\n\r\n(deftest ^{:task 2} working-items-speed-8-test\r\n  (testing \"Working items for speed 8\"\r\n    (is (= 26 (cars-assemble/working-items 8)))))\r\n\r\n(deftest ^{:task 2} working-items-speed-9-test\r\n  (testing \"Working items for speed 9\"\r\n    (is (= 26 (cars-assemble/working-items 9)))))\r\n\r\n(deftest ^{:task 2} working-items-speed-10-test\r\n  (testing \"Working items for speed 10\"\r\n    (is (= 28 (cars-assemble/working-items 10)))))\r\n"
 "(ns change-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [change :refer [issue]]))\r\n\r\n(deftest single-coin-change\r\n  (is (= (issue 25 #{1 5 10 25 100})\r\n         '(25))))\r\n\r\n(deftest multiple-coin-change\r\n  (is (= (issue 15 #{1 5 10 25 100})\r\n         '(5 10))))\r\n\r\n(deftest change-with-lilliputian-coins\r\n  (is (= (issue 23 #{1 4 15 20 50})\r\n         '(4 4 15))))\r\n\r\n(deftest change-with-elbonia-coins\r\n  (is (= (issue 63 #{1 5 10 21 25})\r\n         '(21 21 21))))\r\n\r\n(deftest large-target-values\r\n  (is (= (issue 999 #{1 2 5 10 20 50 100})\r\n         '(2 2 5 20 20 50 100 100 100 100 100 100 100 100 100))))\r\n\r\n(deftest no-coins-make-zero-change\r\n  (is (empty? (issue 0 #{1, 5, 10, 21, 25}))))\r\n\r\n(deftest error-testing-for-change-smallet-than-the-smallest-coin\r\n  (is (thrown-with-msg? IllegalArgumentException #\"cannot change\"\r\n                        (issue 3 #{5 10}))))\r\n\r\n(deftest cannot-find-negative-change-values\r\n  (is (thrown-with-msg? IllegalArgumentException #\"cannot change\"\r\n                        (issue -5 #{1 2 5}))))\r\n\r\n(deftest error-testing-for-no-valid-change\r\n  (is (thrown-with-msg? IllegalArgumentException #\"cannot change\"\r\n                        (issue 10 #{20 8 3}))))\r\n"
 "(ns clock-test\r\n  (:require [clock :refer :all]\r\n            [clojure.test :refer [deftest testing is]]))\r\n\r\n(deftest create-clock-test\r\n\r\n  (testing \"on the hour\"\r\n    (let [test-clock (clock->string (clock 8 0))]\r\n      (is (= \"08:00\" test-clock))))\r\n  (testing \"past the hour\"\r\n    (let [test-clock (clock->string (clock 11 9))]\r\n      (is (= \"11:09\" test-clock))))\r\n  (testing \"midnight is zero hours\"\r\n    (let [test-clock (clock->string (clock 24 0))]\r\n      (is (= \"00:00\" test-clock))))\r\n  (testing \"hour rolls over\"\r\n    (let [test-clock (clock->string (clock 25 0))]\r\n      (is (= \"01:00\" test-clock))))\r\n  (testing \"hour rolls over continuously\"\r\n    (let [test-clock (clock->string (clock 100 0))]\r\n      (is (= \"04:00\" test-clock))))\r\n  (testing \"sixty minutes is next hour\"\r\n    (let [test-clock (clock->string (clock 1 60))]\r\n      (is (= \"02:00\" test-clock))))\r\n  (testing \"minutes roll over\"\r\n    (let [test-clock (clock->string (clock 0 160))]\r\n      (is (= \"02:40\" test-clock))))\r\n  (testing \"minutes roll over continuously\"\r\n    (let [test-clock (clock->string (clock 0 1723))]\r\n      (is (= \"04:43\" test-clock))))\r\n  (testing \"hour and minutes roll over\"\r\n    (let [test-clock (clock->string (clock 25 160))]\r\n      (is (= \"03:40\" test-clock))))\r\n  (testing \"hour and minutes roll over continuously\"\r\n    (let [test-clock (clock->string (clock 201 3001))]\r\n      (is (= \"11:01\" test-clock))))\r\n  (testing \"hour and minutes roll over to exactly midnight\"\r\n    (let [test-clock (clock->string (clock 72 8640))]\r\n      (is (= \"00:00\" test-clock))))\r\n  (testing \"negative hour\"\r\n    (let [test-clock (clock->string (clock -1 15))]\r\n      (is (= \"23:15\" test-clock))))\r\n  (testing \"negative hour rolls over\"\r\n    (let [test-clock (clock->string (clock -25 0))]\r\n      (is (= \"23:00\" test-clock))))\r\n  (testing \"negative hour rolls over continuously\"\r\n    (let [test-clock (clock->string (clock -91 0))]\r\n      (is (= \"05:00\" test-clock))))\r\n  (testing \"negative minutes\"\r\n    (let [test-clock (clock->string (clock 1 -40))]\r\n      (is (= \"00:20\" test-clock))))\r\n  (testing \"negative minutes roll over\"\r\n    (let [test-clock (clock->string (clock 1 -160))]\r\n      (is (= \"22:20\" test-clock))))\r\n  (testing \"negative minutes roll over continuously\"\r\n    (let [test-clock (clock->string (clock 1 -4820))]\r\n      (is (= \"16:40\" test-clock))))\r\n  (testing \"negative hour and minutes both roll over\"\r\n    (let [test-clock (clock->string (clock -25 -160))]\r\n      (is (= \"20:20\" test-clock))))\r\n  (testing \"negative hour and minutes both roll over continuously\"\r\n    (let [test-clock (clock->string (clock -121 -5810))]\r\n      (is (= \"22:10\" test-clock)))))\r\n\r\n(deftest add-time-test\r\n\r\n  (testing \"add minutes\"\r\n    (let [test-clock (clock->string (add-time (clock 10 0) 3))]\r\n      (is (= \"10:03\" test-clock))))\r\n  (testing \"add no minutes\"\r\n    (let [test-clock (clock->string (add-time (clock 6 41) 0))]\r\n      (is (= \"06:41\" test-clock))))\r\n  (testing \"add to next hour\"\r\n    (let [test-clock (clock->string (add-time (clock 0 45) 40))]\r\n      (is (= \"01:25\" test-clock))))\r\n  (testing \"add more than one hour\"\r\n    (let [test-clock (clock->string (add-time (clock 10 0) 61))]\r\n      (is (= \"11:01\" test-clock))))\r\n  (testing \"add more than two hours with carry\"\r\n    (let [test-clock (clock->string (add-time (clock 0 45) 160))]\r\n      (is (= \"03:25\" test-clock))))\r\n  (testing \"add across midnight\"\r\n    (let [test-clock (clock->string (add-time (clock 23 59) 2))]\r\n      (is (= \"00:01\" test-clock))))\r\n  (testing \"add more than one day (1500 min = 25 hrs)\"\r\n    (let [test-clock (clock->string (add-time (clock 5 32) 1500))]\r\n      (is (= \"06:32\" test-clock))))\r\n  (testing \"add more than two days\"\r\n    (let [test-clock (clock->string (add-time (clock 1 1) 3500))]\r\n      (is (= \"11:21\" test-clock))))\r\n  (testing \"subtract minutes\"\r\n    (let [test-clock (clock->string (add-time (clock 10 3) -3))]\r\n      (is (= \"10:00\" test-clock))))\r\n  (testing \"subtract to previous hour\"\r\n    (let [test-clock (clock->string (add-time (clock 10 3) -30))]\r\n      (is (= \"09:33\" test-clock))))\r\n  (testing \"subtract more than an hour\"\r\n    (let [test-clock (clock->string (add-time (clock 10 3) -70))]\r\n      (is (= \"08:53\" test-clock))))\r\n  (testing \"subtract across midnight\"\r\n    (let [test-clock (clock->string (add-time (clock 0 3) -4))]\r\n      (is (= \"23:59\" test-clock))))\r\n  (testing \"subtract more than two hours\"\r\n    (let [test-clock (clock->string (add-time (clock 0 0) -160))]\r\n      (is (= \"21:20\" test-clock))))\r\n  (testing \"subtract more than two hours with borrow\"\r\n    (let [test-clock (clock->string (add-time (clock 6 15) -160))]\r\n      (is (= \"03:35\" test-clock))))\r\n  (testing \"subtract more than one day (1500 min = 25 hrs)\"\r\n    (let [test-clock (clock->string (add-time (clock 5 32) -1500))]\r\n      (is (= \"04:32\" test-clock))))\r\n  (testing \"subtract more than two days\"\r\n    (let [test-clock (clock->string (add-time (clock 2 20) -3000))]\r\n      (is (= \"00:20\" test-clock)))))\r\n\r\n(deftest equal-clock-test\r\n  (testing \"clocks with same time\"\r\n    (let [clock1 (clock 15 37)\r\n          clock2 (clock 15 37)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks a minute apart\"\r\n    (let [clock1 (clock 15 36)\r\n          clock2 (clock 15 37)]\r\n      (is (not= clock1 clock2))))\r\n  (testing \"clocks an hour apart\"\r\n    (let [clock1 (clock 14 37)\r\n          clock2 (clock 15 37)]\r\n      (is (not= clock1 clock2))))\r\n  (testing \"clocks with hour overflow\"\r\n    (let [clock1 (clock 10 37)\r\n          clock2 (clock 34 37)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with hour overflow by several days\"\r\n    (let [clock1 (clock 3 11)\r\n          clock2 (clock 99 11)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative hour\"\r\n    (let [clock1 (clock 22 40)\r\n          clock2 (clock -2 40)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative hour that wraps\"\r\n    (let [clock1 (clock 17 3)\r\n          clock2 (clock -31 3)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative hour that wraps multiple times\"\r\n    (let [clock1 (clock 13 49)\r\n          clock2 (clock -83 49)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with minute overflow\"\r\n    (let [clock1 (clock 0 1)\r\n          clock2 (clock 0 1441)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with minute overflow by several days\"\r\n    (let [clock1 (clock 2 2)\r\n          clock2 (clock 2 4322)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative minute\"\r\n    (let [clock1 (clock 2 40)\r\n          clock2 (clock 3 -20)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative minute that wraps\"\r\n    (let [clock1 (clock 4 10)\r\n          clock2 (clock 5 -1490)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative minute that wraps multiple times\"\r\n    (let [clock1 (clock 6 15)\r\n          clock2 (clock 6 -4305)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative hours and minutes\"\r\n    (let [clock1 (clock 7 32)\r\n          clock2 (clock -12 -268)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative hours and minutes that wrap\"\r\n    (let [clock1 (clock 18 7)\r\n          clock2 (clock -54 -11513)]\r\n      (is (= clock1 clock2)))))\r\n"
 "(ns collatz-conjecture-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [collatz-conjecture :refer [collatz]]))\r\n\r\n(deftest steps-for-1\r\n  (testing \"zero steps for one\"\r\n    (is (= 0 (collatz 1)))))\r\n\r\n(deftest steps-for-16\r\n  (testing \"divide if even\"\r\n    (is (= 4 (collatz 16)))))\r\n\r\n(deftest steps-for-12\r\n  (testing \"even and odd steps\"\r\n    (is (= 9 (collatz 12)))))\r\n\r\n(deftest steps-for-1000000\r\n  (testing \"Large number of even and odd steps\"\r\n    (is (= 152 (collatz 1000000)))))\r\n\r\n(deftest steps-for-0\r\n  (testing \"zero is an error\"\r\n    (is (thrown? Throwable\r\n                 (collatz 0)))))\r\n\r\n(deftest steps-for-negative\r\n  (testing \"negative value is an error\"\r\n    (is (thrown? Throwable\r\n                 (collatz -15)))))\r\n"
 "(ns complex-numbers-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [complex-numbers :as c]))\r\n\r\n;; Tests for Real Part\r\n(deftest real-of-purely-real-number\r\n  (testing \"Real part of a purely real number\"\r\n    (is (= (c/real [1 0])\r\n           1))))\r\n\r\n(deftest real-of-purely-imaginary-number\r\n  (testing \"Real part of a purely imaginary number\"\r\n    (is (= (c/real [0 1])\r\n           0))))\r\n\r\n(deftest real-of-real-and-imaginary-number\r\n  (testing \"Real part of a number with real and imaginary part\"\r\n    (is (= (c/real [1 2])\r\n           1))))\r\n\r\n;; Tests for Imaginary Part\r\n(deftest imaginary-of-purely-real-number\r\n  (testing \"Imaginary part of a purely real number\"\r\n    (is (= (c/imaginary [1 0])\r\n           0))))\r\n\r\n(deftest imaginary-of-purely-imaginary-number\r\n  (testing \"Imaginary part of a purely imaginary number\"\r\n    (is (= (c/imaginary [0 1])\r\n           1))))\r\n\r\n(deftest imaginary-of-real-and-imaginary-number\r\n  (testing \"Imaginary part of a number with real and imaginary part\"\r\n    (is (= (c/imaginary [1 2])\r\n           2))))\r\n\r\n;; Tests for Absolute Value\r\n(deftest absolute-of-positive-purely-real-number\r\n  (testing \"Absolute value of a positive purely real number\"\r\n    (is (= (c/abs [5 0])\r\n           5.0))))\r\n\r\n(deftest absolute-of-negative-purely-real-number\r\n  (testing \"Absolute value of a negative purely real number\"\r\n    (is (= (c/abs [-5 0])\r\n           5.0))))\r\n\r\n(deftest absolute-of-positive-purely-imaginary-number\r\n  (testing \"Absolute value of a purely imaginary number with positive imaginary part\"\r\n    (is (= (c/abs [0 5])\r\n           5.0))))\r\n\r\n(deftest absolute-of-negative-purely-imaginary-number\r\n  (testing \"Absolute value of a purely imaginary number with negative imaginary part\"\r\n    (is (= (c/abs [0 -5])\r\n           5.0))))\r\n\r\n(deftest absolute-of-real-and-imaginary-number\r\n  (testing \"Absolute value of a number with real and imaginary part\"\r\n    (is (= (c/abs [3 4])\r\n           5.0))))\r\n\r\n;; Tests for Conjugate\r\n(deftest conjugate-of-purely-real-number\r\n  (testing \"Conjugate a purely real number\"\r\n    (is (= (c/conjugate [5 0])\r\n           [5 0]))))\r\n\r\n(deftest conjugate-of-purely-imaginary-number\r\n  (testing \"Conjugate a purely imaginary number\"\r\n    (is (= (c/conjugate [0 5])\r\n           [0 -5]))))\r\n\r\n(deftest conjugate-of-real-and-imaginary-number\r\n  (testing \"Conjugate a number with real and imaginary part\"\r\n    (is (= (c/conjugate [1 1])\r\n           [1 -1]))))\r\n\r\n;; Tests for Addition\r\n(deftest add-purely-real-numbers\r\n  (testing \"Add purely real numbers\"\r\n    (is (= (c/add [1 0] [2 0])\r\n           [3 0]))))\r\n\r\n(deftest add-purely-imaginary-numbers\r\n  (testing \"Add purely imaginary numbers\"\r\n    (is (= (c/add [0 1] [0 2])\r\n           [0 3]))))\r\n\r\n(deftest add-numbers-with-real-and-imaginary-part\r\n  (testing \"Add numbers with real and imaginary part\"\r\n    (is (= (c/add [1 2] [3 4])\r\n           [4 6]))))\r\n\r\n;; Tests for Subtraction\r\n(deftest subtract-purely-real-numbers\r\n  (testing \"Subtract purely real numbers\"\r\n    (is (= (c/sub [1 0] [2 0])\r\n           [-1 0]))))\r\n\r\n(deftest subtract-purely-imaginary-numbers\r\n  (testing \"Subtract purely imaginary numbers\"\r\n    (is (= (c/sub [0 1] [0 2])\r\n           [0 -1]))))\r\n\r\n(deftest subtract-numbers-with-real-and-imaginary-part\r\n  (testing \"Subtract numbers with real and imaginary part\"\r\n    (is (= (c/sub [1 2] [3 4])\r\n           [-2 -2]))))\r\n\r\n;; Tests for Multiplication\r\n(deftest multiply-purely-real-numbers\r\n  (testing \"Multiply purely real numbers\"\r\n    (is (= (c/mul [1 0] [2 0])\r\n           [2 0]))))\r\n\r\n(deftest multiply-purely-imaginary-numbers\r\n  (testing \"Multiply purely imaginary numbers\"\r\n    (is (= (c/mul [0 1] [0 2])\r\n           [-2 0]))))\r\n\r\n(deftest multiply-numbers-with-real-and-imaginary-part\r\n  (testing \"Multiply numbers with real and imaginary part\"\r\n    (is (= (c/mul [1 2] [3 4])\r\n           [-5 10]))))\r\n\r\n;; Tests for division\r\n(deftest divide-purely-real-numbers\r\n  (testing \"Divide purely real numbers\"\r\n    (is (= (c/div [1 0] [2 0])\r\n           [0.5 0.0]))))\r\n\r\n(deftest dividey-purely-imaginary-numbers\r\n  (testing \"Divide purely imaginary numbers\"\r\n    (is (= (c/div [0 1] [0 2])\r\n           [0.5 0.0]))))\r\n\r\n(deftest divide-numbers-with-real-and-imaginary-part\r\n  (testing \"Divide numbers with real and imaginary part\"\r\n    (is (= (c/div [1 2] [3 4])\r\n           [0.44 0.08]))))\r\n"
 "(ns coordinate-transformation-test\r\n  (:require [clojure.test :refer [deftest testing is function?]]\r\n            [coordinate-transformation :refer [translate2d scale2d compose-transform memoize-transform]]))\r\n\r\n(deftest translate2d-test\r\n  (testing \"should return a function\"\r\n    (is (true? (function? translate2d))))\r\n  (testing \"should be predictable\"\r\n    (is (let [dx 3 dy -5\r\n              translator (translate2d dx dy)\r\n              x1 0 y1 0\r\n              expected [3 -5]]\r\n          (= expected (translator x1 y1)))))\r\n  (testing \"should be reusable\"\r\n    (is (let [dx 3 dy -5\r\n              translator (translate2d dx dy)\r\n              x2 4 y2 5\r\n              reusedExpected [7 0]]\r\n          (= reusedExpected (translator x2 y2))))))\r\n\r\n(deftest scale2d-test\r\n  (testing \"should return a function\"\r\n    (is (true? (function? scale2d))))\r\n  (testing \"should be predictable\"\r\n    (is (let [dx             4\r\n              dy             2\r\n              scaler         (scale2d dx dy)\r\n              x1             1\r\n              y1             1\r\n              expected       [4 2]]\r\n          (= expected (scaler x1 y1)))))\r\n  (testing \"should be reusable\"\r\n    (is (let [dx             4\r\n              dy             2\r\n              scaler         (scale2d dx dy)\r\n              x2             -2\r\n              y2             5\r\n              reusedExpected [-8 10]]\r\n          (= reusedExpected (scaler x2 y2))))))\r\n\r\n(deftest compose-transform-test\r\n (testing \"should return a function\"\r\n   (is (let [dx         -6\r\n             dy         10\r\n             translator (translate2d dx dy)\r\n             sx         3\r\n             sy         2\r\n             scaler     (scale2d sx sy)]\r\n         (true? (function? (compose-transform translator scaler))))))\r\n  (testing \"should compose two translate functions\"\r\n   (is (let [dx         -6\r\n             dy         10\r\n             translator (translate2d dx dy)\r\n             compose-translate (compose-transform translator translator)]\r\n         (= [-12 20] (compose-translate 0 0)))))\r\n         (testing\r\n          \"should compose two scale functions\"\r\n          (is (let [sx         3\r\n                    sy         2\r\n                    scaler     (scale2d sx sy)\r\n                    compose-scale (compose-transform scaler scaler)]\r\n                (= [9 4] (compose-scale 1 1)))))\r\n         (testing \"should compose in the correct order: g(f(x))\"\r\n          (is\r\n            (let [dx         -6\r\n                  dy         10\r\n                  translator (translate2d dx dy)\r\n                  sx         3\r\n                  sy         2\r\n                  scaler     (scale2d sx sy)\r\n                  composed (compose-transform scaler translator)]\r\n              (= [-6 10] (composed 0 0)))))\r\n         (testing \"should compose in the opposite order: g(f(x))\"\r\n          (is (let [dx         -6\r\n                    dy         10\r\n                    translator (translate2d dx dy)\r\n                    sx         3\r\n                    sy         2\r\n                    scaler     (scale2d sx sy)\r\n                    composed (compose-transform translator scaler)]\r\n                (= [-18 20] (composed 0 0))))))\r\n\r\n(deftest memoize-transform-test\r\n  (testing \"should return a function\"\r\n    (is (function? (memoize-transform (translate2d 2 2)))))\r\n  (testing \"should return the same result if given the same input\"\r\n    (is (= [4 4] (let [memoized-translate (memoize-transform (translate2d 2 2))]\r\n                   (memoized-translate 2 2))))\r\n    (is (= [4 4] (let [memoized-translate (memoize-transform (translate2d 2 2))]\r\n                   (memoized-translate 2 2)))))\r\n  (testing \"should return different results for different inputs\"\r\n    (is (= [3 4] (let [memoized-translate (memoize-transform (translate2d 1 2))]\r\n                   (memoized-translate 2 2))))\r\n    (is (= [7 8] (let [memoized-translate (memoize-transform (translate2d 1 2))]\r\n                   (memoized-translate 6 6)))))\r\n  (testing \"should not call the memoized function if the input is the same\"\r\n    (let [fake-first (atom true)\r\n          fake-transform (fn [_ _]\r\n                           (if @fake-first\r\n                             (do (reset! fake-first false)\r\n                                 [1 1])\r\n                             false))\r\n          memoized-transform (memoize-transform fake-transform)]\r\n      (is (= [1 1] (memoized-transform 5 5)))\r\n      (is (= [1 1] (memoized-transform 5 5)))))\r\n  (testing \"should only remember the last result\"\r\n    (let [mock-fn (let [n (atom 0)]\r\n                    (with-meta\r\n                      (fn [x y]\r\n                        (swap! n inc)\r\n                        [(* x 2) (* y 2)])\r\n                      {::call-count (fn [] @n)}))\r\n          memoized-transform (memoize-transform mock-fn)]\r\n      (is (= [2 2] (memoized-transform 1 1)))\r\n      (is (= [4 4] (memoized-transform 2 2)))\r\n      (is (= [2 2] (memoized-transform 1 1)))\r\n      (is (= 3 ((::call-count (meta mock-fn))))))))\r\n"
 "(ns crypto-square-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            crypto-square))\r\n\r\n(deftest normalize-splunk\r\n  (is (= \"splunk\" (crypto-square/normalize-plaintext \"s#!@$%plunk\"))))\r\n(deftest normalize-with-punctuation\r\n  (is (= \"123go\" (crypto-square/normalize-plaintext \"1, 2, 3 GO!\"))))\r\n\r\n(deftest square-2\r\n  (is (= 2 (crypto-square/square-size \"1234\"))))\r\n(deftest square-3\r\n  (is (= 3 (crypto-square/square-size \"123456789\"))))\r\n(deftest square-4\r\n  (is (= 4 (crypto-square/square-size \"123456789abc\"))))\r\n\r\n(deftest segments\r\n  (is (= [\"neverv\", \"exthin\", \"eheart\", \"withid\", \"lewoes\"]\r\n         (crypto-square/plaintext-segments \"Never vex thine heart with idle woes.\"))))\r\n(deftest segments-2\r\n  (is (= [\"zomg\", \"zomb\", \"ies\"]\r\n         (crypto-square/plaintext-segments \"ZOMG! ZOMBIES!!!\"))))\r\n\r\n(deftest cipher-1\r\n  (is (= \"tasneyinicdsmiohooelntuillibsuuml\"\r\n         (crypto-square/ciphertext \"Time is an illusion. Lunchtime doubly so.\"))))\r\n(deftest cipher-2\r\n  (is (= \"wneiaweoreneawssciliprerlneoidktcms\"\r\n         (crypto-square/ciphertext \"We all know interspecies romance is weird.\"))))\r\n(deftest cipher-3\r\n  (is (= \"vrel aepe mset paoo irpo\"\r\n         (crypto-square/normalize-ciphertext \"Vampires are people too!\"))))\r\n(deftest cipher-4\r\n  (is (= \"msemo aanin dnin  ndla  etlt  shui \"\r\n         (crypto-square/normalize-ciphertext \"Madness, and then illumination.\"))))\r\n(deftest cipher-5\r\n  (is (= (str \"ageihdsednsh lsagtoonaepe lannswnccair hrditeaetnrh \"\r\n              \"ueethdnatoio mbqyewdnotto aouayicdwhod nranatosaef  \"\r\n              \"bnldrhnhrrb  efirersodir  irnieecusno  nedgnailoat \")\r\n         (let [plaintext (str \"All human beings are born free \"\r\n                              \"and equal in dignity and rights. \"\r\n                              \"They are endowed with reason and conscience \"\r\n                              \"and should act towards one another \"\r\n                              \"in a spirit of brotherhood.\")]\r\n           (crypto-square/normalize-ciphertext plaintext)))))\r\n(deftest cipher-6\r\n  (is (= \"imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn  sseoau \"\r\n         (crypto-square/normalize-ciphertext \"If man was meant to stay on the ground, god would have given us roots.\"))))"
 "(ns date-parser-test\r\n  (:require [clojure.test :refer [deftest testing is]]\r\n            date-parser))\r\n            \r\n(deftest ^{:task 1} day-test\r\n  (testing \"numeric pattern for day matches\"\r\n    (testing \"un-padded 1\"\r\n      (is (= \"1\" (re-matches (re-pattern date-parser/day) \"1\"))))\r\n    (testing \"un-padded 2\"\r\n      (is (= \"2\" (re-matches (re-pattern date-parser/day) \"2\"))))\r\n    (testing \"un-padded 3\"\r\n      (is (= \"3\" (re-matches (re-pattern date-parser/day) \"3\"))))\r\n    (testing \"un-padded 4\"\r\n      (is (= \"4\" (re-matches (re-pattern date-parser/day) \"4\"))))\r\n    (testing \"un-padded 5\"\r\n      (is (= \"5\" (re-matches (re-pattern date-parser/day) \"5\"))))\r\n    (testing \"un-padded 6\"\r\n      (is (= \"6\" (re-matches (re-pattern date-parser/day) \"6\"))))\r\n    (testing \"un-padded 7\"\r\n      (is (= \"7\" (re-matches (re-pattern date-parser/day) \"7\"))))\r\n    (testing \"un-padded 8\"\r\n      (is (= \"8\" (re-matches (re-pattern date-parser/day) \"8\"))))\r\n    (testing \"un-padded 9\"\r\n      (is (= \"9\" (re-matches (re-pattern date-parser/day) \"9\"))))\r\n    (testing \"un-padded 10\"\r\n      (is (= \"10\" (re-matches (re-pattern date-parser/day) \"10\"))))\r\n    (testing \"un-padded 11\"\r\n      (is (= \"11\" (re-matches (re-pattern date-parser/day) \"11\"))))\r\n    (testing \"un-padded 12\"\r\n      (is (= \"12\" (re-matches (re-pattern date-parser/day) \"12\"))))\r\n    (testing \"un-padded 13\"\r\n      (is (= \"13\" (re-matches (re-pattern date-parser/day) \"13\"))))\r\n    (testing \"un-padded 14\"\r\n      (is (= \"14\" (re-matches (re-pattern date-parser/day) \"14\"))))\r\n    (testing \"un-padded 15\"\r\n      (is (= \"15\" (re-matches (re-pattern date-parser/day) \"15\"))))\r\n    (testing \"un-padded 16\"\r\n      (is (= \"16\" (re-matches (re-pattern date-parser/day) \"16\"))))\r\n    (testing \"un-padded 17\"\r\n      (is (= \"17\" (re-matches (re-pattern date-parser/day) \"17\"))))\r\n    (testing \"un-padded 18\"\r\n      (is (= \"18\" (re-matches (re-pattern date-parser/day) \"18\"))))\r\n    (testing \"un-padded 19\"\r\n      (is (= \"19\" (re-matches (re-pattern date-parser/day) \"19\"))))\r\n    (testing \"un-padded 20\"\r\n      (is (= \"20\" (re-matches (re-pattern date-parser/day) \"20\"))))\r\n    (testing \"un-padded 21\"\r\n      (is (= \"21\" (re-matches (re-pattern date-parser/day) \"21\"))))\r\n    (testing \"un-padded 22\"\r\n      (is (= \"22\" (re-matches (re-pattern date-parser/day) \"22\"))))\r\n    (testing \"un-padded 23\"\r\n      (is (= \"23\" (re-matches (re-pattern date-parser/day) \"23\"))))\r\n    (testing \"un-padded 24\"\r\n      (is (= \"24\" (re-matches (re-pattern date-parser/day) \"24\"))))\r\n    (testing \"un-padded 25\"\r\n      (is (= \"25\" (re-matches (re-pattern date-parser/day) \"25\"))))\r\n    (testing \"un-padded 26\"\r\n      (is (= \"26\" (re-matches (re-pattern date-parser/day) \"26\"))))\r\n    (testing \"un-padded 27\"\r\n      (is (= \"27\" (re-matches (re-pattern date-parser/day) \"27\"))))\r\n    (testing \"un-padded 28\"\r\n      (is (= \"28\" (re-matches (re-pattern date-parser/day) \"28\"))))\r\n    (testing \"un-padded 29\"\r\n      (is (= \"29\" (re-matches (re-pattern date-parser/day) \"29\"))))\r\n    (testing \"un-padded 30\"\r\n      (is (= \"30\" (re-matches (re-pattern date-parser/day) \"30\"))))\r\n    (testing \"un-padded 31\"\r\n      (is (= \"31\" (re-matches (re-pattern date-parser/day) \"31\"))))\r\n    (testing \"un-padded 1\"\r\n      (is (= \"1\" (re-matches (re-pattern date-parser/day) \"1\"))))\r\n    (testing \"padded 02\"\r\n      (is (= \"02\" (re-matches (re-pattern date-parser/day) \"02\"))))\r\n    (testing \"padded 03\"\r\n      (is (= \"03\" (re-matches (re-pattern date-parser/day) \"03\"))))\r\n    (testing \"padded 04\"\r\n      (is (= \"04\" (re-matches (re-pattern date-parser/day) \"04\"))))\r\n    (testing \"padded 05\"\r\n      (is (= \"05\" (re-matches (re-pattern date-parser/day) \"05\"))))\r\n    (testing \"padded 06\"\r\n      (is (= \"06\" (re-matches (re-pattern date-parser/day) \"06\"))))\r\n    (testing \"padded 07\"\r\n      (is (= \"07\" (re-matches (re-pattern date-parser/day) \"07\"))))\r\n    (testing \"padded 08\"\r\n      (is (= \"08\" (re-matches (re-pattern date-parser/day) \"08\"))))\r\n    (testing \"padded 09\"\r\n      (is (= \"09\" (re-matches (re-pattern date-parser/day) \"09\")))))\r\n  (testing \"numeric pattern for day doesn't match\"\r\n    (testing \"too few digits\"\r\n      (is (nil? (re-matches (re-pattern date-parser/day) \"\"))))\r\n    (testing \"too many digits\"\r\n      (is (nil? (re-matches (re-pattern date-parser/day) \"111\"))))\r\n    (testing \"one letter\"\r\n      (is (nil? (re-matches (re-pattern date-parser/day) \"a\"))))\r\n    (testing \"two letters\"\r\n      (is (nil? (re-matches (re-pattern date-parser/day) \"bb\"))))))\r\n\r\n(deftest ^{:task 1} month-test\r\n  (testing \"numeric pattern for month matches\"\r\n    (testing \"un-padded 1\"\r\n      (is (= \"1\" (re-matches (re-pattern date-parser/month) \"1\"))))\r\n    (testing \"un-padded 2\"\r\n      (is (= \"2\" (re-matches (re-pattern date-parser/month) \"2\"))))\r\n    (testing \"un-padded 3\"\r\n      (is (= \"3\" (re-matches (re-pattern date-parser/month) \"3\"))))\r\n    (testing \"un-padded 4\"\r\n      (is (= \"4\" (re-matches (re-pattern date-parser/month) \"4\"))))\r\n    (testing \"un-padded 5\"\r\n      (is (= \"5\" (re-matches (re-pattern date-parser/month) \"5\"))))\r\n    (testing \"un-padded 6\"\r\n      (is (= \"6\" (re-matches (re-pattern date-parser/month) \"6\"))))\r\n    (testing \"un-padded 7\"\r\n      (is (= \"7\" (re-matches (re-pattern date-parser/month) \"7\"))))\r\n    (testing \"un-padded 8\"\r\n      (is (= \"8\" (re-matches (re-pattern date-parser/month) \"8\"))))\r\n    (testing \"un-padded 9\"\r\n      (is (= \"9\" (re-matches (re-pattern date-parser/month) \"9\"))))\r\n    (testing \"un-padded 10\"\r\n      (is (= \"10\" (re-matches (re-pattern date-parser/month) \"10\"))))\r\n    (testing \"un-padded 11\"\r\n      (is (= \"11\" (re-matches (re-pattern date-parser/month) \"11\"))))\r\n    (testing \"un-padded 12\"\r\n      (is (= \"12\" (re-matches (re-pattern date-parser/month) \"12\"))))\r\n    (testing \"un-padded 1\"\r\n      (is (= \"1\" (re-matches (re-pattern date-parser/month) \"1\"))))\r\n    (testing \"padded 02\"\r\n      (is (= \"02\" (re-matches (re-pattern date-parser/month) \"02\"))))\r\n    (testing \"padded 03\"\r\n      (is (= \"03\" (re-matches (re-pattern date-parser/month) \"03\"))))\r\n    (testing \"padded 04\"\r\n      (is (= \"04\" (re-matches (re-pattern date-parser/month) \"04\"))))\r\n    (testing \"padded 05\"\r\n      (is (= \"05\" (re-matches (re-pattern date-parser/month) \"05\"))))\r\n    (testing \"padded 06\"\r\n      (is (= \"06\" (re-matches (re-pattern date-parser/month) \"06\"))))\r\n    (testing \"padded 07\"\r\n      (is (= \"07\" (re-matches (re-pattern date-parser/month) \"07\"))))\r\n    (testing \"padded 08\"\r\n      (is (= \"08\" (re-matches (re-pattern date-parser/month) \"08\"))))\r\n    (testing \"padded 09\"\r\n      (is (= \"09\" (re-matches (re-pattern date-parser/month) \"09\")))))\r\n  (testing \"numeric pattern for month doesn't match\"\r\n    (testing \"too few digits\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"\"))))\r\n    (testing \"too many digits\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"111\"))))\r\n    (testing \"one letter\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"a\"))))\r\n    (testing \"two letters\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"bb\"))))\r\n    (testing \"short month name\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"Jan\"))))\r\n    (testing \"long month name\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"January\"))))))\r\n\r\n(deftest ^{:task 1} year-test\r\n  (testing \"numeric pattern for year\"\r\n    (testing \"matches 4 digits\"\r\n      (is (= \"1970\" (re-matches (re-pattern date-parser/year) \"1970\"))))\r\n    (testing \"doesn't match short year\"\r\n      (is (nil? (re-matches (re-pattern date-parser/year) \"84\"))))\r\n    (testing \"doesn't match letters\"\r\n      (is (nil? (re-matches (re-pattern date-parser/year) \"198A\"))))\r\n    (testing \"doesn't match too few\"\r\n      (is (nil? (re-matches (re-pattern date-parser/year) \"198\"))))\r\n    (testing \"doesn't match too many\"\r\n      (is (nil? (re-matches (re-pattern date-parser/year) \"19701\"))))))\r\n\r\n(deftest ^{:task 2} day-names-test\r\n  (testing \"day names match\"\r\n    (is (= \"Sunday\" (date-parser/day-names \"Sunday\")))\r\n    (is (= \"Monday\" (date-parser/day-names \"Monday\")))\r\n    (is (= \"Tuesday\" (date-parser/day-names \"Tuesday\")))\r\n    (is (= \"Wednesday\" (date-parser/day-names \"Wednesday\")))\r\n    (is (= \"Thursday\" (date-parser/day-names \"Thursday\")))\r\n    (is (= \"Friday\" (date-parser/day-names \"Friday\")))\r\n    (is (= \"Saturday\" (date-parser/day-names \"Saturday\"))))\r\n  (testing \"day names don't match\"\r\n    (testing \"combined\"\r\n      (is (nil? (date-parser/day-names \"SundayMonday\"))))\r\n    (testing \"short name\"\r\n      (is (nil? (date-parser/day-names \"Sun\"))))\r\n    (testing \"numeric day of the week (0-indexed)\"\r\n      (is (nil? (date-parser/day-names \"0\"))))\r\n    (testing \"numeric day of the week (1-indexed)\"\r\n      (is (nil? (date-parser/day-names \"1\"))))))\r\n\r\n(deftest ^{:task 2} month-names-test\r\n  (testing \"month names match\"\r\n    (is (= \"January\" (date-parser/month-names \"January\")))\r\n    (is (= \"February\" (date-parser/month-names \"February\")))\r\n    (is (= \"March\" (date-parser/month-names \"March\")))\r\n    (is (= \"April\" (date-parser/month-names \"April\")))\r\n    (is (= \"May\" (date-parser/month-names \"May\")))\r\n    (is (= \"June\" (date-parser/month-names \"June\")))\r\n    (is (= \"July\" (date-parser/month-names \"July\")))\r\n    (is (= \"August\" (date-parser/month-names \"August\")))\r\n    (is (= \"September\" (date-parser/month-names \"September\")))\r\n    (is (= \"October\" (date-parser/month-names \"October\")))\r\n    (is (= \"November\" (date-parser/month-names \"November\")))\r\n    (is (= \"December\" (date-parser/month-names \"December\"))))\r\n  (testing \"month names don't match\"\r\n    (testing \"combined\"\r\n      (is (nil? (date-parser/month-names \"JanuaryFebruary\"))))\r\n    (testing \"short name\"\r\n      (is (nil? (date-parser/month-names \"Jan\"))))\r\n    (testing \"numeric month of the year (0-indexed)\"\r\n      (is (nil? (date-parser/month-names \"0\"))))\r\n    (testing \"numeric month of the year (1-indexed)\"\r\n      (is (nil? (date-parser/month-names \"1\"))))))\r\n\r\n(deftest ^{:task 3} capture-test\r\n  (testing \"capture numeric month\"\r\n    (is (= {:month \"01\"} (date-parser/capture-month \"01\"))))\r\n  (testing \"capture numeric day\"\r\n    (is (= {:day \"01\"} (date-parser/capture-day \"01\"))))\r\n  (testing \"capture numeric year\"\r\n    (is (= {:year \"1970\"} (date-parser/capture-year \"1970\"))))\r\n  (testing \"capture day name\"\r\n    (is (= {:day-name \"Monday\"} (date-parser/capture-day-name \"Monday\"))))\r\n  (testing \"capture month name\"\r\n    (is (= {:month-name \"February\"} (date-parser/capture-month-name \"February\")))))\r\n\r\n(deftest ^{:task 4} combined-capture-test\r\n  (testing \"numeric date\"\r\n    (is (= {:year \"1970\", :month \"02\", :day \"01\"} (date-parser/capture-numeric-date \"01/02/1970\"))))\r\n  (testing \"month named date\"\r\n    (is (= {:year \"1970\", :month-name \"January\", :day \"1\"} (date-parser/capture-month-name-date \"January 1, 1970\"))))\r\n  (testing \"day and month named date\"\r\n    (is (= {:year \"1970\", :month-name \"January\", :day \"1\", :day-name \"Thursday\"}\r\n           (date-parser/capture-day-month-name-date \"Thursday, January 1, 1970\")))))\r\n"
 "(ns diamond-test\r\n  (:require [clojure.test :refer [deftest is are]]\r\n            [diamond :refer [diamond]]))\r\n\r\n(deftest single-a-row\r\n  (is (= (diamond \\A) [\"A\"])))\r\n\r\n(deftest b-diamond\r\n  (is (= (diamond \\B) [\" A \"\r\n                       \"B B\"\r\n                       \" A \"])))\r\n(deftest c-diamond\r\n  (is (= (diamond \\C) [\"  A  \"\r\n                       \" B B \"\r\n                       \"C   C\"\r\n                       \" B B \"\r\n                       \"  A  \"])))\r\n\r\n(deftest d-diamond\r\n  (is (= (diamond \\D) [\"   A   \"\r\n                       \"  B B  \"\r\n                       \" C   C \"\r\n                       \"D     D\"\r\n                       \" C   C \"\r\n                       \"  B B  \"\r\n                       \"   A   \"])))\r\n\r\n(deftest full-z-diamond\r\n  (is (= (diamond \\Z) [\"                         A                         \"\r\n                       \"                        B B                        \"\r\n                       \"                       C   C                       \"\r\n                       \"                      D     D                      \"\r\n                       \"                     E       E                     \"\r\n                       \"                    F         F                    \"\r\n                       \"                   G           G                   \"\r\n                       \"                  H             H                  \"\r\n                       \"                 I               I                 \"\r\n                       \"                J                 J                \"\r\n                       \"               K                   K               \"\r\n                       \"              L                     L              \"\r\n                       \"             M                       M             \"\r\n                       \"            N                         N            \"\r\n                       \"           O                           O           \"\r\n                       \"          P                             P          \"\r\n                       \"         Q                               Q         \"\r\n                       \"        R                                 R        \"\r\n                       \"       S                                   S       \"\r\n                       \"      T                                     T      \"\r\n                       \"     U                                       U     \"\r\n                       \"    V                                         V    \"\r\n                       \"   W                                           W   \"\r\n                       \"  X                                             X  \"\r\n                       \" Y                                               Y \"\r\n                       \"Z                                                 Z\"\r\n                       \" Y                                               Y \"\r\n                       \"  X                                             X  \"\r\n                       \"   W                                           W   \"\r\n                       \"    V                                         V    \"\r\n                       \"     U                                       U     \"\r\n                       \"      T                                     T      \"\r\n                       \"       S                                   S       \"\r\n                       \"        R                                 R        \"\r\n                       \"         Q                               Q         \"\r\n                       \"          P                             P          \"\r\n                       \"           O                           O           \"\r\n                       \"            N                         N            \"\r\n                       \"             M                       M             \"\r\n                       \"              L                     L              \"\r\n                       \"               K                   K               \"\r\n                       \"                J                 J                \"\r\n                       \"                 I               I                 \"\r\n                       \"                  H             H                  \"\r\n                       \"                   G           G                   \"\r\n                       \"                    F         F                    \"\r\n                       \"                     E       E                     \"\r\n                       \"                      D     D                      \"\r\n                       \"                       C   C                       \"\r\n                       \"                        B B                        \"\r\n                       \"                         A                         \"])))\r\n"
 "(ns difference-of-squares-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [difference-of-squares :as dos]))\r\n\r\n(deftest square-of-sum-to-5\r\n  (is (= 225 (dos/square-of-sum 5))))\r\n\r\n(deftest sum-of-squares-to-5\r\n  (is (= 55 (dos/sum-of-squares 5))))\r\n\r\n(deftest difference-of-squares-to-5\r\n  (is (= 170 (dos/difference 5))))\r\n\r\n(deftest square-of-sum-to-10\r\n  (is (= 3025 (dos/square-of-sum 10))))\r\n\r\n(deftest sum-of-squares-to-10\r\n  (is (= 385 (dos/sum-of-squares 10))))\r\n\r\n(deftest difference-of-squares-to-10\r\n  (is (= 2640 (dos/difference 10))))\r\n\r\n(deftest square-of-sum-to-100\r\n  (is (= 25502500 (dos/square-of-sum 100))))\r\n\r\n(deftest sum-of-squares-to-100\r\n  (is (= 338350 (dos/sum-of-squares 100))))\r\n\r\n(deftest difference-of-squares-to-100\r\n  (is (= 25164150 (dos/difference 100))))\r\n"
 "(ns dominoes-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [dominoes     :refer [can-chain?]]))\r\n\r\n(deftest empty-input-empty-output\r\n  (is (can-chain? [])))\r\n\r\n(deftest singleton-input-singleton-output\r\n  (is (can-chain? [[1 1]])))\r\n\r\n(deftest singleton-that-cant-be-chained\r\n  (is ((comp not can-chain?) [[1 2]])))\r\n\r\n(deftest three-elements\r\n  (is (can-chain?  [[1 2] [3 1] [2 3]])))\r\n\r\n(deftest can-reverse-dominoes\r\n  (is (can-chain? [[1 2] [1 3] [2 3]])))\r\n\r\n(deftest cant-be-chained\r\n  (is ((comp not can-chain?) [[1 2] [4 1] [2 3]])))\r\n\r\n(deftest disconnected-simple\r\n  (is ((comp not can-chain?) [[1 1] [2 2]])))\r\n\r\n(deftest disconnected-double-loop\r\n  (is ((comp not can-chain?) [[1 2] [2 1] [3 4] [4 3]])))\r\n\r\n(deftest disconnected-single-isolated\r\n  (is ((comp not can-chain?) [[1 2] [2 3] [3 1] [4 4]])))\r\n\r\n(deftest need-backtrack\r\n  (is (can-chain? [[1 2] [2 3] [3 1] [2 4] [2 4]])))\r\n\r\n(deftest separate-loops\r\n  (is (can-chain? [[1 2] [2 3] [3 1] [1 1] [2 2] [3 3]])))\r\n\r\n(deftest nine-elements\r\n  (is (can-chain? [[1 2] [5 3] [3 1] [1 2] [2 4] [1 6] [2 3] [3 4] [5 6]])))\r\n"
 "(ns elyses-destructured-enchantments-test\r\n  (:require [clojure.test :refer :all]\r\n            [elyses-destructured-enchantments :refer :all]))\r\n\r\n(deftest ^{:task 1} first-card-single-test\r\n  (is (= 3 (first-card [3]))))\r\n\r\n(deftest ^{:task 1} first-card-multiple-test\r\n  (is (= 8 (first-card [8 3 9 5]))))\r\n\r\n(deftest ^{:task 2} second-card-2-test\r\n  (is (= 4 (second-card [10 4]))))\r\n\r\n(deftest ^{:task 2} second-card-4-test\r\n  (is (= 5 (second-card [2 5 1 6]))))\r\n\r\n(deftest ^{:task 2} second-card-empty-test\r\n  (is (nil? (second-card []))))\r\n\r\n(deftest ^{:task 2} second-card-single-test\r\n  (is (nil? (second-card [8]))))\r\n\r\n(deftest ^{:task 3} swap-top-two-cards-2-test\r\n  (is (= [6 3] (swap-top-two-cards [3 6]))))\r\n\r\n(deftest ^{:task 3} swap-top-two-cards-5-test\r\n  (is (= [4 10 3 7 8] (swap-top-two-cards [10 4 3 7 8]))))\r\n\r\n(deftest ^{:task 4} discard-top-card-single-test\r\n  (is (= [7 nil] (discard-top-card [7]))))\r\n\r\n(deftest ^{:task 4} discard-top-card-4-test\r\n  (is (= [9 [2 10 4]] (discard-top-card [9 2 10 4]))))\r\n\r\n(deftest ^{:task 5} insert-face-cards-3-test\r\n  (is (= [3 \"jack\" \"queen\" \"king\" 10 7] (insert-face-cards [3 10 7]))))\r\n\r\n(deftest ^{:task 5} insert-face-cards-1-test\r\n  (is (= [9 \"jack\" \"queen\" \"king\"] (insert-face-cards [9]))))\r\n\r\n(deftest ^{:task 5} insert-face-cards-empty-test\r\n  (is (= [\"jack\" \"queen\" \"king\"] (insert-face-cards []))))\r\n"
 "(ns etl-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            etl))\r\n\r\n(deftest transform-one-value\r\n  (is (= {\"world\" 1}\r\n         (etl/transform {1 [\"WORLD\"]}))))\r\n\r\n(deftest transform-more-values\r\n  (is (= {\"world\" 1 \"gschoolers\" 1}\r\n         (etl/transform {1 [\"WORLD\" \"GSCHOOLERS\"]}))))\r\n\r\n(deftest more-keys\r\n  (is (= {\"apple\" 1 \"artichoke\" 1 \"boat\" 2 \"ballerina\" 2}\r\n         (etl/transform {1 [\"APPLE\" \"ARTICHOKE\"], 2 [\"BOAT\" \"BALLERINA\"]}))))\r\n\r\n(deftest full-dataset\r\n  (is (= {\"a\"  1 \"b\"  3 \"c\" 3 \"d\" 2 \"e\" 1\r\n          \"f\"  4 \"g\"  2 \"h\" 4 \"i\" 1 \"j\" 8\r\n          \"k\"  5 \"l\"  1 \"m\" 3 \"n\" 1 \"o\" 1\r\n          \"p\"  3 \"q\" 10 \"r\" 1 \"s\" 1 \"t\" 1\r\n          \"u\"  1 \"v\"  4 \"w\" 4 \"x\" 8 \"y\" 4\r\n          \"z\" 10}\r\n         (etl/transform {1  (re-seq #\"\\w\" \"AEIOULNRST\")\r\n                         2  (re-seq #\"\\w\" \"DG\")\r\n                         3  (re-seq #\"\\w\" \"BCMP\")\r\n                         4  (re-seq #\"\\w\" \"FHVWY\")\r\n                         5  (re-seq #\"\\w\" \"K\")\r\n                         8  (re-seq #\"\\w\" \"JX\")\r\n                         10 (re-seq #\"\\w\" \"QZ\")}))))\r\n"
 "(ns flatten-array-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [flatten-array]))\r\n\r\n(deftest flattens-array-of-ints\r\n  (testing \"flattens array with just integers present\"\r\n    (is (= [1 2 3 4 5 6 7 8]\r\n           (flatten-array/flatten [1 [2 3 4 5 6 7] 8])))))\r\n\r\n(deftest five-level-nesting\r\n  (testing \"5 level nested list\"\r\n    (is (= [0 2 2 3 8 100 4 50 -2]\r\n           (flatten-array/flatten [0 2 [[2 3] 8 100 4 [[[50]]]] -2])))))\r\n\r\n(deftest six-level-nesting\r\n  (testing \"6 level nested list\"\r\n    (is (= [1 2 3 4 5 6 7 8]\r\n           (flatten-array/flatten [1 [2 [[3]] [4 [[5]]] 6 7] 8])))))\r\n\r\n(deftest six-level-nested-with-nils\r\n  (testing \"6 level nested list with nil values\"\r\n    (is (= [0 2 2 3 8 100 -2]\r\n           (flatten-array/flatten [0 2 [[2 3] 8 [[100]] nil [[nil]]] -2])))))\r\n\r\n(deftest all-nils-list\r\n  (testing \"All values in nested list are nil\"\r\n    (is (empty?\r\n         (flatten-array/flatten [nil [[[nil]]] nil nil [[nil nil] nil] nil])))))\r\n"
 "(ns gigasecond-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            gigasecond))\r\n\r\n(deftest from-apr-25-2011\r\n  (is (= [2043 1 1] (gigasecond/from 2011 4 25))))\r\n\r\n(deftest from-jun-13-1977\r\n  (is (= [2009 2 19] (gigasecond/from 1977 6 13))))\r\n\r\n(deftest from-jul-19-1959\r\n  (is (= [1991 3 27] (gigasecond/from 1959 7 19))))\r\n\r\n;; customize this to test your birthday and find your gigasecond date:\r\n;; (deftest your-birthday\r\n;;   (is (= [year2 month2 day2] (gigasecond/from year1 month1 day1))))\r\n"
 "(ns go-counting-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [go-counting :as g]))\r\n\r\n(def example\r\n  [\"  B  \"\r\n   \" B B \"\r\n   \"B W B\"\r\n   \" W W \"\r\n   \"  W  \"])\r\n\r\n(deftest territory\r\n  (is (= (g/territory example [0 1])\r\n         {:stones #{[0 0] [0 1] [1 0]} :owner :black}))\r\n  (is (= (g/territory example [2 3])\r\n         {:stones #{[2 3]} :owner :white}))\r\n  (is (= (g/territory example [1 4])\r\n         {:stones #{[0 3] [0 4] [1 4]} :owner nil}))\r\n  (is (= (g/territory example [1 1])\r\n         {:stones #{} :owner nil}))\r\n  (is (thrown? Throwable (g/territory example [-1 1])))\r\n  (is (thrown? Throwable (g/territory example [5 1])))\r\n  (is (thrown? Throwable (g/territory example [1 -1])))\r\n  (is (thrown? Throwable (g/territory example [1 5]))))\r\n\r\n(deftest territories\r\n  (is (= (g/territories [\" \"])\r\n         {:black-territory #{}\r\n          :white-territory #{}\r\n          :null-territory  #{[0 0]}}))\r\n  (is (= (g/territories [\" BW \" \" BW \"])\r\n         {:black-territory #{[0 0] [0 1]}\r\n          :white-territory #{[3 0] [3 1]}\r\n          :null-territory  #{}}))\r\n  (is (= (g/territories [\" B \"])\r\n         {:black-territory #{[0 0] [2 0]}\r\n          :white-territory #{}\r\n          :null-territory  #{}})))\r\n"
 "(ns grade-school-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            grade-school))\r\n\r\n(def db {})\r\n\r\n(deftest add-student\r\n  (is (= {2 [\"Aimee\"]} (grade-school/add db \"Aimee\" 2))))\r\n\r\n(deftest add-more-students-in-same-class\r\n  (is (= {2 [\"James\", \"Blair\", \"Paul\"]}\r\n         (-> db\r\n             (grade-school/add \"James\" 2)\r\n             (grade-school/add \"Blair\" 2)\r\n             (grade-school/add \"Paul\" 2)))))\r\n\r\n(deftest add-students-to-different-grades\r\n  (is (= {3 [\"Chelsea\"] 7 [\"Logan\"]}\r\n         (-> db\r\n             (grade-school/add \"Chelsea\" 3)\r\n             (grade-school/add \"Logan\" 7)))))\r\n\r\n(deftest get-students-in-a-grade\r\n  (is (= [\"Franklin\", \"Bradley\"]\r\n         (-> db\r\n             (grade-school/add \"Franklin\" 5)\r\n             (grade-school/add \"Bradley\" 5)\r\n             (grade-school/add \"Jeff\" 1)\r\n             (grade-school/grade 5)))))\r\n\r\n(deftest get-students-in-a-non-existent-grade\r\n  (is (= [] (grade-school/grade db 1))))\r\n\r\n(deftest sorted-grade-school\r\n  (is (= (sorted-map 3 [\"Kyle\"]\r\n                     4 [\"Christopher\" \"Jennifer\"]\r\n                     6 [\"Kareem\"])\r\n         (-> db\r\n             (grade-school/add \"Jennifer\" 4)\r\n             (grade-school/add \"Kareem\" 6)\r\n             (grade-school/add \"Christopher\" 4)\r\n             (grade-school/add \"Kyle\" 3)\r\n             (grade-school/sorted)))))\r\n\r\n(deftest sorted-grade_school-keys-sorted\r\n  (is (= [3 4 6]\r\n         (-> db\r\n             (grade-school/add \"Jennifer\" 4)\r\n             (grade-school/add \"Kareem\" 6)\r\n             (grade-school/add \"Christopher\" 4)\r\n             (grade-school/add \"Kyle\" 3)\r\n             (grade-school/sorted)\r\n             (keys)))))\r\n"
 "(ns grains-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            grains))\r\n\r\n(deftest square-1\r\n  (is (= 1 (grains/square 1))))\r\n\r\n(deftest square-2\r\n  (is (= 2 (grains/square 2))))\r\n\r\n(deftest square-3\r\n  (is (= 4 (grains/square 3))))\r\n\r\n(deftest square-4\r\n  (is (= 8 (grains/square 4))))\r\n\r\n(deftest square-16\r\n  (is (= 32768 (grains/square 16))))\r\n\r\n(deftest square-32\r\n  (is (= 2147483648 (grains/square 32))))\r\n\r\n(deftest square-64\r\n  (is (= 9223372036854775808 (grains/square 64))))\r\n\r\n(deftest total-grains\r\n  (is (= 18446744073709551615  (grains/total))))\r\n"
 "(ns hamming-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            hamming))\r\n\r\n(deftest no-difference-between-empty-strands\r\n  (is (= 0 (hamming/distance \"\" \"\"))))\r\n\r\n(deftest no-difference-between-identical-strands\r\n  (is (= 0 (hamming/distance \"GGACTGA\" \"GGACTGA\"))))\r\n\r\n(deftest complete-distance-in-small-strand\r\n  (is (= 3 (hamming/distance \"ACT\" \"GGA\"))))\r\n\r\n(deftest small-distance-in-middle-somewhere\r\n  (is (= 1 (hamming/distance \"GGACG\" \"GGTCG\"))))\r\n\r\n(deftest larger-distance\r\n  (is (= 2 (hamming/distance \"ACCAGGG\" \"ACTATGG\"))))\r\n\r\n(deftest undefined-when-lengths-are-different\r\n  (is (= nil (hamming/distance \"AAAC\" \"TAGGGGAGGCTAGCGGTAGGAC\")))\r\n  (is (= nil (hamming/distance \"GACTACGGACAGGGTAACATAG\" \"GACA\"))))\r\n"
 "(ns hello-world-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            hello-world))\r\n\r\n(deftest hello-world-test\r\n  (is (= \"Hello, World!\" (hello-world/hello))))\r\n"
 "(ns hexadecimal-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            hexadecimal))\r\n\r\n(deftest hex-to-int-test\r\n  (is (= 1 (hexadecimal/hex-to-int \"1\")))\r\n  (is (= 12 (hexadecimal/hex-to-int \"c\")))\r\n  (is (= 16 (hexadecimal/hex-to-int \"10\")))\r\n  (is (= 175 (hexadecimal/hex-to-int \"af\")))\r\n  (is (= 256 (hexadecimal/hex-to-int \"100\")))\r\n  (is (= 105166 (hexadecimal/hex-to-int \"19ace\")))\r\n  (is (= 0 (hexadecimal/hex-to-int \"carrot\")))\r\n  (is (= 0 (hexadecimal/hex-to-int \"000000\")))\r\n  (is (= 16777215 (hexadecimal/hex-to-int \"ffffff\")))\r\n  (is (= 16776960 (hexadecimal/hex-to-int \"ffff00\"))))\r\n"
 "(ns interest-is-interesting-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            interest-is-interesting))\r\n\r\n(deftest ^{:task 1} minimal-first-interest-rate-test\r\n  (is (= 0.5 (interest-is-interesting/interest-rate 0M))))\r\n\r\n(deftest ^{:task 1} tiny-first-interest-rate-test\r\n  (is (= 0.5 (interest-is-interesting/interest-rate 0.000001M))))\r\n\r\n(deftest ^{:task 1} maximum-first-interest-rate-test\r\n  (is (= 0.5 (interest-is-interesting/interest-rate 999.9999M))))\r\n\r\n(deftest ^{:task 1} minimal-second-interest-rate-test\r\n  (is (= 1.621 (interest-is-interesting/interest-rate 1000.0M))))\r\n\r\n(deftest ^{:task 1} tiny-second-interest-rate-test\r\n  (is (= 1.621 (interest-is-interesting/interest-rate 1000.0001M))))\r\n\r\n(deftest ^{:task 1} maximum-second-interest-rate-test\r\n  (is (= 1.621 (interest-is-interesting/interest-rate 4999.9990M))))\r\n\r\n(deftest ^{:task 1} minimal-third-interest-rate-test\r\n  (is (= 2.475 (interest-is-interesting/interest-rate 5000.0000M))))\r\n\r\n(deftest ^{:task 1} tiny-third-interest-rate-test\r\n  (is (= 2.475 (interest-is-interesting/interest-rate 5000.0001M))))\r\n\r\n(deftest ^{:task 1} large-third-interest-rate-test\r\n  (is (= 2.475 (interest-is-interesting/interest-rate 5639998.742909M))))\r\n\r\n(deftest ^{:task 1} minimal-negative-interest-rate-test\r\n  (is (= -3.213 (interest-is-interesting/interest-rate -0.000001M))))\r\n\r\n(deftest ^{:task 1} small-negative-interest-rate-test\r\n  (is (= -3.213 (interest-is-interesting/interest-rate -0.123M))))\r\n\r\n(deftest ^{:task 1} regular-negative-interest-rate-test\r\n  (is (= -3.213 (interest-is-interesting/interest-rate -300.0M))))\r\n\r\n(deftest ^{:task 1} large-negative-interest-rate-test\r\n  (is (= -3.213 (interest-is-interesting/interest-rate -152964.231M))))\r\n\r\n(deftest ^{:task 2} annual-balance-update-empty-balance-test\r\n  (is (= 0.0000M (interest-is-interesting/annual-balance-update 0.0M))))\r\n\r\n(deftest ^{:task 2} annual-balance-update-small-positive-balance-test\r\n  (is (= 0.000001005M (interest-is-interesting/annual-balance-update 0.000001M))))\r\n\r\n(deftest ^{:task 2} annual-balance-update-average-positive-balance-test\r\n  (is (= 1016.210000M (interest-is-interesting/annual-balance-update 1000.0M))))\r\n\r\n(deftest ^{:task 2} annual-balance-update-large-positive-balance-test\r\n  (is (= 1016.210101621M (interest-is-interesting/annual-balance-update 1000.0001M))))\r\n\r\n(deftest ^{:task 2} annual-balance-update-huge-positive-balance-test\r\n  (is (= 920352587.26744292868451875M (interest-is-interesting/annual-balance-update 898124017.826243404425M))))\r\n\r\n(deftest ^{:task 2} annual-balance-update-small-negative-balance-test\r\n  (is (= -0.12695199M (interest-is-interesting/annual-balance-update -0.123M))))\r\n\r\n(deftest ^{:task 2} annual-balance-update-large-negative-balance-test\r\n  (is (= -157878.97174203M (interest-is-interesting/annual-balance-update -152964.231M))))\r\n\r\n(deftest ^{:task 3} amount-to-donate-empty-balance-test\r\n  (is (= 0 (interest-is-interesting/amount-to-donate 0.0M 2.0))))\r\n\r\n(deftest ^{:task 3} amount-to-donate-small-positive-balance-test\r\n  (is (= 0 (interest-is-interesting/amount-to-donate 0.000001M 2.1))))\r\n\r\n(deftest ^{:task 3} amount-to-donate-average-positive-balance-test\r\n  (is (= 40 (interest-is-interesting/amount-to-donate 1000.0M 2.0))))\r\n\r\n(deftest ^{:task 3} amount-to-donate-large-positive-balance-test\r\n  (is (= 19 (interest-is-interesting/amount-to-donate 1000.0001M 0.99))))\r\n\r\n(deftest ^{:task 3} amount-to-donate-huge-positive-balance-test\r\n  (is (= 47600572 (interest-is-interesting/amount-to-donate 898124017.826243404425M 2.65))))\r\n\r\n(deftest ^{:task 3} amount-to-donate-small-negative-balance-test\r\n  (is (= 0 (interest-is-interesting/amount-to-donate -0.123M 3.33))))\r\n\r\n(deftest ^{:task 3} amount-to-donate-large-negative-balance-test\r\n  (is (= 0 (interest-is-interesting/amount-to-donate -152964.231M 5.4))))\r\n"
 "(ns international-calling-connoisseur-test\r\n  (:require [clojure.test :refer [deftest testing is]]\r\n            international-calling-connoisseur))\r\n\r\n(deftest ^{:task 1} map-count-is-3\r\n  (is (= 3 (count international-calling-connoisseur/countries))))\r\n\r\n(deftest ^{:task 1} United-States-of-America-is-1\r\n  (is (= \"United States of America\" (get international-calling-connoisseur/countries 1))))\r\n\r\n(deftest ^{:task 1} Brazil-is-55\r\n  (is (= \"Brazil\" (get international-calling-connoisseur/countries 55))))\r\n\r\n(deftest ^{:task 1} India-is-55\r\n  (is (= \"India\" (get international-calling-connoisseur/countries 91))))\r\n\r\n(deftest ^{:task 2} add-country-to-empty-map-single\r\n  (is (= 1 (count (international-calling-connoisseur/add-country {} 44 \"United Kingdom\")))))\r\n\r\n(deftest ^{:task 2} add-country-to-empty-map-44-is-United-Kingdom\r\n  (is (= \"United Kingdom\" (get (international-calling-connoisseur/add-country {} 44 \"United Kingdom\") 44))))\r\n\r\n(deftest ^{:task 2} add-country-to-country-map-count-is-4\r\n  (is (= 4 (count (international-calling-connoisseur/add-country international-calling-connoisseur/countries 44 \"United Kingdom\")))))\r\n\r\n(deftest ^{:task 2} add-country-to-country-map-1-is-United-States-of-America\r\n  (is (= \"United States of America\" (get (international-calling-connoisseur/add-country international-calling-connoisseur/countries 44 \"United Kingdom\") 1))))\r\n\r\n(deftest ^{:task 2} add-country-to-country-map-44-is-United-Kingdom\r\n  (is (= \"United Kingdom\" (get (international-calling-connoisseur/add-country international-calling-connoisseur/countries 44 \"United Kingdom\") 44))))\r\n\r\n(deftest ^{:task 2} add-country-to-country-map-55-is-Brazil\r\n  (is (= \"Brazil\" (get (international-calling-connoisseur/add-country international-calling-connoisseur/countries 44 \"United Kingdom\") 55))))\r\n\r\n(deftest ^{:task 2} add-country-to-country-map-91-is-India\r\n  (is (= \"India\" (get (international-calling-connoisseur/add-country international-calling-connoisseur/countries 44 \"United Kingdom\") 91))))\r\n\r\n(deftest ^{:task 3} get-country-name-from-map\r\n  (is (= \"Brazil\" (international-calling-connoisseur/country-name international-calling-connoisseur/countries 55))))\r\n\r\n(deftest ^{:task 3} get-country-name-for-non-existent-country\r\n  (is (nil? (international-calling-connoisseur/country-name international-calling-connoisseur/countries 999))))\r\n\r\n(deftest ^{:task 5} check-country-exists\r\n  (is (true? (international-calling-connoisseur/code-exists? international-calling-connoisseur/countries 55))))\r\n\r\n(deftest ^{:task 5} check-non-existent-country-exists\r\n  (is (false? (international-calling-connoisseur/code-exists? international-calling-connoisseur/countries 999))))\r\n\r\n(deftest ^{:task 4} update-name-in-map-count-is-3\r\n  (is (= 3 (count (international-calling-connoisseur/update-country international-calling-connoisseur/countries 1 \"les États-Unis\")))))\r\n\r\n(deftest ^{:task 4} update-name-in-map-1-is-les-Etats-Unis\r\n  (is (= \"les États-Unis\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 1 \"les États-Unis\") 1))))\r\n\r\n(deftest ^{:task 4} update-name-in-map-55-is-Brazil\r\n  (is (= \"Brazil\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 1 \"les États-Unis\") 55))))\r\n\r\n(deftest ^{:task 4} update-name-in-map-91-is-India\r\n  (is (= \"India\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 1 \"les États-Unis\") 91))))\r\n\r\n(deftest ^{:task 6} update-non-existent-name-in-map-count-is-3\r\n  (is (= 3 (count (international-calling-connoisseur/update-country international-calling-connoisseur/countries 999 \"Newlands\")))))\r\n\r\n(deftest ^{:task 6} update-non-existent-name-in-map-1-is-United-States-of-America\r\n  (is (= \"United States of America\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 999 \"Newlands\") 1))))\r\n\r\n(deftest ^{:task 6} update-non-existent-name-in-map-55-is-Brazil\r\n  (is (= \"Brazil\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 999 \"Newlands\") 55))))\r\n\r\n(deftest ^{:task 6} update-non-existent-name-in-map-91-is-India\r\n  (is (= \"India\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 999 \"Newlands\") 91))))\r\n\r\n(deftest ^{:task 7} remove-country-from-map-count-is-2\r\n  (is (= 2 (count (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 91)))))\r\n\r\n(deftest ^{:task 7} remove-country-from-map-1-is-United-States-of-America\r\n  (is (= \"United States of America\" (get (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 44) 1))))\r\n\r\n(deftest ^{:task 7} remove-country-from-map-55-is-Brazil\r\n  (is (= \"Brazil\" (get (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 44) 55))))\r\n\r\n(deftest ^{:task 7} remove-non-existent-country-from-map-count-is-3\r\n  (is (= 3 (count (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 999)))))\r\n\r\n(deftest ^{:task 7} remove-non-existent-country-from-map-1-is-United-States-of-America\r\n  (is (= \"United States of America\" (get (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 999) 1))))\r\n\r\n(deftest ^{:task 7} remove-non-existent-country-from-map-55-is-Brazil\r\n  (is (= \"Brazil\" (get (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 999) 55))))\r\n\r\n(deftest ^{:task 7} remove-non-existent-country-from-map-91-is-India\r\n  (is (= \"India\" (get (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 999) 91))))\r\n\r\n(deftest ^{:task 8} longest-name\r\n  (is (= \"United States of America\" (international-calling-connoisseur/longest-name international-calling-connoisseur/countries))))\r\n\r\n(deftest ^{:task 8} longest-name-empty-map\r\n  (is (nil? (international-calling-connoisseur/longest-name {}))))"
 "(ns isbn-verifier-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [isbn-verifier :refer [isbn?]]))\r\n\r\n(deftest valid-isbn-number\r\n  (is (= true (isbn? \"3-598-21508-8\"))))\r\n\r\n(deftest invalid-isbn-check-digit\r\n  (is (= false (isbn? \"3-598-21508-9\"))))\r\n\r\n(deftest valid-isbn-number-with-a-check-digit-of-10\r\n  (is (= true (isbn? \"3-598-21507-X\"))))\r\n\r\n(deftest check-digit-is-a-character-other-than-X\r\n  (is (= false (isbn? \"3-598-21507-A\"))))\r\n\r\n(deftest invalid-character-in-isbn\r\n  (is (= false (isbn? \"3-598-2K507-0\"))))\r\n\r\n(deftest X-is-only-valid-as-a-check-digit\r\n  (is (= false (isbn? \"3-598-2X507-9\"))))\r\n\r\n(deftest valid-isbn-without-separating-dashes\r\n  (is (= true (isbn? \"3598215088\"))))\r\n\r\n(deftest isbn-without-separating-dashes-and-X-as-check-digit\r\n  (is (= true (isbn? \"359821507X\"))))\r\n\r\n(deftest isbn-without-check-digit-and-dashes\r\n  (is (= false (isbn? \"359821507\"))))\r\n\r\n(deftest too-long-isbn-and-no-dashes\r\n  (is (= false (isbn? \"3598215078X\"))))\r\n\r\n(deftest too-short-isbn\r\n  (is (= false (isbn? \"00\"))))\r\n\r\n(deftest isbn-without-check-digit\r\n  (is (= false (isbn? \"3-598-21507\"))))\r\n\r\n(deftest too-long-isbn\r\n  (is (= false (isbn? \"3-598-21507-XX\"))))\r\n\r\n(deftest check-digit-of-X-should-not-be-used-for-0\r\n  (is (= false (isbn? \"3-598-21515-X\"))))\r\n"
 "(ns isogram-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            isogram))\r\n\r\n(deftest test-isograms\r\n  (is (isogram/isogram? \"duplicates\"))\r\n  (is (isogram/isogram? \"subdermatoglyphic\"))\r\n  (is (isogram/isogram? \"thumbscrew-japingly\"))\r\n  (is (isogram/isogram? \"Hjelmqvist-Gryb-Zock-Pfund-Wax\"))\r\n  (is (isogram/isogram? \"Heizölrückstoßabdämpfung\"))\r\n  (is (isogram/isogram? \"Emily Jung Schwartzkopf\")))\r\n\r\n(deftest test-non-isograms\r\n  (is (not (isogram/isogram? \"eleven\")))\r\n  (is (not (isogram/isogram? \"Alphabet\")))\r\n  (is (not (isogram/isogram? \"the quick brown fox\")))\r\n  (is (not (isogram/isogram? \"éléphant\"))))\r\n"
 "(ns kindergarten-garden-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            kindergarten-garden))\r\n\r\n(deftest garden-test\r\n  (is (= [:radishes :clover :grass :grass]\r\n         (:alice (kindergarten-garden/garden \"RC\\nGG\"))))\r\n  (is (= [:violets :clover :radishes :clover]\r\n         (:alice (kindergarten-garden/garden \"VC\\nRC\")))))\r\n\r\n(deftest small-garden-test\r\n  (let [small-garden (kindergarten-garden/garden \"VVCG\\nVVRC\")]\r\n    (is (= [:clover :grass :radishes :clover] (:bob small-garden)))))\r\n\r\n(deftest medium-garden-test\r\n  (let [medium-garden (kindergarten-garden/garden \"VVCCGG\\nVVCCGG\")]\r\n    (is (= [:clover :clover :clover :clover] (:bob medium-garden)))\r\n    (is (= [:grass :grass :grass :grass] (:charlie medium-garden)))))\r\n\r\n(deftest full-garden-test\r\n  (let [string \"VRCGVVRVCGGCCGVRGCVCGCGV\\nVRCCCGCRRGVCGCRVVCVGCGCV\"\r\n        full-garden (kindergarten-garden/garden string)]\r\n    (is (= [:violets  :radishes :violets  :radishes] (:alice   full-garden)))\r\n    (is (= [:clover   :grass    :clover   :clover]   (:bob     full-garden)))\r\n    (is (= [:violets  :violets  :clover   :grass]    (:charlie full-garden)))\r\n    (is (= [:radishes :violets  :clover   :radishes] (:david   full-garden)))\r\n    (is (= [:clover   :grass    :radishes :grass]    (:eve     full-garden)))\r\n    (is (= [:grass    :clover   :violets  :clover]   (:fred    full-garden)))\r\n    (is (= [:clover   :grass    :grass    :clover]   (:ginny   full-garden)))\r\n    (is (= [:violets  :radishes :radishes :violets]  (:harriet full-garden)))\r\n    (is (= [:grass    :clover   :violets  :clover]   (:ileana  full-garden)))\r\n    (is (= [:violets  :clover   :violets  :grass]    (:joseph  full-garden)))\r\n    (is (= [:grass    :clover   :clover   :grass]    (:kincaid full-garden)))\r\n    (is (= [:grass    :violets  :clover   :violets]  (:larry   full-garden)))))\r\n\r\n(deftest surprise-garden-test\r\n  (let [string   \"VCRRGVRG\\nRVGCCGCV\"\r\n        students [\"Samantha\" \"Patricia\" \"Xander\" \"Roger\"]\r\n        surprise-garden (kindergarten-garden/garden string students)]\r\n    (is (= [:violets  :clover   :radishes :violets]\r\n           (:patricia surprise-garden)))\r\n    (is (= [:radishes :radishes :grass    :clover]\r\n           (:roger    surprise-garden)))\r\n    (is (= [:grass    :violets  :clover   :grass]\r\n           (:samantha surprise-garden)))\r\n    (is (= [:radishes :grass    :clover   :violets]\r\n           (:xander   surprise-garden)))))\r\n"
 "(ns largest-series-product-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [largest-series-product :as lsp]))\r\n\r\n(deftest largest-series-tests\r\n  (testing \"can find the largest product of 2 with numbers in order\"\r\n    (is (= 72 (lsp/largest-product 2 \"0123456789\"))))\r\n  (testing \"can find the largest product of 2\"\r\n    (is (= 48 (lsp/largest-product 2 \"576802143\"))))\r\n  (testing \"finds the largest product if span equals length\"\r\n    (is (= 18 (lsp/largest-product 2 \"29\"))))\r\n  (testing \"can find the largest product of 3 with numbers in order\"\r\n    (is (= 504 (lsp/largest-product 3 \"0123456789\"))))\r\n  (testing \"can find the largest product of 3\"\r\n    (is (= 270 (lsp/largest-product 3 \"1027839564\"))))\r\n  (testing \"can find the largest product of 5 with numbers in order\"\r\n    (is (= 15120 (lsp/largest-product 5 \"0123456789\"))))\r\n  (testing \"can get the largest product of a big number\"\r\n    (is (= 23520\r\n           (let [ds \"73167176531330624919225119674426574742355349194934\"]\r\n             (lsp/largest-product 6 ds)))))\r\n  (testing \"can get the largest product of a big number II\"\r\n    (is (= 28350\r\n           (let [ds \"52677741234314237566414902593461595376319419139427\"]\r\n             (lsp/largest-product 6 ds)))))\r\n  (testing \"can get the largest product of a big number (Project Euler)\"\r\n    (is (= 23514624000\r\n           (let [ds \"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\"]\r\n             (lsp/largest-product 13 ds)))))\r\n  (testing \"reports zero if the only digits are zero\"\r\n    (is (= 0 (lsp/largest-product 2 \"0000\"))))\r\n  (testing \"reports zero if all spans include zero\"\r\n    (is (= 0 (lsp/largest-product 3 \"99099\"))))\r\n  (testing \"rejects span longer than string length\"\r\n    (is (thrown? Throwable (lsp/largest-product 4 \"123\"))))\r\n  (testing \"rejects empty string and nonzero span\"\r\n    (is (thrown? Throwable (lsp/largest-product 1 \"\"))))\r\n  (testing \"rejects invalid character in digits\"\r\n    (is (thrown? Throwable (lsp/largest-product 2 \"1234a5\"))))\r\n  (testing \"rejects negative span\"\r\n    (is (thrown? Throwable (lsp/largest-product -1 \"12345\")))))\r\n"
 "(ns leap-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            leap))\r\n\r\n(deftest year-not-divisible-by-4\r\n  (is (not (leap/leap-year? 2015))))\r\n\r\n(deftest year-divisible-by-2-but-not-4\r\n  (is (not (leap/leap-year? 1970))))\r\n\r\n(deftest year-divisible-by-4-but-not-100\r\n  (is (leap/leap-year? 1996)))\r\n\r\n(deftest year-divisible-by-4-and-5\r\n  (is (leap/leap-year? 1960)))\r\n\r\n(deftest year-divisible-by-100-but-not-400\r\n  (is (not (leap/leap-year? 2100))))\r\n\r\n(deftest year-divisible-by-100-but-not-by-3\r\n  (is (not (leap/leap-year? 1900))))\r\n\r\n(deftest year-divisible-by-400\r\n  (is (leap/leap-year? 2000)))\r\n\r\n(deftest year-divisible-by-400-but-not-125\r\n  (is (leap/leap-year? 2400)))\r\n\r\n(deftest year-divisible-by-200-but-not-by-400\r\n  (is (not (leap/leap-year? 1800))))\r\n"
 "(ns log-levels-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            log-levels))\r\n\r\n(deftest ^{:task 1} message-error-test\r\n  (is (= \"Stack overflow\" (log-levels/message \"[ERROR]: Stack overflow\"))))\r\n\r\n(deftest ^{:task 1} message-warning-test\r\n  (is (= (log-levels/message \"[WARNING]: Disk almost full\") \"Disk almost full\")))\r\n\r\n(deftest ^{:task 1} message-info-test\r\n  (is (= (log-levels/message \"[INFO]: File moved\") \"File moved\")))\r\n\r\n(deftest ^{:task 1} message-trim-whitespace-test\r\n  (is (= \"Timezone not set\" (log-levels/message \"[WARNING]:   \\tTimezone not set  \\r\\n\"))))\r\n\r\n(deftest ^{:task 2} log-level-error-test\r\n  (is (= \"error\" (log-levels/log-level \"[ERROR]: Disk full\"))))\r\n\r\n(deftest ^{:task 2} log-level-warning-test\r\n  (is (= \"warning\" (log-levels/log-level \"[WARNING]: Unsafe password\"))))\r\n\r\n(deftest ^{:task 2} log-level-info-test\r\n  (is (= \"info\" (log-levels/log-level \"[INFO]: Timezone changed\"))))\r\n\r\n(deftest ^{:task 3} reformat-error-test\r\n  (is (= \"Segmentation fault (error)\" (log-levels/reformat \"[ERROR]: Segmentation fault\"))))\r\n\r\n(deftest ^{:task 3} reformat-warning-test\r\n  (is (= \"Decreased performance (warning)\" (log-levels/reformat \"[WARNING]: Decreased performance\"))))\r\n\r\n(deftest ^{:task 3} reformat-info-test\r\n  (is (= \"Disk defragmented (info)\" (log-levels/reformat \"[INFO]: Disk defragmented\"))))\r\n\r\n(deftest ^{:task 3} reformat-trim-whitespace-test\r\n  (is (= \"Corrupt disk (error)\" (log-levels/reformat \"[ERROR]: \\t Corrupt disk\\t \\t \\r\\n\"))))\r\n"
 "(ns lucians-luscious-lasagna-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            lucians-luscious-lasagna))\r\n\r\n(deftest ^{:task 1} expected-time-test\r\n  (is (= 40 lucians-luscious-lasagna/expected-time)))\r\n\r\n(deftest ^{:task 2} remaining-time-test\r\n  (is (= 15 (lucians-luscious-lasagna/remaining-time 25))))\r\n\r\n(deftest ^{:task 3} prep-time-one-layer-test\r\n  (is (= 2 (lucians-luscious-lasagna/prep-time 1))))\r\n\r\n(deftest ^{:task 3} prep-time-multiple-layers-test\r\n  (is (= 8 (lucians-luscious-lasagna/prep-time 4))))\r\n\r\n(deftest ^{:task 4} total-time-one-layer-test\r\n  (is (= 32 (lucians-luscious-lasagna/total-time 1 30))))\r\n\r\n(deftest ^{:task 4} total-time-multiple-layers-test\r\n  (is (= 16 (lucians-luscious-lasagna/total-time 4 8))))"
 "(ns luhn-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            luhn))\r\n\r\n(deftest single-digit-strings\r\n    (is (false? (luhn/valid? \"1\"))))\r\n\r\n(deftest single-zero\r\n    (is (false? (luhn/valid? \"0\"))))\r\n\r\n(deftest sin\r\n    (is (true? (luhn/valid? \" 5 9 \"))))\r\n\r\n(deftest Canadian-SIN\r\n    (is (true? (luhn/valid? \"046 454 286\"))))\r\n\r\n(deftest invalid-Canadian-SIN\r\n    (is (false? (luhn/valid? \"046 454 287\"))))\r\n\r\n(deftest invalid-credit-card\r\n    (is (false? (luhn/valid? \"8273 1232 7352 0569\"))))\r\n\r\n(deftest non-digit-added\r\n    (is (false? (luhn/valid? \"046a 454 286\"))))\r\n\r\n(deftest punctuation\r\n    (is (false? (luhn/valid? \"055-444-285\"))))\r\n\r\n(deftest symbols\r\n    (is (false? (luhn/valid? \"055£ 444$ 285\"))))\r\n\r\n(deftest single-zero-with-space\r\n    (is (false? (luhn/valid? \" 0\"))))\r\n\r\n(deftest lots-of-zeros\r\n    (is (true? (luhn/valid? \" 00000\"))))\r\n\r\n(deftest another-valid-sin\r\n    (is (true? (luhn/valid? \"055 444 285\"))))\r\n\r\n(deftest nine-doubled\r\n    (is (true? (luhn/valid? \"091\"))))\r\n"
 "(ns matching-brackets-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            matching-brackets))\r\n\r\n(deftest paired-square\r\n  (is (matching-brackets/valid? \"[]\") \"paired square brackets\"))\r\n\r\n(deftest empty-string\r\n  (is (matching-brackets/valid? \"\") \"empty string\"))\r\n\r\n(deftest unpaired-brackets\r\n  (is (false? (matching-brackets/valid? \"[[\")) \"unpaired brackets\"))\r\n\r\n(deftest wrong-ordered-brackets\r\n  (is (false? (matching-brackets/valid? \"}{\")) \"wrong ordered brackets\"))\r\n\r\n(deftest paired-with-whitespace\r\n  (is (matching-brackets/valid? \"{ }\") \"paired with whitespace\"))\r\n\r\n(deftest simple-nested-brackets\r\n  (is (matching-brackets/valid? \"{[]}\")\r\n      \"simple nested brackets\"))\r\n\r\n(deftest several-paired-brackets\r\n  (is (matching-brackets/valid? \"{}[]\")\r\n      \"several paired brackets\"))\r\n\r\n(deftest paired-and-nested-brackets\r\n  (is (matching-brackets/valid? \"([{}({}[])])\")\r\n      \"paired and nested brackets\"))\r\n\r\n(deftest unopened-closing-brackets\r\n  (is (false? (matching-brackets/valid? \"{[)][]}\"))\r\n      \"unopened closing brackets\"))\r\n \r\n(deftest unpaired-and-nested-brackets\r\n  (is (false? (matching-brackets/valid? \"([{])\"))\r\n      \"unpaired and nested brackets\"))\r\n\r\n(deftest paired-and-wrong-nested-brackets\r\n  (is (false? (matching-brackets/valid? \"[({]})\"))\r\n      \"paired and wrong nested brackets\"))\r\n\r\n(deftest math-expression\r\n  (is (matching-brackets/valid? \"(((185 + 223.85) * 15) - 543)/2\")\r\n      \"math expression\"))\r\n\r\n(deftest complex-latex-expression\r\n  (is (matching-brackets/valid? \"\\\\\\\\left(\\\\\\\\begin{array}{cc} \\\\\\\\frac{1}{3} & x\\\\\\\\\\\\\\\\ \\\\\\\\mathrm{e}^{x} &... x^2 \\\\\\\\end{array}\\\\\\\\right)\")\r\n      \"complex latex expression\"))\r\n"
 "(ns meetup-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            meetup))\r\n\r\n(deftest monteenth-of-may-2013\r\n  (is (= [2013 5 13] (meetup/meetup 5 2013 :monday :teenth))))\r\n\r\n(deftest monteenth-of-august-2013\r\n  (is (= [2013 8 19] (meetup/meetup 8 2013 :monday :teenth))))\r\n\r\n(deftest monteenth-of-september-2013\r\n  (is (= [2013 9 16] (meetup/meetup 9 2013 :monday :teenth))))\r\n\r\n(deftest tuesteenth-of-march-2013\r\n  (is (= [2013 3 19] (meetup/meetup 3 2013 :tuesday :teenth))))\r\n\r\n(deftest tuesteenth-of-april-2013\r\n  (is (= [2013 4 16] (meetup/meetup 4 2013 :tuesday :teenth))))\r\n\r\n(deftest tuesteenth-of-august-2013\r\n  (is (= [2013 8 13] (meetup/meetup 8 2013 :tuesday :teenth))))\r\n\r\n(deftest wednesteenth-of-january-2013\r\n  (is (= [2013 1 16] (meetup/meetup 1 2013 :wednesday :teenth))))\r\n\r\n(deftest wednesteenth-of-february-2013\r\n  (is (= [2013 2 13] (meetup/meetup 2 2013 :wednesday :teenth))))\r\n\r\n(deftest wednesteenth-of-june-2013\r\n  (is (= [2013 6 19] (meetup/meetup 6 2013 :wednesday :teenth))))\r\n\r\n(deftest thursteenth-of-may-2013\r\n  (is (= [2013 5 16] (meetup/meetup 5 2013 :thursday :teenth))))\r\n\r\n(deftest thursteenth-of-june-2013\r\n  (is (= [2013 6 13] (meetup/meetup 6 2013 :thursday :teenth))))\r\n\r\n(deftest thursteenth-of-september-2013\r\n  (is (= [2013 9 19] (meetup/meetup 9 2013 :thursday :teenth))))\r\n\r\n(deftest friteenth-of-april-2013\r\n  (is (= [2013 4 19] (meetup/meetup 4 2013 :friday :teenth))))\r\n\r\n(deftest friteenth-of-august-2013\r\n  (is (= [2013 8 16] (meetup/meetup 8 2013 :friday :teenth))))\r\n\r\n(deftest friteenth-of-september-2013\r\n  (is (= [2013 9 13] (meetup/meetup 9 2013 :friday :teenth))))\r\n\r\n(deftest saturteenth-of-february-2013\r\n  (is (= [2013 2 16] (meetup/meetup 2 2013 :saturday :teenth))))\r\n\r\n(deftest saturteenth-of-april-2013\r\n  (is (= [2013 4 13] (meetup/meetup 4 2013 :saturday :teenth))))\r\n\r\n(deftest saturteenth-of-october-2013\r\n  (is (= [2013 10 19] (meetup/meetup 10 2013 :saturday :teenth))))\r\n\r\n(deftest sunteenth-of-may-2013\r\n  (is (= [2013 5 19] (meetup/meetup 5 2013 :sunday :teenth))))\r\n\r\n(deftest sunteenth-of-june-2013\r\n  (is (= [2013 6 16] (meetup/meetup 6 2013 :sunday :teenth))))\r\n\r\n(deftest sunteenth-of-october-2013\r\n  (is (= [2013 10 13] (meetup/meetup 10 2013 :sunday :teenth))))\r\n\r\n(deftest first-monday-of-march-2013\r\n  (is (= [2013 3 4] (meetup/meetup 3 2013 :monday :first))))\r\n\r\n(deftest first-monday-of-april-2013\r\n  (is (= [2013 4 1] (meetup/meetup 4 2013 :monday :first))))\r\n\r\n(deftest first-tuesday-of-may-2013\r\n  (is (= [2013 5 7] (meetup/meetup 5 2013 :tuesday :first))))\r\n\r\n(deftest first-tuesday-of-june-2013\r\n  (is (= [2013 6 4] (meetup/meetup 6 2013 :tuesday :first))))\r\n\r\n(deftest first-wednesday-of-july-2013\r\n  (is (= [2013 7 3] (meetup/meetup 7 2013 :wednesday :first))))\r\n\r\n(deftest first-wednesday-of-august-2013\r\n  (is (= [2013 8 7] (meetup/meetup 8 2013 :wednesday :first))))\r\n\r\n(deftest first-thursday-of-september-2013\r\n  (is (= [2013 9 5] (meetup/meetup 9 2013 :thursday :first))))\r\n\r\n(deftest first-thursday-of-october-2013\r\n  (is (= [2013 10 3] (meetup/meetup 10 2013 :thursday :first))))\r\n\r\n(deftest first-friday-of-november-2013\r\n  (is (= [2013 11 1] (meetup/meetup 11 2013 :friday :first))))\r\n\r\n(deftest first-friday-of-december-2013\r\n  (is (= [2013 12 6] (meetup/meetup 12 2013 :friday :first))))\r\n\r\n(deftest first-saturday-of-january-2013\r\n  (is (= [2013 1 5] (meetup/meetup 1 2013 :saturday :first))))\r\n\r\n(deftest first-saturday-of-february-2013\r\n  (is (= [2013 2 2] (meetup/meetup 2 2013 :saturday :first))))\r\n\r\n(deftest first-sunday-of-march-2013\r\n  (is (= [2013 3 3] (meetup/meetup 3 2013 :sunday :first))))\r\n\r\n(deftest first-sunday-of-april-2013\r\n  (is (= [2013 4 7] (meetup/meetup 4 2013 :sunday :first))))\r\n\r\n(deftest second-monday-of-march-2013\r\n  (is (= [2013 3 11] (meetup/meetup 3 2013 :monday :second))))\r\n\r\n(deftest second-monday-of-april-2013\r\n  (is (= [2013 4 8] (meetup/meetup 4 2013 :monday :second))))\r\n\r\n(deftest second-tuesday-of-may-2013\r\n  (is (= [2013 5 14] (meetup/meetup 5 2013 :tuesday :second))))\r\n\r\n(deftest second-tuesday-of-june-2013\r\n  (is (= [2013 6 11] (meetup/meetup 6 2013 :tuesday :second))))\r\n\r\n(deftest second-wednesday-of-july-2013\r\n  (is (= [2013 7 10] (meetup/meetup 7 2013 :wednesday :second))))\r\n\r\n(deftest second-wednesday-of-august-2013\r\n  (is (= [2013 8 14] (meetup/meetup 8 2013 :wednesday :second))))\r\n\r\n(deftest second-thursday-of-september-2013\r\n  (is (= [2013 9 12] (meetup/meetup 9 2013 :thursday :second))))\r\n\r\n(deftest second-thursday-of-october-2013\r\n  (is (= [2013 10 10] (meetup/meetup 10 2013 :thursday :second))))\r\n\r\n(deftest second-friday-of-november-2013\r\n  (is (= [2013 11 8] (meetup/meetup 11 2013 :friday :second))))\r\n\r\n(deftest second-friday-of-december-2013\r\n  (is (= [2013 12 13] (meetup/meetup 12 2013 :friday :second))))\r\n\r\n(deftest second-saturday-of-january-2013\r\n  (is (= [2013 1 12] (meetup/meetup 1 2013 :saturday :second))))\r\n\r\n(deftest second-saturday-of-february-2013\r\n  (is (= [2013 2 9] (meetup/meetup 2 2013 :saturday :second))))\r\n\r\n(deftest second-sunday-of-march-2013\r\n  (is (= [2013 3 10] (meetup/meetup 3 2013 :sunday :second))))\r\n\r\n(deftest second-sunday-of-april-2013\r\n  (is (= [2013 4 14] (meetup/meetup 4 2013 :sunday :second))))\r\n\r\n(deftest third-monday-of-march-2013\r\n  (is (= [2013 3 18] (meetup/meetup 3 2013 :monday :third))))\r\n\r\n(deftest third-monday-of-april-2013\r\n  (is (= [2013 4 15] (meetup/meetup 4 2013 :monday :third))))\r\n\r\n(deftest third-tuesday-of-may-2013\r\n  (is (= [2013 5 21] (meetup/meetup 5 2013 :tuesday :third))))\r\n\r\n(deftest third-tuesday-of-june-2013\r\n  (is (= [2013 6 18] (meetup/meetup 6 2013 :tuesday :third))))\r\n\r\n(deftest third-wednesday-of-july-2013\r\n  (is (= [2013 7 17] (meetup/meetup 7 2013 :wednesday :third))))\r\n\r\n(deftest third-wednesday-of-august-2013\r\n  (is (= [2013 8 21] (meetup/meetup 8 2013 :wednesday :third))))\r\n\r\n(deftest third-thursday-of-september-2013\r\n  (is (= [2013 9 19] (meetup/meetup 9 2013 :thursday :third))))\r\n\r\n(deftest third-thursday-of-october-2013\r\n  (is (= [2013 10 17] (meetup/meetup 10 2013 :thursday :third))))\r\n\r\n(deftest third-friday-of-november-2013\r\n  (is (= [2013 11 15] (meetup/meetup 11 2013 :friday :third))))\r\n\r\n(deftest third-friday-of-december-2013\r\n  (is (= [2013 12 20] (meetup/meetup 12 2013 :friday :third))))\r\n\r\n(deftest third-saturday-of-january-2013\r\n  (is (= [2013 1 19] (meetup/meetup 1 2013 :saturday :third))))\r\n\r\n(deftest third-saturday-of-february-2013\r\n  (is (= [2013 2 16] (meetup/meetup 2 2013 :saturday :third))))\r\n\r\n(deftest third-sunday-of-march-2013\r\n  (is (= [2013 3 17] (meetup/meetup 3 2013 :sunday :third))))\r\n\r\n(deftest third-sunday-of-april-2013\r\n  (is (= [2013 4 21] (meetup/meetup 4 2013 :sunday :third))))\r\n\r\n(deftest fourth-monday-of-march-2013\r\n  (is (= [2013 3 25] (meetup/meetup 3 2013 :monday :fourth))))\r\n\r\n(deftest fourth-monday-of-april-2013\r\n  (is (= [2013 4 22] (meetup/meetup 4 2013 :monday :fourth))))\r\n\r\n(deftest fourth-tuesday-of-may-2013\r\n  (is (= [2013 5 28] (meetup/meetup 5 2013 :tuesday :fourth))))\r\n\r\n(deftest fourth-tuesday-of-june-2013\r\n  (is (= [2013 6 25] (meetup/meetup 6 2013 :tuesday :fourth))))\r\n\r\n(deftest fourth-wednesday-of-july-2013\r\n  (is (= [2013 7 24] (meetup/meetup 7 2013 :wednesday :fourth))))\r\n\r\n(deftest fourth-wednesday-of-august-2013\r\n  (is (= [2013 8 28] (meetup/meetup 8 2013 :wednesday :fourth))))\r\n\r\n(deftest fourth-thursday-of-september-2013\r\n  (is (= [2013 9 26] (meetup/meetup 9 2013 :thursday :fourth))))\r\n\r\n(deftest fourth-thursday-of-october-2013\r\n  (is (= [2013 10 24] (meetup/meetup 10 2013 :thursday :fourth))))\r\n\r\n(deftest fourth-friday-of-november-2013\r\n  (is (= [2013 11 22] (meetup/meetup 11 2013 :friday :fourth))))\r\n\r\n(deftest fourth-friday-of-december-2013\r\n  (is (= [2013 12 27] (meetup/meetup 12 2013 :friday :fourth))))\r\n\r\n(deftest fourth-saturday-of-january-2013\r\n  (is (= [2013 1 26] (meetup/meetup 1 2013 :saturday :fourth))))\r\n\r\n(deftest fourth-saturday-of-february-2013\r\n  (is (= [2013 2 23] (meetup/meetup 2 2013 :saturday :fourth))))\r\n\r\n(deftest fourth-sunday-of-march-2013\r\n  (is (= [2013 3 24] (meetup/meetup 3 2013 :sunday :fourth))))\r\n\r\n(deftest fourth-sunday-of-april-2013\r\n  (is (= [2013 4 28] (meetup/meetup 4 2013 :sunday :fourth))))\r\n\r\n(deftest last-monday-of-march-2013\r\n  (is (= [2013 3 25] (meetup/meetup 3 2013 :monday :last))))\r\n\r\n(deftest last-monday-of-april-2013\r\n  (is (= [2013 4 29] (meetup/meetup 4 2013 :monday :last))))\r\n\r\n(deftest last-tuesday-of-may-2013\r\n  (is (= [2013 5 28] (meetup/meetup 5 2013 :tuesday :last))))\r\n\r\n(deftest last-tuesday-of-june-2013\r\n  (is (= [2013 6 25] (meetup/meetup 6 2013 :tuesday :last))))\r\n\r\n(deftest last-wednesday-of-july-2013\r\n  (is (= [2013 7 31] (meetup/meetup 7 2013 :wednesday :last))))\r\n\r\n(deftest last-wednesday-of-august-2013\r\n  (is (= [2013 8 28] (meetup/meetup 8 2013 :wednesday :last))))\r\n\r\n(deftest last-thursday-of-september-2013\r\n  (is (= [2013 9 26] (meetup/meetup 9 2013 :thursday :last))))\r\n\r\n(deftest last-thursday-of-october-2013\r\n  (is (= [2013 10 31] (meetup/meetup 10 2013 :thursday :last))))\r\n\r\n(deftest last-friday-of-november-2013\r\n  (is (= [2013 11 29] (meetup/meetup 11 2013 :friday :last))))\r\n\r\n(deftest last-friday-of-december-2013\r\n  (is (= [2013 12 27] (meetup/meetup 12 2013 :friday :last))))\r\n\r\n(deftest last-saturday-of-january-2013\r\n  (is (= [2013 1 26] (meetup/meetup 1 2013 :saturday :last))))\r\n\r\n(deftest last-saturday-of-february-2013\r\n  (is (= [2013 2 23] (meetup/meetup 2 2013 :saturday :last))))\r\n\r\n(deftest last-sunday-of-march-2013\r\n  (is (= [2013 3 31] (meetup/meetup 3 2013 :sunday :last))))\r\n\r\n(deftest last-sunday-of-april-2013\r\n  (is (= [2013 4 28] (meetup/meetup 4 2013 :sunday :last))))\r\n"
 "(ns minesweeper-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [clojure.string :refer [join]]\r\n            [minesweeper :refer [draw]]))\r\n\r\n(def line-separator (System/getProperty \"line.separator\"))\r\n\r\n(deftest zero-size-board\r\n  (is (= (draw \"\") \"\")))\r\n\r\n(deftest empty-board\r\n  (is (= (draw (join line-separator [\"   \"\r\n                                     \"   \"\r\n                                     \"   \"]))\r\n         (join line-separator [\"   \"\r\n                               \"   \"\r\n                               \"   \"]))))\r\n\r\n(deftest surrounded\r\n  (is (= (draw (join line-separator [\"***\"\r\n                                     \"* *\"\r\n                                     \"***\"]))\r\n         (join line-separator [\"***\"\r\n                               \"*8*\"\r\n                               \"***\"]))))\r\n\r\n(deftest board-full-of-mines\r\n  (is (= (draw (join line-separator [\"***\"\r\n                                     \"***\"\r\n                                     \"***\"]))\r\n         (join line-separator [\"***\"\r\n                               \"***\"\r\n                               \"***\"]))))\r\n\r\n(deftest horizontal-line\r\n  (is (= (draw \" * * \")\r\n         \"1*2*1\")))\r\n\r\n(deftest vertical-line\r\n  (is (= (draw (join line-separator [\" \"\r\n                                     \"*\"\r\n                                     \" \"\r\n                                     \"*\"\r\n                                     \" \"]))\r\n         (join line-separator [\"1\"\r\n                               \"*\"\r\n                               \"2\"\r\n                               \"*\"\r\n                               \"1\"]))))\r\n\r\n(deftest cross\r\n  (is (= (draw (join line-separator [\"  *  \"\r\n                                     \"  *  \"\r\n                                     \"*****\"\r\n                                     \"  *  \"\r\n                                     \"  *  \"]))\r\n         (join line-separator [\" 2*2 \"\r\n                               \"25*52\"\r\n                               \"*****\"\r\n                               \"25*52\"\r\n                               \" 2*2 \"]))))\r\n\r\n"
 "(ns nth-prime-test\r\n  (:require [clojure.test :refer [deftest testing is]]\r\n            nth-prime))\r\n\r\n(deftest first-prime\r\n  (testing \"the first prime is 2\"\r\n    (is (= 2 (nth-prime/nth-prime 1)))))\r\n\r\n(deftest second-prime\r\n  (testing \"the second prime is 3\"\r\n    (is (= 3 (nth-prime/nth-prime 2)))))\r\n\r\n(deftest sixth-prime\r\n  (testing \"the sixth prime is 13\"\r\n    (is (= 13 (nth-prime/nth-prime 6)))))\r\n\r\n(deftest ten-thousand-first-prime\r\n  (testing \"the ten thousand and first prime is 104743\"\r\n    (is (= 104743 (nth-prime/nth-prime 10001)))))\r\n\r\n(deftest zeroth-prime\r\n  (testing \"there is no zeroth prime\"\r\n    (is (thrown? IllegalArgumentException (nth-prime/nth-prime 0)))))\r\n"
 ...)
clj꞉user꞉> 
{"change_test"
 "(ns change-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [change :refer [issue]]))\r\n\r\n(deftest single-coin-change\r\n  (is (= (issue 25 #{1 5 10 25 100})\r\n         '(25))))\r\n\r\n(deftest multiple-coin-change\r\n  (is (= (issue 15 #{1 5 10 25 100})\r\n         '(5 10))))\r\n\r\n(deftest change-with-lilliputian-coins\r\n  (is (= (issue 23 #{1 4 15 20 50})\r\n         '(4 4 15))))\r\n\r\n(deftest change-with-elbonia-coins\r\n  (is (= (issue 63 #{1 5 10 21 25})\r\n         '(21 21 21))))\r\n\r\n(deftest large-target-values\r\n  (is (= (issue 999 #{1 2 5 10 20 50 100})\r\n         '(2 2 5 20 20 50 100 100 100 100 100 100 100 100 100))))\r\n\r\n(deftest no-coins-make-zero-change\r\n  (is (empty? (issue 0 #{1, 5, 10, 21, 25}))))\r\n\r\n(deftest error-testing-for-change-smallet-than-the-smallest-coin\r\n  (is (thrown-with-msg? IllegalArgumentException #\"cannot change\"\r\n                        (issue 3 #{5 10}))))\r\n\r\n(deftest cannot-find-negative-change-values\r\n  (is (thrown-with-msg? IllegalArgumentException #\"cannot change\"\r\n                        (issue -5 #{1 2 5}))))\r\n\r\n(deftest error-testing-for-no-valid-change\r\n  (is (thrown-with-msg? IllegalArgumentException #\"cannot change\"\r\n                        (issue 10 #{20 8 3}))))\r\n",
 "log_levels_test"
 "(ns log-levels-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            log-levels))\r\n\r\n(deftest ^{:task 1} message-error-test\r\n  (is (= \"Stack overflow\" (log-levels/message \"[ERROR]: Stack overflow\"))))\r\n\r\n(deftest ^{:task 1} message-warning-test\r\n  (is (= (log-levels/message \"[WARNING]: Disk almost full\") \"Disk almost full\")))\r\n\r\n(deftest ^{:task 1} message-info-test\r\n  (is (= (log-levels/message \"[INFO]: File moved\") \"File moved\")))\r\n\r\n(deftest ^{:task 1} message-trim-whitespace-test\r\n  (is (= \"Timezone not set\" (log-levels/message \"[WARNING]:   \\tTimezone not set  \\r\\n\"))))\r\n\r\n(deftest ^{:task 2} log-level-error-test\r\n  (is (= \"error\" (log-levels/log-level \"[ERROR]: Disk full\"))))\r\n\r\n(deftest ^{:task 2} log-level-warning-test\r\n  (is (= \"warning\" (log-levels/log-level \"[WARNING]: Unsafe password\"))))\r\n\r\n(deftest ^{:task 2} log-level-info-test\r\n  (is (= \"info\" (log-levels/log-level \"[INFO]: Timezone changed\"))))\r\n\r\n(deftest ^{:task 3} reformat-error-test\r\n  (is (= \"Segmentation fault (error)\" (log-levels/reformat \"[ERROR]: Segmentation fault\"))))\r\n\r\n(deftest ^{:task 3} reformat-warning-test\r\n  (is (= \"Decreased performance (warning)\" (log-levels/reformat \"[WARNING]: Decreased performance\"))))\r\n\r\n(deftest ^{:task 3} reformat-info-test\r\n  (is (= \"Disk defragmented (info)\" (log-levels/reformat \"[INFO]: Disk defragmented\"))))\r\n\r\n(deftest ^{:task 3} reformat-trim-whitespace-test\r\n  (is (= \"Corrupt disk (error)\" (log-levels/reformat \"[ERROR]: \\t Corrupt disk\\t \\t \\r\\n\"))))\r\n",
 "two_fer_test"
 "(ns two-fer-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            two-fer))\r\n\r\n(deftest two-fer-test\r\n  (is (= \"One for you, one for me.\" (two-fer/two-fer))))\r\n\r\n(deftest name-alice-test\r\n  (is (= \"One for Alice, one for me.\" (two-fer/two-fer \"Alice\"))))\r\n\r\n(deftest name-bob-test\r\n  (is (= \"One for Bob, one for me.\" (two-fer/two-fer \"Bob\"))))\r\n",
 "gigasecond_test"
 "(ns gigasecond-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            gigasecond))\r\n\r\n(deftest from-apr-25-2011\r\n  (is (= [2043 1 1] (gigasecond/from 2011 4 25))))\r\n\r\n(deftest from-jun-13-1977\r\n  (is (= [2009 2 19] (gigasecond/from 1977 6 13))))\r\n\r\n(deftest from-jul-19-1959\r\n  (is (= [1991 3 27] (gigasecond/from 1959 7 19))))\r\n\r\n;; customize this to test your birthday and find your gigasecond date:\r\n;; (deftest your-birthday\r\n;;   (is (= [year2 month2 day2] (gigasecond/from year1 month1 day1))))\r\n",
 "reverse_string_test"
 "(ns reverse-string-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            reverse-string))\r\n\r\n(deftest empty-string-test\r\n  (is (= \"\" (reverse-string/reverse-string \"\"))))\r\n\r\n(deftest a-letter-test\r\n  (is (= \"I\" (reverse-string/reverse-string \"I\"))))\r\n\r\n(deftest a-word-test\r\n  (is (= \"tobor\" (reverse-string/reverse-string \"robot\"))))\r\n\r\n(deftest capitalised-word-test\r\n  (is (= \"nemaR\" (reverse-string/reverse-string \"Ramen\"))))\r\n\r\n(deftest sentence-with-punctuation-test\r\n  (is (= \"!yrgnuh m'I\" (reverse-string/reverse-string \"I'm hungry!\"))))\r\n\r\n(deftest palindrome-test\r\n  (is (= \"racecar\" (reverse-string/reverse-string \"racecar\"))))\r\n\r\n(deftest even-sized-word-test\r\n  (is (= \"reward\" (reverse-string/reverse-string \"drawer\"))))\r\n\r\n(deftest long-string-test\r\n  (let [s (reduce str (repeat 1000 \"overflow?\"))\r\n        rs (reduce str (repeat 1000 \"?wolfrevo\"))]\r\n    (is (= rs (reverse-string/reverse-string s)))))\r\n",
 "roman_numerals_test"
 "(ns roman-numerals-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            roman-numerals))\r\n\r\n(deftest one\r\n  (is (= \"I\" (roman-numerals/numerals 1))))\r\n\r\n(deftest two\r\n  (is (= \"II\" (roman-numerals/numerals 2))))\r\n\r\n(deftest three\r\n  (is (= \"III\" (roman-numerals/numerals 3))))\r\n\r\n(deftest four\r\n  (is (= \"IV\" (roman-numerals/numerals 4))))\r\n\r\n(deftest five\r\n  (is (= \"V\" (roman-numerals/numerals 5))))\r\n\r\n(deftest six\r\n  (is (= \"VI\" (roman-numerals/numerals 6))))\r\n\r\n(deftest nine\r\n  (is (= \"IX\" (roman-numerals/numerals 9))))\r\n\r\n(deftest twenty-seven\r\n  (is (= \"XXVII\" (roman-numerals/numerals 27))))\r\n\r\n(deftest forty-eight\r\n  (is (= \"XLVIII\" (roman-numerals/numerals 48))))\r\n\r\n(deftest fifty-nine\r\n  (is (= \"LIX\" (roman-numerals/numerals 59))))\r\n\r\n(deftest ninety-three\r\n  (is (= \"XCIII\" (roman-numerals/numerals 93))))\r\n\r\n(deftest one-hundred-forty-one\r\n  (is (= \"CXLI\" (roman-numerals/numerals 141))))\r\n\r\n(deftest one-hundred-sixty-three\r\n  (is (= \"CLXIII\" (roman-numerals/numerals 163))))\r\n\r\n(deftest four-hundred-two\r\n  (is (= \"CDII\" (roman-numerals/numerals 402))))\r\n\r\n(deftest five-hundred-seventy-five\r\n  (is (= \"DLXXV\" (roman-numerals/numerals 575))))\r\n\r\n(deftest nine-hundred-eleven\r\n  (is (= \"CMXI\" (roman-numerals/numerals 911))))\r\n\r\n(deftest one-thousand-twenty-four\r\n  (is (= \"MXXIV\" (roman-numerals/numerals 1024))))\r\n\r\n(deftest three-thousand\r\n  (is (= \"MMM\" (roman-numerals/numerals 3000))))\r\n",
 "all_your_base_test"
 "(ns all-your-base-test\r\n  (:require [clojure.test :refer [deftest testing is]]\r\n            [all-your-base]))\r\n\r\n(deftest test-single-bit-to-one-decimal\r\n  (testing \"Base 2 '1' converts to base 10 '1'\"\r\n    (is (= '(1) (all-your-base/convert 2 '(1) 10)))))\r\n\r\n(deftest test-binary-to-single-decimal\r\n  (testing \"Base 2 '1 0 1' converts to base 10 '5'\"\r\n    (is (= '(5) (all-your-base/convert 2 '(1 0 1) 10)))))\r\n\r\n(deftest test-single-decimal-to-binary\r\n  (testing \"Base 10 '5' converts to base 2 '1 0 1'\"\r\n    (is (= '(1 0 1) (all-your-base/convert 10 '(5) 2)))))\r\n\r\n(deftest test-binary-to-multiple-decimal\r\n  (testing \"Base 2 '1 0 1 0 1 0' converts to base 10 '4 2'\"\r\n    (is (= '(4 2) (all-your-base/convert 2 '(1 0 1 0 1 0) 10)))))\r\n\r\n(deftest test-decimal-to-binary\r\n  (testing \"Base 10 '4 2' conves to base 2 '1 0 1 0 1 0'\"\r\n    (is (= '(1 0 1 0 1 0) (all-your-base/convert 10 '(4 2) 2)))))\r\n\r\n(deftest test-trinary-to-hexadecimal\r\n  (testing \"Base 3 '1 1 2 0' converts to base 16 '2 10'\"\r\n    (is (= '(2 10) (all-your-base/convert 3 '(1 1 2 0) 16)))))\r\n\r\n(deftest test-hexadecimal-to-trinary\r\n  (testing \"Base 16 '2 10' converts to base 3 '1 1 2 0'\"\r\n    (is (= '(1 1 2 0) (all-your-base/convert 16 '(2 10) 3)))))\r\n\r\n(deftest test-15-bit-integer\r\n  (testing \"Base 97 '3 46 60' converts to base 73 '6 10 45'\"\r\n    (is (= '(6 10 45) (all-your-base/convert 97 '(3 46 60) 73)))))\r\n\r\n(deftest test-empty-list\r\n  (testing \"Empty input digits returns empty sequence\"\r\n    (is (empty? (all-your-base/convert 2 () 10)))))\r\n\r\n(deftest test-single-zero\r\n  (testing \"0 converts to 0, no matter the base\"\r\n    (is (= '(0) (all-your-base/convert 10 '(0) 2)))))\r\n\r\n(deftest test-multiple-zeroes\r\n  (testing \"0 converts to 0, no matter the how many zeroes\"\r\n    (is (= '(0) (all-your-base/convert 10 '(0 0 0) 2)))))\r\n\r\n(deftest test-leading-zeros\r\n  (testing \"Leading zeroes don't affect conversion\"\r\n    (is (= '(4 2) (all-your-base/convert 7 '(0 6 0) 10)))))\r\n\r\n(deftest test-negative-digit\r\n  (testing \"Negative digits result in nil\"\r\n    (is (nil? (all-your-base/convert 2 '(1 -1 1 0 1 0) 10)))))\r\n\r\n(deftest test-invalid-positive-digit\r\n  (testing \"Invalid digits return nil\"\r\n    (is (nil? (all-your-base/convert 2 '(1 2 1 0 1 0) 10)))))\r\n\r\n(deftest test-first-base-is-one\r\n  (testing \"Input base of 1 returns nil\"\r\n    (is (nil? (all-your-base/convert 1 () 10)))))\r\n\r\n(deftest test-second-base-is-one\r\n  (testing \"Output base of 1 returns nil\"\r\n    (is (nil? (all-your-base/convert 2 '(1 0 1 0 1 0) 1)))))\r\n\r\n(deftest test-first-base-is-zero\r\n  (testing \"Input base of 0 returns nil\"\r\n    (is (nil? (all-your-base/convert 0 () 10)))))\r\n\r\n(deftest test-second-base-is-zero\r\n  (testing \"Output base of 0 returns nil\"\r\n    (is (nil? (all-your-base/convert 10 '(7) 0)))))\r\n\r\n(deftest test-first-base-is-negative\r\n  (testing \"Negative input base returns nil\"\r\n    (is (nil? (all-your-base/convert -2 '(1) 10)))))\r\n\r\n(deftest test-second-base-is-negative\r\n  (testing \"Negative output base returns nil\"\r\n    (is (nil? (all-your-base/convert 2 '(1) -7)))))\r\n\r\n(deftest test-both-bases-are-negative\r\n  (testing \"When both bases are negative, nil is returned\"\r\n    (is (nil? (all-your-base/convert -2 '(1) -7)))))\r\n",
 "yacht_test"
 "(ns yacht-test\r\n  (:require [clojure.test :refer [deftest testing is run-tests]]\r\n             yacht))\r\n\r\n(deftest score-test\r\n  (testing \"Yacht\"\r\n     (is (= 50 (yacht/score [5 5 5 5 5] \"yacht\"))))\r\n  (testing \"Not Yacht\"\r\n     (is (= 0 (yacht/score [1 3 3 2 5] \"yacht\"))))\r\n  (testing \"Ones\"\r\n     (is (= 3 (yacht/score [1 1 1 3 5] \"ones\"))))\r\n  (testing \"Ones, out of order\"\r\n     (is (= 3 (yacht/score [3 1 1 5 1] \"ones\"))))\r\n  (testing \"No ones\"\r\n     (is (= 0 (yacht/score [4 3 6 5 5] \"ones\"))))\r\n  (testing \"Twos\"\r\n     (is (= 2 (yacht/score [2 3 4 5 6] \"twos\"))))\r\n  (testing \"Fours\"\r\n     (is (= 8 (yacht/score [1 4 1 4 1] \"fours\"))))\r\n  (testing \"Yacht counted as threes\"\r\n     (is (= 15 (yacht/score [3 3 3 3 3] \"threes\"))))\r\n  (testing \"Yacht of 3s counted as fives\"\r\n     (is (= 0 (yacht/score [3 3 3 3 3] \"fives\"))))\r\n  (testing \"Fives\"\r\n     (is (= 10 (yacht/score [1 5 3 5 3] \"fives\"))))\r\n  (testing \"Sixes\"\r\n     (is (= 6 (yacht/score [2 3 4 5 6] \"sixes\"))))\r\n  (testing \"Full house two small, three big\"\r\n     (is (= 16 (yacht/score [2 2 4 4 4] \"full house\"))))\r\n  (testing \"Full house three small, two big\"\r\n     (is (= 19 (yacht/score [5 3 3 5 3] \"full house\"))))\r\n  (testing \"Two pair is not a full house\"\r\n     (is (= 0 (yacht/score [2 2 4 4 5] \"full house\"))))\r\n  (testing \"Four of a kind is not a full house\"\r\n     (is (= 0 (yacht/score [1 4 4 4 4] \"full house\"))))\r\n  (testing \"Yacht is not a full house\"\r\n     (is (= 0 (yacht/score [2 2 2 2 2] \"full house\"))))\r\n  (testing \"Four of a Kind\"\r\n     (is (= 24 (yacht/score [6 6 4 6 6] \"four of a kind\"))))\r\n  (testing \"Yacht can be scored as Four of a Kind\"\r\n     (is (= 12 (yacht/score [3 3 3 3 3] \"four of a kind\"))))\r\n  (testing \"Full house is not Four of a Kind\"\r\n     (is (= 0 (yacht/score [3 3 3 5 5] \"four of a kind\"))))\r\n  (testing \"Little Straight\"\r\n     (is (= 30 (yacht/score [3 5 4 1 2] \"little straight\"))))\r\n  (testing \"Little Straight as Big Straight\"\r\n     (is (= 0 (yacht/score [1 2 3 4 5] \"big straight\"))))\r\n  (testing \"Four in order but not a little straight\"\r\n     (is (= 0 (yacht/score [1 1 2 3 4] \"little straight\"))))\r\n  (testing \"No pairs but not a little straight\"\r\n     (is (= 0 (yacht/score [1 2 3 4 6] \"little straight\"))))\r\n  (testing \"Minimum is 1, maximum is 5, but not a little straight\"\r\n     (is (= 0 (yacht/score [1 1 3 4 5] \"little straight\"))))\r\n  (testing \"Big Straight\"\r\n     (is (= 30 (yacht/score [4 6 2 5 3] \"big straight\"))))\r\n  (testing \"Big Straight as little straight\"\r\n     (is (= 0 (yacht/score [6 5 4 3 2] \"little straight\"))))\r\n  (testing \"No pairs but not a big straight\"\r\n     (is (= 0 (yacht/score [6 5 4 3 1] \"big straight\"))))\r\n  (testing \"Choice\"\r\n     (is (= 23 (yacht/score [3 3 5 6 6] \"choice\"))))\r\n  (testing \"Yacht as choice\"\r\n     (is (= 10 (yacht/score [2 2 2 2 2] \"choice\")))))\r\n\r\n(comment\r\n  (run-tests)\r\n  )",
 "difference_of_squares_test"
 "(ns difference-of-squares-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [difference-of-squares :as dos]))\r\n\r\n(deftest square-of-sum-to-5\r\n  (is (= 225 (dos/square-of-sum 5))))\r\n\r\n(deftest sum-of-squares-to-5\r\n  (is (= 55 (dos/sum-of-squares 5))))\r\n\r\n(deftest difference-of-squares-to-5\r\n  (is (= 170 (dos/difference 5))))\r\n\r\n(deftest square-of-sum-to-10\r\n  (is (= 3025 (dos/square-of-sum 10))))\r\n\r\n(deftest sum-of-squares-to-10\r\n  (is (= 385 (dos/sum-of-squares 10))))\r\n\r\n(deftest difference-of-squares-to-10\r\n  (is (= 2640 (dos/difference 10))))\r\n\r\n(deftest square-of-sum-to-100\r\n  (is (= 25502500 (dos/square-of-sum 100))))\r\n\r\n(deftest sum-of-squares-to-100\r\n  (is (= 338350 (dos/sum-of-squares 100))))\r\n\r\n(deftest difference-of-squares-to-100\r\n  (is (= 25164150 (dos/difference 100))))\r\n",
 "pig_latin_test"
 "(ns pig-latin-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            pig-latin))\r\n\r\n;; ay is added to words that start with vowels\r\n\r\n(deftest word-beginning-with-a\r\n  (is (= \"appleay\"\r\n         (pig-latin/translate \"apple\"))))\r\n\r\n(deftest word-beginning-with-e\r\n  (is (= \"earay\"\r\n         (pig-latin/translate \"ear\"))))\r\n\r\n(deftest word-beginning-with-i\r\n  (is (= \"iglooay\"\r\n         (pig-latin/translate \"igloo\"))))\r\n\r\n(deftest word-beginning-with-o\r\n  (is (= \"objectay\"\r\n         (pig-latin/translate \"object\"))))\r\n\r\n(deftest word-beginning-with-u\r\n  (is (= \"underay\"\r\n         (pig-latin/translate \"under\"))))\r\n\r\n(deftest word-beginning-with-a-vowel-and-followed-by-a-qu\r\n  (is (= \"equalay\"\r\n         (pig-latin/translate \"equal\"))))\r\n\r\n;; first letter and ay are moved to the end of words that start with consonants\r\n\r\n(deftest word-beginning-with-p\r\n  (is (= \"igpay\"\r\n         (pig-latin/translate \"pig\"))))\r\n\r\n(deftest word-beginning-with-k\r\n  (is (= \"oalakay\"\r\n         (pig-latin/translate \"koala\"))))\r\n\r\n(deftest word-beginning-with-y\r\n  (is (= \"ellowyay\"\r\n         (pig-latin/translate \"yellow\"))))\r\n\r\n(deftest word-beginning-with-x\r\n  (is (= \"enonxay\"\r\n         (pig-latin/translate \"xenon\"))))\r\n\r\n(deftest word-beginning-with-q-without-a-following-u\r\n  (is (= \"atqay\"\r\n         (pig-latin/translate \"qat\"))))\r\n\r\n;; some letter clusters are treated like a single consonant\r\n\r\n(deftest word-beginning-with-ch\r\n  (is (= \"airchay\"\r\n         (pig-latin/translate \"chair\"))))\r\n\r\n(deftest word-beginning-with-qu\r\n  (is (= \"eenquay\"\r\n         (pig-latin/translate \"queen\"))))\r\n\r\n(deftest word-beginning-with-qu-and-a-preceding-consonant\r\n  (is (= \"aresquay\"\r\n         (pig-latin/translate \"square\"))))\r\n\r\n(deftest word-beginning-with-th\r\n  (is (= \"erapythay\"\r\n         (pig-latin/translate \"therapy\"))))\r\n\r\n(deftest word-beginning-with-thr\r\n  (is (= \"ushthray\"\r\n         (pig-latin/translate \"thrush\"))))\r\n\r\n(deftest word-beginning-with-sch\r\n  (is (= \"oolschay\"\r\n         (pig-latin/translate \"school\"))))\r\n\r\n;;  some letter clusters are treated like a single vowel\r\n\r\n(deftest word-beginning-with-yt\r\n  (is (= \"yttriaay\"\r\n         (pig-latin/translate \"yttria\"))))\r\n\r\n(deftest word-beginning-with-xr\r\n  (is (= \"xrayay\"\r\n         (pig-latin/translate \"xray\"))))\r\n\r\n(deftest word-beginning-with-consonants-followed-by-y\r\n  (is (= \"ythmrhay\"\r\n         (pig-latin/translate \"rhythm\"))))\r\n\r\n(deftest two-letter-word-ends-with-y\r\n  (is (= \"ymay\"\r\n         (pig-latin/translate \"my\"))))\r\n\r\n;; phrases are translated\r\n(deftest a-whole-phrase\r\n  (is (= \"ickquay astfay unray\"\r\n         (pig-latin/translate \"quick fast run\"))))\r\n",
 "date_parser_test"
 "(ns date-parser-test\r\n  (:require [clojure.test :refer [deftest testing is]]\r\n            date-parser))\r\n            \r\n(deftest ^{:task 1} day-test\r\n  (testing \"numeric pattern for day matches\"\r\n    (testing \"un-padded 1\"\r\n      (is (= \"1\" (re-matches (re-pattern date-parser/day) \"1\"))))\r\n    (testing \"un-padded 2\"\r\n      (is (= \"2\" (re-matches (re-pattern date-parser/day) \"2\"))))\r\n    (testing \"un-padded 3\"\r\n      (is (= \"3\" (re-matches (re-pattern date-parser/day) \"3\"))))\r\n    (testing \"un-padded 4\"\r\n      (is (= \"4\" (re-matches (re-pattern date-parser/day) \"4\"))))\r\n    (testing \"un-padded 5\"\r\n      (is (= \"5\" (re-matches (re-pattern date-parser/day) \"5\"))))\r\n    (testing \"un-padded 6\"\r\n      (is (= \"6\" (re-matches (re-pattern date-parser/day) \"6\"))))\r\n    (testing \"un-padded 7\"\r\n      (is (= \"7\" (re-matches (re-pattern date-parser/day) \"7\"))))\r\n    (testing \"un-padded 8\"\r\n      (is (= \"8\" (re-matches (re-pattern date-parser/day) \"8\"))))\r\n    (testing \"un-padded 9\"\r\n      (is (= \"9\" (re-matches (re-pattern date-parser/day) \"9\"))))\r\n    (testing \"un-padded 10\"\r\n      (is (= \"10\" (re-matches (re-pattern date-parser/day) \"10\"))))\r\n    (testing \"un-padded 11\"\r\n      (is (= \"11\" (re-matches (re-pattern date-parser/day) \"11\"))))\r\n    (testing \"un-padded 12\"\r\n      (is (= \"12\" (re-matches (re-pattern date-parser/day) \"12\"))))\r\n    (testing \"un-padded 13\"\r\n      (is (= \"13\" (re-matches (re-pattern date-parser/day) \"13\"))))\r\n    (testing \"un-padded 14\"\r\n      (is (= \"14\" (re-matches (re-pattern date-parser/day) \"14\"))))\r\n    (testing \"un-padded 15\"\r\n      (is (= \"15\" (re-matches (re-pattern date-parser/day) \"15\"))))\r\n    (testing \"un-padded 16\"\r\n      (is (= \"16\" (re-matches (re-pattern date-parser/day) \"16\"))))\r\n    (testing \"un-padded 17\"\r\n      (is (= \"17\" (re-matches (re-pattern date-parser/day) \"17\"))))\r\n    (testing \"un-padded 18\"\r\n      (is (= \"18\" (re-matches (re-pattern date-parser/day) \"18\"))))\r\n    (testing \"un-padded 19\"\r\n      (is (= \"19\" (re-matches (re-pattern date-parser/day) \"19\"))))\r\n    (testing \"un-padded 20\"\r\n      (is (= \"20\" (re-matches (re-pattern date-parser/day) \"20\"))))\r\n    (testing \"un-padded 21\"\r\n      (is (= \"21\" (re-matches (re-pattern date-parser/day) \"21\"))))\r\n    (testing \"un-padded 22\"\r\n      (is (= \"22\" (re-matches (re-pattern date-parser/day) \"22\"))))\r\n    (testing \"un-padded 23\"\r\n      (is (= \"23\" (re-matches (re-pattern date-parser/day) \"23\"))))\r\n    (testing \"un-padded 24\"\r\n      (is (= \"24\" (re-matches (re-pattern date-parser/day) \"24\"))))\r\n    (testing \"un-padded 25\"\r\n      (is (= \"25\" (re-matches (re-pattern date-parser/day) \"25\"))))\r\n    (testing \"un-padded 26\"\r\n      (is (= \"26\" (re-matches (re-pattern date-parser/day) \"26\"))))\r\n    (testing \"un-padded 27\"\r\n      (is (= \"27\" (re-matches (re-pattern date-parser/day) \"27\"))))\r\n    (testing \"un-padded 28\"\r\n      (is (= \"28\" (re-matches (re-pattern date-parser/day) \"28\"))))\r\n    (testing \"un-padded 29\"\r\n      (is (= \"29\" (re-matches (re-pattern date-parser/day) \"29\"))))\r\n    (testing \"un-padded 30\"\r\n      (is (= \"30\" (re-matches (re-pattern date-parser/day) \"30\"))))\r\n    (testing \"un-padded 31\"\r\n      (is (= \"31\" (re-matches (re-pattern date-parser/day) \"31\"))))\r\n    (testing \"un-padded 1\"\r\n      (is (= \"1\" (re-matches (re-pattern date-parser/day) \"1\"))))\r\n    (testing \"padded 02\"\r\n      (is (= \"02\" (re-matches (re-pattern date-parser/day) \"02\"))))\r\n    (testing \"padded 03\"\r\n      (is (= \"03\" (re-matches (re-pattern date-parser/day) \"03\"))))\r\n    (testing \"padded 04\"\r\n      (is (= \"04\" (re-matches (re-pattern date-parser/day) \"04\"))))\r\n    (testing \"padded 05\"\r\n      (is (= \"05\" (re-matches (re-pattern date-parser/day) \"05\"))))\r\n    (testing \"padded 06\"\r\n      (is (= \"06\" (re-matches (re-pattern date-parser/day) \"06\"))))\r\n    (testing \"padded 07\"\r\n      (is (= \"07\" (re-matches (re-pattern date-parser/day) \"07\"))))\r\n    (testing \"padded 08\"\r\n      (is (= \"08\" (re-matches (re-pattern date-parser/day) \"08\"))))\r\n    (testing \"padded 09\"\r\n      (is (= \"09\" (re-matches (re-pattern date-parser/day) \"09\")))))\r\n  (testing \"numeric pattern for day doesn't match\"\r\n    (testing \"too few digits\"\r\n      (is (nil? (re-matches (re-pattern date-parser/day) \"\"))))\r\n    (testing \"too many digits\"\r\n      (is (nil? (re-matches (re-pattern date-parser/day) \"111\"))))\r\n    (testing \"one letter\"\r\n      (is (nil? (re-matches (re-pattern date-parser/day) \"a\"))))\r\n    (testing \"two letters\"\r\n      (is (nil? (re-matches (re-pattern date-parser/day) \"bb\"))))))\r\n\r\n(deftest ^{:task 1} month-test\r\n  (testing \"numeric pattern for month matches\"\r\n    (testing \"un-padded 1\"\r\n      (is (= \"1\" (re-matches (re-pattern date-parser/month) \"1\"))))\r\n    (testing \"un-padded 2\"\r\n      (is (= \"2\" (re-matches (re-pattern date-parser/month) \"2\"))))\r\n    (testing \"un-padded 3\"\r\n      (is (= \"3\" (re-matches (re-pattern date-parser/month) \"3\"))))\r\n    (testing \"un-padded 4\"\r\n      (is (= \"4\" (re-matches (re-pattern date-parser/month) \"4\"))))\r\n    (testing \"un-padded 5\"\r\n      (is (= \"5\" (re-matches (re-pattern date-parser/month) \"5\"))))\r\n    (testing \"un-padded 6\"\r\n      (is (= \"6\" (re-matches (re-pattern date-parser/month) \"6\"))))\r\n    (testing \"un-padded 7\"\r\n      (is (= \"7\" (re-matches (re-pattern date-parser/month) \"7\"))))\r\n    (testing \"un-padded 8\"\r\n      (is (= \"8\" (re-matches (re-pattern date-parser/month) \"8\"))))\r\n    (testing \"un-padded 9\"\r\n      (is (= \"9\" (re-matches (re-pattern date-parser/month) \"9\"))))\r\n    (testing \"un-padded 10\"\r\n      (is (= \"10\" (re-matches (re-pattern date-parser/month) \"10\"))))\r\n    (testing \"un-padded 11\"\r\n      (is (= \"11\" (re-matches (re-pattern date-parser/month) \"11\"))))\r\n    (testing \"un-padded 12\"\r\n      (is (= \"12\" (re-matches (re-pattern date-parser/month) \"12\"))))\r\n    (testing \"un-padded 1\"\r\n      (is (= \"1\" (re-matches (re-pattern date-parser/month) \"1\"))))\r\n    (testing \"padded 02\"\r\n      (is (= \"02\" (re-matches (re-pattern date-parser/month) \"02\"))))\r\n    (testing \"padded 03\"\r\n      (is (= \"03\" (re-matches (re-pattern date-parser/month) \"03\"))))\r\n    (testing \"padded 04\"\r\n      (is (= \"04\" (re-matches (re-pattern date-parser/month) \"04\"))))\r\n    (testing \"padded 05\"\r\n      (is (= \"05\" (re-matches (re-pattern date-parser/month) \"05\"))))\r\n    (testing \"padded 06\"\r\n      (is (= \"06\" (re-matches (re-pattern date-parser/month) \"06\"))))\r\n    (testing \"padded 07\"\r\n      (is (= \"07\" (re-matches (re-pattern date-parser/month) \"07\"))))\r\n    (testing \"padded 08\"\r\n      (is (= \"08\" (re-matches (re-pattern date-parser/month) \"08\"))))\r\n    (testing \"padded 09\"\r\n      (is (= \"09\" (re-matches (re-pattern date-parser/month) \"09\")))))\r\n  (testing \"numeric pattern for month doesn't match\"\r\n    (testing \"too few digits\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"\"))))\r\n    (testing \"too many digits\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"111\"))))\r\n    (testing \"one letter\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"a\"))))\r\n    (testing \"two letters\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"bb\"))))\r\n    (testing \"short month name\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"Jan\"))))\r\n    (testing \"long month name\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"January\"))))))\r\n\r\n(deftest ^{:task 1} year-test\r\n  (testing \"numeric pattern for year\"\r\n    (testing \"matches 4 digits\"\r\n      (is (= \"1970\" (re-matches (re-pattern date-parser/year) \"1970\"))))\r\n    (testing \"doesn't match short year\"\r\n      (is (nil? (re-matches (re-pattern date-parser/year) \"84\"))))\r\n    (testing \"doesn't match letters\"\r\n      (is (nil? (re-matches (re-pattern date-parser/year) \"198A\"))))\r\n    (testing \"doesn't match too few\"\r\n      (is (nil? (re-matches (re-pattern date-parser/year) \"198\"))))\r\n    (testing \"doesn't match too many\"\r\n      (is (nil? (re-matches (re-pattern date-parser/year) \"19701\"))))))\r\n\r\n(deftest ^{:task 2} day-names-test\r\n  (testing \"day names match\"\r\n    (is (= \"Sunday\" (date-parser/day-names \"Sunday\")))\r\n    (is (= \"Monday\" (date-parser/day-names \"Monday\")))\r\n    (is (= \"Tuesday\" (date-parser/day-names \"Tuesday\")))\r\n    (is (= \"Wednesday\" (date-parser/day-names \"Wednesday\")))\r\n    (is (= \"Thursday\" (date-parser/day-names \"Thursday\")))\r\n    (is (= \"Friday\" (date-parser/day-names \"Friday\")))\r\n    (is (= \"Saturday\" (date-parser/day-names \"Saturday\"))))\r\n  (testing \"day names don't match\"\r\n    (testing \"combined\"\r\n      (is (nil? (date-parser/day-names \"SundayMonday\"))))\r\n    (testing \"short name\"\r\n      (is (nil? (date-parser/day-names \"Sun\"))))\r\n    (testing \"numeric day of the week (0-indexed)\"\r\n      (is (nil? (date-parser/day-names \"0\"))))\r\n    (testing \"numeric day of the week (1-indexed)\"\r\n      (is (nil? (date-parser/day-names \"1\"))))))\r\n\r\n(deftest ^{:task 2} month-names-test\r\n  (testing \"month names match\"\r\n    (is (= \"January\" (date-parser/month-names \"January\")))\r\n    (is (= \"February\" (date-parser/month-names \"February\")))\r\n    (is (= \"March\" (date-parser/month-names \"March\")))\r\n    (is (= \"April\" (date-parser/month-names \"April\")))\r\n    (is (= \"May\" (date-parser/month-names \"May\")))\r\n    (is (= \"June\" (date-parser/month-names \"June\")))\r\n    (is (= \"July\" (date-parser/month-names \"July\")))\r\n    (is (= \"August\" (date-parser/month-names \"August\")))\r\n    (is (= \"September\" (date-parser/month-names \"September\")))\r\n    (is (= \"October\" (date-parser/month-names \"October\")))\r\n    (is (= \"November\" (date-parser/month-names \"November\")))\r\n    (is (= \"December\" (date-parser/month-names \"December\"))))\r\n  (testing \"month names don't match\"\r\n    (testing \"combined\"\r\n      (is (nil? (date-parser/month-names \"JanuaryFebruary\"))))\r\n    (testing \"short name\"\r\n      (is (nil? (date-parser/month-names \"Jan\"))))\r\n    (testing \"numeric month of the year (0-indexed)\"\r\n      (is (nil? (date-parser/month-names \"0\"))))\r\n    (testing \"numeric month of the year (1-indexed)\"\r\n      (is (nil? (date-parser/month-names \"1\"))))))\r\n\r\n(deftest ^{:task 3} capture-test\r\n  (testing \"capture numeric month\"\r\n    (is (= {:month \"01\"} (date-parser/capture-month \"01\"))))\r\n  (testing \"capture numeric day\"\r\n    (is (= {:day \"01\"} (date-parser/capture-day \"01\"))))\r\n  (testing \"capture numeric year\"\r\n    (is (= {:year \"1970\"} (date-parser/capture-year \"1970\"))))\r\n  (testing \"capture day name\"\r\n    (is (= {:day-name \"Monday\"} (date-parser/capture-day-name \"Monday\"))))\r\n  (testing \"capture month name\"\r\n    (is (= {:month-name \"February\"} (date-parser/capture-month-name \"February\")))))\r\n\r\n(deftest ^{:task 4} combined-capture-test\r\n  (testing \"numeric date\"\r\n    (is (= {:year \"1970\", :month \"02\", :day \"01\"} (date-parser/capture-numeric-date \"01/02/1970\"))))\r\n  (testing \"month named date\"\r\n    (is (= {:year \"1970\", :month-name \"January\", :day \"1\"} (date-parser/capture-month-name-date \"January 1, 1970\"))))\r\n  (testing \"day and month named date\"\r\n    (is (= {:year \"1970\", :month-name \"January\", :day \"1\", :day-name \"Thursday\"}\r\n           (date-parser/capture-day-month-name-date \"Thursday, January 1, 1970\")))))\r\n",
 "octal_test"
 "(ns octal-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [octal :refer [to-decimal]]))\r\n\r\n(deftest octal-1-is-decimal-1\r\n  (testing \"1 should still be 1\"\r\n    (is (= 1 (to-decimal \"1\")))))\r\n\r\n(deftest octal-2-is-decimal-2\r\n  (testing \"2 should still be 2\"\r\n    (is (= 2 (to-decimal \"2\")))))\r\n\r\n(deftest octal-10-is-decimal-8\r\n  (testing \"10 should be 8\"\r\n    (is (= 8 (to-decimal \"10\")))))\r\n\r\n(deftest octal-11-is-decimal-9\r\n  (testing \"11 should be 9\"\r\n    (is (= 9 (to-decimal \"11\")))))\r\n\r\n(deftest octal-17-is-decimal-15\r\n  (testing \"17 should be 15\"\r\n    (is (= 15 (to-decimal \"17\")))))\r\n\r\n(deftest octal-130-is-decimal-88\r\n  (testing \"130 should be 88\"\r\n    (is (= 88 (to-decimal \"130\")))))\r\n\r\n(deftest octal-2047-is-decimal-1063\r\n  (testing \"2047 should be 1063\"\r\n    (is (= 1063 (to-decimal \"2047\")))))\r\n\r\n(deftest octal-7777-is-decimal-4095\r\n  (testing \"7777 should be 4095\"\r\n    (is (= 4095 (to-decimal \"7777\")))))\r\n\r\n(deftest octal-1234567-is-decimal-342391\r\n  (testing \"1234567 should be 342391\"\r\n    (is (= 342391 (to-decimal \"1234567\")))))\r\n\r\n(deftest invalid-input-is-decimal-0\r\n  (testing \"carrot should be invalid\"\r\n    (is (= 0 (to-decimal \"carrot\")))))\r\n\r\n(deftest eight-is-invalid-input-decimal-0\r\n  (testing \"8 should be invalid and return 0\"\r\n    (is (= 0 (to-decimal \"8\")))))\r\n\r\n(deftest nine-is-invalid-input-decimal-0\r\n  (testing \"9 should be invalid and return 0\"\r\n    (is (= 0 (to-decimal \"9\")))))\r\n\r\n(deftest invalid-input-6789-is-decimal-0\r\n  (testing \"6789 should be invalid and return 0\"\r\n    (is (= 0 (to-decimal \"6789\")))))\r\n\r\n(deftest invalid-input-with-digits-is-decimal-0\r\n  (testing \"abc1z should be 0\"\r\n    (is (= 0 (to-decimal \"abc1z\")))))\r\n\r\n(deftest leading-zero-is-okay\r\n  (testing \"Leading zero should be valid octal\"\r\n    (is (= 9 (to-decimal \"011\")))))",
 "kindergarten_garden_test"
 "(ns kindergarten-garden-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            kindergarten-garden))\r\n\r\n(deftest garden-test\r\n  (is (= [:radishes :clover :grass :grass]\r\n         (:alice (kindergarten-garden/garden \"RC\\nGG\"))))\r\n  (is (= [:violets :clover :radishes :clover]\r\n         (:alice (kindergarten-garden/garden \"VC\\nRC\")))))\r\n\r\n(deftest small-garden-test\r\n  (let [small-garden (kindergarten-garden/garden \"VVCG\\nVVRC\")]\r\n    (is (= [:clover :grass :radishes :clover] (:bob small-garden)))))\r\n\r\n(deftest medium-garden-test\r\n  (let [medium-garden (kindergarten-garden/garden \"VVCCGG\\nVVCCGG\")]\r\n    (is (= [:clover :clover :clover :clover] (:bob medium-garden)))\r\n    (is (= [:grass :grass :grass :grass] (:charlie medium-garden)))))\r\n\r\n(deftest full-garden-test\r\n  (let [string \"VRCGVVRVCGGCCGVRGCVCGCGV\\nVRCCCGCRRGVCGCRVVCVGCGCV\"\r\n        full-garden (kindergarten-garden/garden string)]\r\n    (is (= [:violets  :radishes :violets  :radishes] (:alice   full-garden)))\r\n    (is (= [:clover   :grass    :clover   :clover]   (:bob     full-garden)))\r\n    (is (= [:violets  :violets  :clover   :grass]    (:charlie full-garden)))\r\n    (is (= [:radishes :violets  :clover   :radishes] (:david   full-garden)))\r\n    (is (= [:clover   :grass    :radishes :grass]    (:eve     full-garden)))\r\n    (is (= [:grass    :clover   :violets  :clover]   (:fred    full-garden)))\r\n    (is (= [:clover   :grass    :grass    :clover]   (:ginny   full-garden)))\r\n    (is (= [:violets  :radishes :radishes :violets]  (:harriet full-garden)))\r\n    (is (= [:grass    :clover   :violets  :clover]   (:ileana  full-garden)))\r\n    (is (= [:violets  :clover   :violets  :grass]    (:joseph  full-garden)))\r\n    (is (= [:grass    :clover   :clover   :grass]    (:kincaid full-garden)))\r\n    (is (= [:grass    :violets  :clover   :violets]  (:larry   full-garden)))))\r\n\r\n(deftest surprise-garden-test\r\n  (let [string   \"VCRRGVRG\\nRVGCCGCV\"\r\n        students [\"Samantha\" \"Patricia\" \"Xander\" \"Roger\"]\r\n        surprise-garden (kindergarten-garden/garden string students)]\r\n    (is (= [:violets  :clover   :radishes :violets]\r\n           (:patricia surprise-garden)))\r\n    (is (= [:radishes :radishes :grass    :clover]\r\n           (:roger    surprise-garden)))\r\n    (is (= [:grass    :violets  :clover   :grass]\r\n           (:samantha surprise-garden)))\r\n    (is (= [:radishes :grass    :clover   :violets]\r\n           (:xander   surprise-garden)))))\r\n",
 "run_length_encoding_test"
 "(ns run-length-encoding-test\r\n  (:require [clojure.test :refer :all]\r\n            [run-length-encoding :as rle]))\r\n\r\n;;Tests for run-length-encoding exercise\r\n\r\n(deftest encode-empty-string\r\n  (testing \"encode an empty string\"\r\n    (is (= (rle/run-length-encode \"\") \"\"))))\r\n\r\n(deftest encode-single-characters-without-count\r\n  (testing \"encode single characters without count\"\r\n    (is (= (rle/run-length-encode \"XYZ\") \"XYZ\"))))\r\n\r\n(deftest encode-string-with-no-single-characters\r\n  (testing \"encode string with no single characters\"\r\n    (is (= (rle/run-length-encode \"AABBBCCCC\") \"2A3B4C\"))))\r\n\r\n(deftest encode-string-with-single-and-mixed-characters\r\n  (testing \"encode string with single and mixed characters\"\r\n    (is (= (rle/run-length-encode \"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB\") \"12WB12W3B24WB\"))))\r\n\r\n(deftest encode-multiple-whitespace\r\n  (testing \"encode string with whitespace characters mixed in it\"\r\n    (is (= (rle/run-length-encode \"  hsqq qww  \") \"2 hs2q q2w2 \"))))\r\n\r\n(deftest encode-lowercase\r\n  (testing \"encode string with lowercase characters\"\r\n    (is (= (rle/run-length-encode \"aabbbcccc\") \"2a3b4c\"))))\r\n\r\n(deftest decode-empty-string\r\n  (testing \"decode empty string\"\r\n    (is (= (rle/run-length-decode \"\") \"\"))))\r\n\r\n(deftest decode-single-characters\r\n  (testing \"decode string with single characters only\"\r\n    (is (= (rle/run-length-decode \"XYZ\") \"XYZ\"))))\r\n\r\n(deftest decode-no-single-characters\r\n  (testing \"decode string with no single characters\"\r\n    (is (= (rle/run-length-decode \"2A3B4C\") \"AABBBCCCC\"))))\r\n\r\n(deftest decode-single-and-repeated-characters\r\n  (testing \"decode string with single and repeated characters\"\r\n    (is (= (rle/run-length-decode \"12WB12W3B24WB\") \"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB\"))))\r\n\r\n(deftest decode-lowercase\r\n  (testing \"decode string with lowercase characters\"\r\n    (is (= (rle/run-length-decode \"2a3b4c\") \"aabbbcccc\"))))\r\n\r\n(deftest decode-mixed-whitespace\r\n  (testing \"decode string with mixed whitespace characters in it\"\r\n    (is (= (rle/run-length-decode \"2 hs2q q2w2 \") \"  hsqq qww  \"))))\r\n\r\n(deftest consistency\r\n  (testing \"Encode a string and then decode it. Should return the same one.\"\r\n    (is (= (rle/run-length-decode (rle/run-length-encode \"zzz ZZ  zZ\")) \"zzz ZZ  zZ\"))))\r\n",
 "international_calling_connoisseur_test"
 "(ns international-calling-connoisseur-test\r\n  (:require [clojure.test :refer [deftest testing is]]\r\n            international-calling-connoisseur))\r\n\r\n(deftest ^{:task 1} map-count-is-3\r\n  (is (= 3 (count international-calling-connoisseur/countries))))\r\n\r\n(deftest ^{:task 1} United-States-of-America-is-1\r\n  (is (= \"United States of America\" (get international-calling-connoisseur/countries 1))))\r\n\r\n(deftest ^{:task 1} Brazil-is-55\r\n  (is (= \"Brazil\" (get international-calling-connoisseur/countries 55))))\r\n\r\n(deftest ^{:task 1} India-is-55\r\n  (is (= \"India\" (get international-calling-connoisseur/countries 91))))\r\n\r\n(deftest ^{:task 2} add-country-to-empty-map-single\r\n  (is (= 1 (count (international-calling-connoisseur/add-country {} 44 \"United Kingdom\")))))\r\n\r\n(deftest ^{:task 2} add-country-to-empty-map-44-is-United-Kingdom\r\n  (is (= \"United Kingdom\" (get (international-calling-connoisseur/add-country {} 44 \"United Kingdom\") 44))))\r\n\r\n(deftest ^{:task 2} add-country-to-country-map-count-is-4\r\n  (is (= 4 (count (international-calling-connoisseur/add-country international-calling-connoisseur/countries 44 \"United Kingdom\")))))\r\n\r\n(deftest ^{:task 2} add-country-to-country-map-1-is-United-States-of-America\r\n  (is (= \"United States of America\" (get (international-calling-connoisseur/add-country international-calling-connoisseur/countries 44 \"United Kingdom\") 1))))\r\n\r\n(deftest ^{:task 2} add-country-to-country-map-44-is-United-Kingdom\r\n  (is (= \"United Kingdom\" (get (international-calling-connoisseur/add-country international-calling-connoisseur/countries 44 \"United Kingdom\") 44))))\r\n\r\n(deftest ^{:task 2} add-country-to-country-map-55-is-Brazil\r\n  (is (= \"Brazil\" (get (international-calling-connoisseur/add-country international-calling-connoisseur/countries 44 \"United Kingdom\") 55))))\r\n\r\n(deftest ^{:task 2} add-country-to-country-map-91-is-India\r\n  (is (= \"India\" (get (international-calling-connoisseur/add-country international-calling-connoisseur/countries 44 \"United Kingdom\") 91))))\r\n\r\n(deftest ^{:task 3} get-country-name-from-map\r\n  (is (= \"Brazil\" (international-calling-connoisseur/country-name international-calling-connoisseur/countries 55))))\r\n\r\n(deftest ^{:task 3} get-country-name-for-non-existent-country\r\n  (is (nil? (international-calling-connoisseur/country-name international-calling-connoisseur/countries 999))))\r\n\r\n(deftest ^{:task 5} check-country-exists\r\n  (is (true? (international-calling-connoisseur/code-exists? international-calling-connoisseur/countries 55))))\r\n\r\n(deftest ^{:task 5} check-non-existent-country-exists\r\n  (is (false? (international-calling-connoisseur/code-exists? international-calling-connoisseur/countries 999))))\r\n\r\n(deftest ^{:task 4} update-name-in-map-count-is-3\r\n  (is (= 3 (count (international-calling-connoisseur/update-country international-calling-connoisseur/countries 1 \"les États-Unis\")))))\r\n\r\n(deftest ^{:task 4} update-name-in-map-1-is-les-Etats-Unis\r\n  (is (= \"les États-Unis\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 1 \"les États-Unis\") 1))))\r\n\r\n(deftest ^{:task 4} update-name-in-map-55-is-Brazil\r\n  (is (= \"Brazil\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 1 \"les États-Unis\") 55))))\r\n\r\n(deftest ^{:task 4} update-name-in-map-91-is-India\r\n  (is (= \"India\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 1 \"les États-Unis\") 91))))\r\n\r\n(deftest ^{:task 6} update-non-existent-name-in-map-count-is-3\r\n  (is (= 3 (count (international-calling-connoisseur/update-country international-calling-connoisseur/countries 999 \"Newlands\")))))\r\n\r\n(deftest ^{:task 6} update-non-existent-name-in-map-1-is-United-States-of-America\r\n  (is (= \"United States of America\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 999 \"Newlands\") 1))))\r\n\r\n(deftest ^{:task 6} update-non-existent-name-in-map-55-is-Brazil\r\n  (is (= \"Brazil\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 999 \"Newlands\") 55))))\r\n\r\n(deftest ^{:task 6} update-non-existent-name-in-map-91-is-India\r\n  (is (= \"India\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 999 \"Newlands\") 91))))\r\n\r\n(deftest ^{:task 7} remove-country-from-map-count-is-2\r\n  (is (= 2 (count (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 91)))))\r\n\r\n(deftest ^{:task 7} remove-country-from-map-1-is-United-States-of-America\r\n  (is (= \"United States of America\" (get (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 44) 1))))\r\n\r\n(deftest ^{:task 7} remove-country-from-map-55-is-Brazil\r\n  (is (= \"Brazil\" (get (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 44) 55))))\r\n\r\n(deftest ^{:task 7} remove-non-existent-country-from-map-count-is-3\r\n  (is (= 3 (count (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 999)))))\r\n\r\n(deftest ^{:task 7} remove-non-existent-country-from-map-1-is-United-States-of-America\r\n  (is (= \"United States of America\" (get (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 999) 1))))\r\n\r\n(deftest ^{:task 7} remove-non-existent-country-from-map-55-is-Brazil\r\n  (is (= \"Brazil\" (get (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 999) 55))))\r\n\r\n(deftest ^{:task 7} remove-non-existent-country-from-map-91-is-India\r\n  (is (= \"India\" (get (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 999) 91))))\r\n\r\n(deftest ^{:task 8} longest-name\r\n  (is (= \"United States of America\" (international-calling-connoisseur/longest-name international-calling-connoisseur/countries))))\r\n\r\n(deftest ^{:task 8} longest-name-empty-map\r\n  (is (nil? (international-calling-connoisseur/longest-name {}))))",
 "prime_factors_test"
 "(ns prime-factors-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            prime-factors))\r\n\r\n(deftest one\r\n  (is (= [] (prime-factors/of 1))))\r\n\r\n(deftest two\r\n  (is (= [2] (prime-factors/of 2))))\r\n\r\n(deftest three\r\n  (is (= [3] (prime-factors/of 3))))\r\n\r\n(deftest four\r\n  (is (= [2, 2] (prime-factors/of 4))))\r\n\r\n(deftest six\r\n  (is (= [2, 3] (prime-factors/of 6))))\r\n\r\n(deftest eight\r\n  (is (= [2, 2, 2] (prime-factors/of 8))))\r\n\r\n(deftest nine\r\n  (is (= [3, 3] (prime-factors/of 9))))\r\n\r\n(deftest twenty-seven\r\n  (is (= [3, 3, 3] (prime-factors/of 27))))\r\n\r\n(deftest six-hundred-twenty-five\r\n  (is (= [5, 5, 5, 5] (prime-factors/of 625))))\r\n\r\n(deftest a-large-number\r\n  (is (= [5, 17, 23, 461] (prime-factors/of 901255))))\r\n\r\n(deftest a-huge-number\r\n  (is (= [11, 9539, 894119] (prime-factors/of 93819012551))))\r\n",
 "perfect_numbers_test"
 "(ns perfect-numbers-test\r\n  (:require\r\n   [clojure.test :refer [deftest testing is]]\r\n   [perfect-numbers]))\r\n\r\n(deftest test-initialize-perfect-number\r\n  (testing \"Negative numbers throw an exception\"\r\n    (is (thrown? IllegalArgumentException (perfect-numbers/classify -1)))))\r\n\r\n(deftest test-classify-deficient\r\n  (testing \"13 is a deficient number\"\r\n    (is (= :deficient (perfect-numbers/classify 13)))))\r\n\r\n(deftest test-classify-perfect\r\n  (testing \"28 is a perfect number\"\r\n    (is (= :perfect (perfect-numbers/classify 28)))))\r\n\r\n(deftest test-classify-abundant\r\n  (testing \"12 is an abundant number\"\r\n    (is (= :abundant (perfect-numbers/classify 12)))))\r\n",
 "raindrops_test"
 "(ns raindrops-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            raindrops))\r\n\r\n(deftest one\r\n  (is (= \"1\" (raindrops/convert 1))))\r\n\r\n(deftest three\r\n  (is (= \"Pling\" (raindrops/convert 3))))\r\n\r\n(deftest five\r\n  (is (= \"Plang\" (raindrops/convert 5))))\r\n\r\n(deftest seven\r\n  (is (= \"Plong\" (raindrops/convert 7))))\r\n\r\n(deftest six\r\n  (is (= \"Pling\" (raindrops/convert 6))))\r\n\r\n(deftest nine\r\n  (is (= \"Pling\" (raindrops/convert 9))))\r\n\r\n(deftest ten\r\n  (is (= \"Plang\" (raindrops/convert 10))))\r\n\r\n(deftest fourteen\r\n  (is (= \"Plong\" (raindrops/convert 14))))\r\n\r\n(deftest fifteen\r\n  (is (= \"PlingPlang\" (raindrops/convert 15))))\r\n\r\n(deftest twenty-one\r\n  (is (= \"PlingPlong\" (raindrops/convert 21))))\r\n\r\n(deftest twenty-five\r\n  (is (= \"Plang\" (raindrops/convert 25))))\r\n\r\n(deftest thirty-five\r\n  (is (= \"PlangPlong\" (raindrops/convert 35))))\r\n\r\n(deftest forty-nine\r\n  (is (= \"Plong\" (raindrops/convert 49))))\r\n\r\n(deftest fifty-two\r\n  (is (= \"52\" (raindrops/convert 52))))\r\n\r\n(deftest one-hundred-five\r\n  (is (= \"PlingPlangPlong\" (raindrops/convert 105))))\r\n\r\n(deftest twelve-thousand-one-hundred-twenty-one\r\n  (is (= \"12121\" (raindrops/convert 12121))))\r\n",
 "beer_song_test"
 "(ns beer-song-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            beer-song))\r\n\r\n(def verse-8\r\n  (str \"8 bottles of beer on the wall, 8 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 7 bottles of beer on the wall.\\n\"))\r\n\r\n(def verse-2\r\n  (str \"2 bottles of beer on the wall, 2 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 1 bottle of beer on the wall.\\n\"))\r\n\r\n(def verse-1\r\n  (str \"1 bottle of beer on the wall, 1 bottle of beer.\\n\"\r\n       \"Take it down and pass it around, no more bottles of beer on the wall.\\n\"))\r\n\r\n(def verse-0\r\n  (str \"No more bottles of beer on the wall, no more bottles of beer.\\n\"\r\n       \"Go to the store and buy some more, 99 bottles of beer on the wall.\\n\"))\r\n\r\n(def song-8-6\r\n  (str \"8 bottles of beer on the wall, 8 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 7 bottles of beer on the wall.\\n\\n\"\r\n       \"7 bottles of beer on the wall, 7 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 6 bottles of beer on the wall.\\n\\n\"\r\n       \"6 bottles of beer on the wall, 6 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 5 bottles of beer on the wall.\\n\"))\r\n\r\n(def song-3-0\r\n  (str \"3 bottles of beer on the wall, 3 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 2 bottles of beer on the wall.\\n\\n\"\r\n       \"2 bottles of beer on the wall, 2 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 1 bottle of beer on the wall.\\n\\n\"\r\n       \"1 bottle of beer on the wall, 1 bottle of beer.\\n\"\r\n       \"Take it down and pass it around, no more bottles of beer on the wall.\\n\\n\"\r\n       \"No more bottles of beer on the wall, no more bottles of beer.\\n\"\r\n       \"Go to the store and buy some more, 99 bottles of beer on the wall.\\n\"))\r\n\r\n(deftest test-verse-8\r\n  (is (= verse-8 (beer-song/verse 8))))\r\n\r\n(deftest test-verse-2\r\n  (is (= verse-2 (beer-song/verse 2))))\r\n\r\n(deftest test-verse-1\r\n  (is (= verse-1 (beer-song/verse 1))))\r\n\r\n(deftest test-verse-0\r\n  (is (= verse-0 (beer-song/verse 0))))\r\n\r\n(deftest test-song-8-6\r\n  (is (= song-8-6 (beer-song/sing 8 6))))\r\n\r\n(deftest test-song-3-0\r\n  (is (= song-3-0 (beer-song/sing 3))))\r\n",
 "space_age_test"
 "(ns space-age-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            space-age))\r\n\r\n(defn- rounds-to\r\n  [expected actual]\r\n  (is (= (Math/round (* 100.0 expected))\r\n         (Math/round (* 100.0 actual)))))\r\n\r\n(deftest age-in-earth-years\r\n  (rounds-to 31.69 (space-age/on-earth 1000000000)))\r\n\r\n(deftest age-in-mercury-years\r\n  (let [seconds 2134835688]\r\n    (rounds-to 67.65 (space-age/on-earth seconds))\r\n    (rounds-to 280.88 (space-age/on-mercury seconds))))\r\n\r\n(deftest age-in-venus-years\r\n  (let [seconds 189839836]\r\n    (rounds-to 6.02 (space-age/on-earth seconds))\r\n    (rounds-to 9.78 (space-age/on-venus seconds))))\r\n\r\n(deftest age-on-mars\r\n  (let [seconds 2329871239]\r\n    (rounds-to 73.83 (space-age/on-earth seconds))\r\n    (rounds-to 39.25 (space-age/on-mars seconds))))\r\n\r\n(deftest age-on-jupiter\r\n  (let [seconds 901876382]\r\n    (rounds-to 28.58 (space-age/on-earth seconds))\r\n    (rounds-to 2.41 (space-age/on-jupiter seconds))))\r\n\r\n(deftest age-on-saturn\r\n  (let [seconds 3000000000]\r\n    (rounds-to 95.06 (space-age/on-earth seconds))\r\n    (rounds-to 3.23 (space-age/on-saturn seconds))))\r\n\r\n(deftest age-on-uranus\r\n  (let [seconds 3210123456]\r\n    (rounds-to 101.72 (space-age/on-earth seconds))\r\n    (rounds-to 1.21 (space-age/on-uranus seconds))))\r\n\r\n(deftest age-on-neptune\r\n  (let [seconds 8210123456]\r\n    (rounds-to 260.16 (space-age/on-earth seconds))\r\n    (rounds-to 1.58 (space-age/on-neptune seconds))))\r\n",
 "word_count_test"
 "(ns word-count-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            word-count))\r\n\r\n(deftest count-one-word\r\n  (is (= {\"word\" 1}\r\n         (word-count/word-count \"word\"))))\r\n\r\n(deftest count-one-of-each\r\n  (is (= {\"one\" 1 \"of\" 1 \"each\" 1}\r\n         (word-count/word-count \"one of each\"))))\r\n\r\n(deftest count-multiple-occurrences\r\n  (is (= {\"one\" 1 \"fish\" 4 \"two\" 1 \"red\" 1 \"blue\" 1}\r\n         (word-count/word-count \"one fish two fish red fish blue fish\"))))\r\n\r\n(deftest ignore-punctuation\r\n  (is (= {\"car\" 1, \"carpet\" 1 \"as\" 1 \"java\" 1 \"javascript\" 1}\r\n         (word-count/word-count \"car : carpet as java : javascript!!&@$%^&\"))))\r\n\r\n(deftest include-numbers\r\n  (is (= {\"testing\" 2 \"1\" 1 \"2\" 1}\r\n         (word-count/word-count \"testing, 1, 2 testing\"))))\r\n\r\n(deftest normalize-case\r\n  (is (= {\"go\" 3}\r\n         (word-count/word-count \"go Go GO\"))))\r\n",
 "allergies_test"
 "(ns allergies-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            allergies))\r\n\r\n(deftest no-allergies-at-all\r\n  (is (= [] (allergies/allergies 0))))\r\n\r\n(deftest allergic-to-just-eggs\r\n  (is (= [:eggs] (allergies/allergies 1))))\r\n\r\n(deftest allergic-to-just-peanuts\r\n  (is (= [:peanuts] (allergies/allergies 2))))\r\n\r\n(deftest allergic-to-just-strawberries\r\n  (is (= [:strawberries] (allergies/allergies 8))))\r\n\r\n(deftest allergic-to-eggs-and-peanuts\r\n  (is (= [:eggs :peanuts] (allergies/allergies 3))))\r\n\r\n(deftest allergic-to-more-than-eggs-but-not-peanuts\r\n  (is (= [:eggs :shellfish] (allergies/allergies 5))))\r\n\r\n(deftest allergic-to-lots-of-stuff\r\n  (is (= [:strawberries :tomatoes :chocolate :pollen :cats]\r\n         (allergies/allergies 248))))\r\n\r\n(deftest allergic-to-everything\r\n  (is (= [:eggs :peanuts :shellfish :strawberries\r\n          :tomatoes :chocolate :pollen :cats]\r\n         (allergies/allergies 255))))\r\n\r\n(deftest no-allergies-means-not-allergic-peanuts\r\n  (is (not (allergies/allergic-to? 0 :peanuts))))\r\n\r\n(deftest no-allergies-means-not-allergic-cats\r\n  (is (not (allergies/allergic-to? 0 :cats))))\r\n\r\n(deftest no-allergies-means-not-allergic-strawberries\r\n  (is (not (allergies/allergic-to? 0 :strawberries))))\r\n\r\n(deftest is-allergic-to-eggs\r\n  (is (allergies/allergic-to? 1 :eggs)))\r\n\r\n(deftest allergic-to-eggs-in-addition-to-other-stuff\r\n  (is (allergies/allergic-to? 5 :eggs)))\r\n\r\n(deftest ignore-non-allergen-score-parts\r\n  (is (= [:eggs :shellfish :strawberries :tomatoes :chocolate :pollen :cats]\r\n         (allergies/allergies 509))))\r\n",
 "largest_series_product_test"
 "(ns largest-series-product-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [largest-series-product :as lsp]))\r\n\r\n(deftest largest-series-tests\r\n  (testing \"can find the largest product of 2 with numbers in order\"\r\n    (is (= 72 (lsp/largest-product 2 \"0123456789\"))))\r\n  (testing \"can find the largest product of 2\"\r\n    (is (= 48 (lsp/largest-product 2 \"576802143\"))))\r\n  (testing \"finds the largest product if span equals length\"\r\n    (is (= 18 (lsp/largest-product 2 \"29\"))))\r\n  (testing \"can find the largest product of 3 with numbers in order\"\r\n    (is (= 504 (lsp/largest-product 3 \"0123456789\"))))\r\n  (testing \"can find the largest product of 3\"\r\n    (is (= 270 (lsp/largest-product 3 \"1027839564\"))))\r\n  (testing \"can find the largest product of 5 with numbers in order\"\r\n    (is (= 15120 (lsp/largest-product 5 \"0123456789\"))))\r\n  (testing \"can get the largest product of a big number\"\r\n    (is (= 23520\r\n           (let [ds \"73167176531330624919225119674426574742355349194934\"]\r\n             (lsp/largest-product 6 ds)))))\r\n  (testing \"can get the largest product of a big number II\"\r\n    (is (= 28350\r\n           (let [ds \"52677741234314237566414902593461595376319419139427\"]\r\n             (lsp/largest-product 6 ds)))))\r\n  (testing \"can get the largest product of a big number (Project Euler)\"\r\n    (is (= 23514624000\r\n           (let [ds \"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\"]\r\n             (lsp/largest-product 13 ds)))))\r\n  (testing \"reports zero if the only digits are zero\"\r\n    (is (= 0 (lsp/largest-product 2 \"0000\"))))\r\n  (testing \"reports zero if all spans include zero\"\r\n    (is (= 0 (lsp/largest-product 3 \"99099\"))))\r\n  (testing \"rejects span longer than string length\"\r\n    (is (thrown? Throwable (lsp/largest-product 4 \"123\"))))\r\n  (testing \"rejects empty string and nonzero span\"\r\n    (is (thrown? Throwable (lsp/largest-product 1 \"\"))))\r\n  (testing \"rejects invalid character in digits\"\r\n    (is (thrown? Throwable (lsp/largest-product 2 \"1234a5\"))))\r\n  (testing \"rejects negative span\"\r\n    (is (thrown? Throwable (lsp/largest-product -1 \"12345\")))))\r\n",
 "poker_test"
 "(ns poker-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [poker :refer [best-hands]]))\r\n\r\n(defn f [xs ys] (= (sort (best-hands xs)) (sort ys)))\r\n\r\n(deftest single-hand-always-wins\r\n  (is (f [\"4S 5S 7H 8D JC\"] [\"4S 5S 7H 8D JC\"])))\r\n\r\n(deftest highest-card-out-of-all-hands-wins\r\n  (is (f [\"4D 5S 6S 8D 3C\"\r\n          \"2S 4C 7S 9H 10H\"\r\n          \"3S 4S 5D 6H JH\"]\r\n         [\"3S 4S 5D 6H JH\"])))\r\n\r\n(deftest a-tie-has-multiple-winners\r\n  (is (f [\"4D 5S 6S 8D 3C\"\r\n          \"2S 4C 7S 9H 10H\"\r\n          \"3S 4S 5D 6H JH\"\r\n          \"3H 4H 5C 6C JD\"]\r\n         [\"3S 4S 5D 6H JH\"\r\n          \"3H 4H 5C 6C JD\"])))\r\n\r\n(deftest multiple-hands-with-the-same-high-cards-tie-compares-next-highest-ranked-down-to-last-card\r\n  (is (f [\"3S 5H 6S 8D 7H\"\r\n          \"2S 5D 6D 8C 7S\"]\r\n         [\"3S 5H 6S 8D 7H\"])))\r\n\r\n(deftest one-pair-beats-high-card\r\n  (is (f [\"4S 5H 6C 8D KH\"\r\n          \"2S 4H 6S 4D JH\"]\r\n         [\"2S 4H 6S 4D JH\"])))\r\n\r\n(deftest highest-pair-wins\r\n  (is (f [\"4S 2H 6S 2D JH\"\r\n          \"2S 4H 6C 4D JD\"]\r\n         [\"2S 4H 6C 4D JD\"])))\r\n\r\n(deftest two-pairs-beats-one-pair\r\n  (is (f [\"2S 8H 6S 8D JH\"\r\n          \"4S 5H 4C 8C 5C\"]\r\n         [\"4S 5H 4C 8C 5C\"])))\r\n\r\n(deftest both-hands-have-two-pairs-highest-ranked-pair-wins\r\n  (is (f [\"2S 8H 2D 8D 3H\"\r\n          \"4S 5H 4C 8S 5D\"]\r\n         [\"2S 8H 2D 8D 3H\"])))\r\n\r\n(deftest both-hands-have-two-pairs-with-the-same-highest-ranked-pair-tie-goes-to-low-pair\r\n  (is (f [\"2S QS 2C QD JH\"\r\n          \"JD QH JS 8D QC\"]\r\n         [\"JD QH JS 8D QC\"])))\r\n\r\n(deftest both-hands-have-two-identically-ranked-pairs-tie-goes-to-remaining-card-kicker\r\n  (is (f [\"JD QH JS 8D QC\"\r\n          \"JS QS JC 2D QD\"]\r\n         [\"JD QH JS 8D QC\"])))\r\n\r\n(deftest three-of-a-kind-beats-two-pair\r\n  (is (f [\"2S 8H 2H 8D JH\"\r\n          \"4S 5H 4C 8S 4H\"]\r\n         [\"4S 5H 4C 8S 4H\"])))\r\n\r\n(deftest both-hands-have-three-of-a-kind-tie-goes-to-highest-ranked-triplet\r\n  (is (f [\"2S 2H 2C 8D JH\"\r\n          \"4S AH AS 8C AD\"]\r\n         [\"4S AH AS 8C AD\"])))\r\n\r\n(deftest with-multiple-decks-two-players-can-have-same-three-of-a-kind-ties-go-to-highest-remaining-cards\r\n  (is (f [\"4S AH AS 7C AD\"\r\n          \"4S AH AS 8C AD\"]\r\n         [\"4S AH AS 8C AD\"])))\r\n\r\n(deftest a-straight-beats-three-of-a-kind\r\n  (is (f [\"4S 5H 4C 8D 4H\"\r\n          \"3S 4D 2S 6D 5C\"]\r\n         [\"3S 4D 2S 6D 5C\"])))\r\n\r\n(deftest aces-can-end-a-straight-10-J-Q-K-A\r\n  (is (f [\"4S 5H 4C 8D 4H\"\r\n          \"10D JH QS KD AC\"]\r\n         [\"10D JH QS KD AC\"])))\r\n\r\n(deftest aces-can-start-a-straight-A-2-3-4-5\r\n  (is (f [\"4S 5H 4C 8D 4H\"\r\n          \"4D AH 3S 2D 5C\"]\r\n         [\"4D AH 3S 2D 5C\"])))\r\n\r\n(deftest both-hands-with-a-straight-tie-goes-to-highest-ranked-card\r\n  (is (f [\"4S 6C 7S 8D 5H\"\r\n          \"5S 7H 8S 9D 6H\"]\r\n         [\"5S 7H 8S 9D 6H\"])))\r\n\r\n(deftest even-though-an-ace-is-usually-high-a-5-high-straight-is-the-lowest-scoring-straight\r\n  (is (f [\"2H 3C 4D 5D 6H\"\r\n          \"4S AH 3S 2D 5H\"]\r\n         [\"2H 3C 4D 5D 6H\"])))\r\n\r\n(deftest flush-beats-a-straight\r\n  (is (f [\"4C 6H 7D 8D 5H\"\r\n          \"2S 4S 5S 6S 7S\"]\r\n         [\"2S 4S 5S 6S 7S\"])))\r\n\r\n(deftest both-hands-have-a-flush-tie-goes-to-high-card-down-to-the-last-one-if-necessary\r\n  (is (f [\"4H 7H 8H 9H 6H\"\r\n          \"2S 4S 5S 6S 7S\"]\r\n         [\"4H 7H 8H 9H 6H\"])))\r\n\r\n(deftest full-house-beats-a-flush\r\n  (is (f [\"3H 6H 7H 8H 5H\"\r\n          \"4S 5H 4C 5D 4H\"]\r\n         [\"4S 5H 4C 5D 4H\"])))\r\n\r\n(deftest both-hands-have-a-full-house-tie-goes-to-highest-ranked-triplet\r\n  (is (f [\"4H 4S 4D 9S 9D\"\r\n          \"5H 5S 5D 8S 8D\"]\r\n         [\"5H 5S 5D 8S 8D\"])))\r\n\r\n(deftest with-multiple-decks-both-hands-have-a-full-house-with-the-same-triplet-tie-goes-to-the-pair\r\n  (is (f [\"5H 5S 5D 9S 9D\"\r\n          \"5H 5S 5D 8S 8D\"]\r\n         [\"5H 5S 5D 9S 9D\"])))\r\n\r\n(deftest four-of-a-kind-beats-a-full-house\r\n  (is (f [\"4S 5H 4D 5D 4H\"\r\n          \"3S 3H 2S 3D 3C\"]\r\n         [\"3S 3H 2S 3D 3C\"])))\r\n\r\n(deftest both-hands-have-four-of-a-kind-tie-goes-to-high-quad\r\n  (is (f [\"2S 2H 2C 8D 2D\"\r\n          \"4S 5H 5S 5D 5C\"]\r\n         [\"4S 5H 5S 5D 5C\"])))\r\n\r\n(deftest with-multiple-decks-both-hands-with-identical-four-of-a-kind-tie-determined-by-kicker\r\n  (is (f [\"3S 3H 2S 3D 3C\"\r\n          \"3S 3H 4S 3D 3C\"]\r\n         [\"3S 3H 4S 3D 3C\"])))\r\n\r\n(deftest straight-flush-beats-four-of-a-kind\r\n  (is (f [\"4S 5H 5S 5D 5C\"\r\n          \"7S 8S 9S 6S 10S\"]\r\n         [\"7S 8S 9S 6S 10S\"])))\r\n\r\n(deftest both-hands-have-straight-flush-tie-goes-to-highest-ranked-card\r\n  (is (f [\"4H 6H 7H 8H 5H\"\r\n          \"5S 7S 8S 9S 6S\"]\r\n         [\"5S 7S 8S 9S 6S\"])))\r\n",
 "triangle_test"
 "(ns triangle-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            triangle))\r\n\r\n(deftest equilateral-all-sides-equal\r\n      (is (true? (triangle/equilateral? 2 2 2))))\r\n\r\n(deftest equilateral-any-side-is-unequal\r\n      (is (false? (triangle/equilateral? 2 3 2))))\r\n\r\n(deftest equilateral-no-sides-are-equal\r\n      (is (false? (triangle/equilateral? 5 4 6))))\r\n\r\n(deftest equilateral-all-zero-sides\r\n      (is (false? (triangle/equilateral? 0 0 0))))\r\n\r\n(deftest equilateral-sides-may-be-floats\r\n      (is (true? (triangle/equilateral? 0.5 0.5 0.5))))\r\n\r\n(deftest isosceles-last-two-sides-equal\r\n      (is (true? (triangle/isosceles? 3 4 4))))\r\n\r\n(deftest isosceles-first-two-sides-equal\r\n      (is (true? (triangle/isosceles? 4 4 3))))\r\n\r\n(deftest isosceles-first-last-sides-equal\r\n      (is (true? (triangle/isosceles? 4 3 4))))\r\n\r\n(deftest isosceles-equilateral-triangles-also-isosceles\r\n      (is (true? (triangle/isosceles? 4 4 4))))\r\n\r\n(deftest isosceles-no-sides-equal\r\n      (is (false? (triangle/isosceles? 2 3 4))))\r\n\r\n(deftest isosceles-first-triangle-inequality-violation\r\n      (is (false? (triangle/isosceles? 1 1 3))))\r\n\r\n(deftest isosceles-second-triangle-inequality-violation\r\n      (is (false? (triangle/isosceles? 1 3 1))))\r\n\r\n(deftest isosceles-third-triangle-inequality-violation\r\n      (is (false? (triangle/isosceles? 3 1 1))))\r\n\r\n(deftest isosceles-sides-may-be-floats\r\n      (is (true? (triangle/isosceles? 0.5 0.4 0.5))))\r\n\r\n(deftest scalene-no-sides-are-equal\r\n      (is (true? (triangle/scalene? 5 4 6))))\r\n\r\n(deftest scalene-all-sides-equal\r\n      (is (false? (triangle/scalene? 4 4 4))))\r\n\r\n(deftest scalene-two-sides-equal\r\n      (is (false? (triangle/scalene? 4 4 3))))\r\n\r\n(deftest scalene-may-not-violate-triangle-inequality\r\n      (is (false? (triangle/scalene? 7 3 2))))\r\n\r\n(deftest scalene-sides-may-be-floats\r\n      (is (true? (triangle/scalene? 0.5 0.4 0.6))))\r\n",
 "phone_number_test"
 "(ns phone-number-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            phone-number))\r\n\r\n(deftest cleans-number\r\n  (is (= \"2234567890\" (phone-number/number \"(223) 456-7890\"))))\r\n\r\n(deftest cleans-number-with-dots\r\n  (is (= \"5558675309\" (phone-number/number \"555.867.5309\"))))\r\n\r\n(deftest valid-when-11-digits-and-first-is-1\r\n  (is (= \"9876543210\" (phone-number/number \"19876543210\"))))\r\n\r\n(deftest invalid-when-area-code-starts-with-0\r\n  (is (= \"0000000000\" (phone-number/number \"0234567890\"))))\r\n\r\n(deftest invalid-when-area-code-starts-with-1\r\n  (is (= \"0000000000\" (phone-number/number \"1234567890\"))))\r\n\r\n(deftest invalid-when--code-starts-with-0\r\n  (is (= \"0000000000\" (phone-number/number \"0234567890\"))))\r\n\r\n(deftest invalid-when-exchange-code-starts-with-1\r\n  (is (= \"0000000000\" (phone-number/number \"2231567890\"))))\r\n\r\n(deftest invalid-when-exchange-code-starts-with-0\r\n  (is (= \"0000000000\" (phone-number/number \"2230567890\"))))\r\n\r\n(deftest invalid-when-11-digits\r\n  (is (= \"0000000000\" (phone-number/number \"22234567890\"))))\r\n\r\n(deftest invalid-when-9-digits\r\n  (is (= \"0000000000\" (phone-number/number \"123456789\"))))\r\n\r\n(deftest area-code\r\n  (is (= \"223\" (phone-number/area-code \"2234567890\"))))\r\n\r\n(deftest area-code-with-dots\r\n  (is (= \"555\" (phone-number/area-code \"555.867.5309\"))))\r\n\r\n(deftest area-code-with-parentheses\r\n  (is (= \"987\" (phone-number/area-code \"(987) 654-3210\"))))\r\n\r\n(deftest area-code-with-full-us-phone-number\r\n  (is (= \"223\" (phone-number/area-code \"12234567890\"))))\r\n\r\n(deftest pretty-print\r\n  (is (= \"(223) 456-7890\" (phone-number/pretty-print \"2234567890\"))))\r\n\r\n(deftest pretty-print-with-dots\r\n  (is (= \"(555) 867-5309\" (phone-number/pretty-print \"555.867.5309\"))))\r\n\r\n(deftest pretty-print-with-full-us-phone-number\r\n  (is (= \"(987) 654-3210\" (phone-number/pretty-print \"19876543210\"))))\r\n",
 "rna_transcription_test"
 "(ns rna-transcription-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            rna-transcription))\r\n\r\n(deftest transcribes-cytosine-to-guanine\r\n  (is (= \"G\" (rna-transcription/to-rna \"C\"))))\r\n\r\n(deftest transcribes-guanine-to-cytosine\r\n  (is (= \"C\" (rna-transcription/to-rna \"G\"))))\r\n\r\n(deftest transcribes-adenine-to-uracil\r\n  (is (= \"U\" (rna-transcription/to-rna \"A\"))))\r\n\r\n(deftest it-transcribes-thymine-to-adenine\r\n  (is (= \"A\" (rna-transcription/to-rna \"T\"))))\r\n\r\n(deftest it-transcribes-all-nucleotides\r\n  (is (= \"UGCACCAGAAUU\" (rna-transcription/to-rna \"ACGTGGTCTTAA\"))))\r\n\r\n(deftest it-validates-dna-strands\r\n  (is (thrown? AssertionError (rna-transcription/to-rna \"XCGFGGTDTTAA\"))))\r\n",
 "minesweeper_test"
 "(ns minesweeper-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [clojure.string :refer [join]]\r\n            [minesweeper :refer [draw]]))\r\n\r\n(def line-separator (System/getProperty \"line.separator\"))\r\n\r\n(deftest zero-size-board\r\n  (is (= (draw \"\") \"\")))\r\n\r\n(deftest empty-board\r\n  (is (= (draw (join line-separator [\"   \"\r\n                                     \"   \"\r\n                                     \"   \"]))\r\n         (join line-separator [\"   \"\r\n                               \"   \"\r\n                               \"   \"]))))\r\n\r\n(deftest surrounded\r\n  (is (= (draw (join line-separator [\"***\"\r\n                                     \"* *\"\r\n                                     \"***\"]))\r\n         (join line-separator [\"***\"\r\n                               \"*8*\"\r\n                               \"***\"]))))\r\n\r\n(deftest board-full-of-mines\r\n  (is (= (draw (join line-separator [\"***\"\r\n                                     \"***\"\r\n                                     \"***\"]))\r\n         (join line-separator [\"***\"\r\n                               \"***\"\r\n                               \"***\"]))))\r\n\r\n(deftest horizontal-line\r\n  (is (= (draw \" * * \")\r\n         \"1*2*1\")))\r\n\r\n(deftest vertical-line\r\n  (is (= (draw (join line-separator [\" \"\r\n                                     \"*\"\r\n                                     \" \"\r\n                                     \"*\"\r\n                                     \" \"]))\r\n         (join line-separator [\"1\"\r\n                               \"*\"\r\n                               \"2\"\r\n                               \"*\"\r\n                               \"1\"]))))\r\n\r\n(deftest cross\r\n  (is (= (draw (join line-separator [\"  *  \"\r\n                                     \"  *  \"\r\n                                     \"*****\"\r\n                                     \"  *  \"\r\n                                     \"  *  \"]))\r\n         (join line-separator [\" 2*2 \"\r\n                               \"25*52\"\r\n                               \"*****\"\r\n                               \"25*52\"\r\n                               \" 2*2 \"]))))\r\n\r\n",
 "luhn_test"
 "(ns luhn-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            luhn))\r\n\r\n(deftest single-digit-strings\r\n    (is (false? (luhn/valid? \"1\"))))\r\n\r\n(deftest single-zero\r\n    (is (false? (luhn/valid? \"0\"))))\r\n\r\n(deftest sin\r\n    (is (true? (luhn/valid? \" 5 9 \"))))\r\n\r\n(deftest Canadian-SIN\r\n    (is (true? (luhn/valid? \"046 454 286\"))))\r\n\r\n(deftest invalid-Canadian-SIN\r\n    (is (false? (luhn/valid? \"046 454 287\"))))\r\n\r\n(deftest invalid-credit-card\r\n    (is (false? (luhn/valid? \"8273 1232 7352 0569\"))))\r\n\r\n(deftest non-digit-added\r\n    (is (false? (luhn/valid? \"046a 454 286\"))))\r\n\r\n(deftest punctuation\r\n    (is (false? (luhn/valid? \"055-444-285\"))))\r\n\r\n(deftest symbols\r\n    (is (false? (luhn/valid? \"055£ 444$ 285\"))))\r\n\r\n(deftest single-zero-with-space\r\n    (is (false? (luhn/valid? \" 0\"))))\r\n\r\n(deftest lots-of-zeros\r\n    (is (true? (luhn/valid? \" 00000\"))))\r\n\r\n(deftest another-valid-sin\r\n    (is (true? (luhn/valid? \"055 444 285\"))))\r\n\r\n(deftest nine-doubled\r\n    (is (true? (luhn/valid? \"091\"))))\r\n",
 "matching_brackets_test"
 "(ns matching-brackets-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            matching-brackets))\r\n\r\n(deftest paired-square\r\n  (is (matching-brackets/valid? \"[]\") \"paired square brackets\"))\r\n\r\n(deftest empty-string\r\n  (is (matching-brackets/valid? \"\") \"empty string\"))\r\n\r\n(deftest unpaired-brackets\r\n  (is (false? (matching-brackets/valid? \"[[\")) \"unpaired brackets\"))\r\n\r\n(deftest wrong-ordered-brackets\r\n  (is (false? (matching-brackets/valid? \"}{\")) \"wrong ordered brackets\"))\r\n\r\n(deftest paired-with-whitespace\r\n  (is (matching-brackets/valid? \"{ }\") \"paired with whitespace\"))\r\n\r\n(deftest simple-nested-brackets\r\n  (is (matching-brackets/valid? \"{[]}\")\r\n      \"simple nested brackets\"))\r\n\r\n(deftest several-paired-brackets\r\n  (is (matching-brackets/valid? \"{}[]\")\r\n      \"several paired brackets\"))\r\n\r\n(deftest paired-and-nested-brackets\r\n  (is (matching-brackets/valid? \"([{}({}[])])\")\r\n      \"paired and nested brackets\"))\r\n\r\n(deftest unopened-closing-brackets\r\n  (is (false? (matching-brackets/valid? \"{[)][]}\"))\r\n      \"unopened closing brackets\"))\r\n \r\n(deftest unpaired-and-nested-brackets\r\n  (is (false? (matching-brackets/valid? \"([{])\"))\r\n      \"unpaired and nested brackets\"))\r\n\r\n(deftest paired-and-wrong-nested-brackets\r\n  (is (false? (matching-brackets/valid? \"[({]})\"))\r\n      \"paired and wrong nested brackets\"))\r\n\r\n(deftest math-expression\r\n  (is (matching-brackets/valid? \"(((185 + 223.85) * 15) - 543)/2\")\r\n      \"math expression\"))\r\n\r\n(deftest complex-latex-expression\r\n  (is (matching-brackets/valid? \"\\\\\\\\left(\\\\\\\\begin{array}{cc} \\\\\\\\frac{1}{3} & x\\\\\\\\\\\\\\\\ \\\\\\\\mathrm{e}^{x} &... x^2 \\\\\\\\end{array}\\\\\\\\right)\")\r\n      \"complex latex expression\"))\r\n",
 "anagram_test"
 "(ns anagram-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            anagram))\r\n\r\n(deftest no-matches\r\n  (is (= []\r\n         (anagram/anagrams-for \"diaper\" [\"hello\" \"world\" \"zombies\" \"pants\"]))))\r\n\r\n(deftest detect-simple-anagram\r\n  (is (= [\"tan\"] (anagram/anagrams-for \"ant\" [\"tan\" \"stand\" \"at\"]))))\r\n\r\n(deftest does-not-confuse-different-duplicates\r\n  (is (= [] (anagram/anagrams-for \"galea\" [\"eagle\"]))))\r\n\r\n(deftest eliminate-anagram-subsets\r\n  (is (= [] (anagram/anagrams-for \"good\" [\"dog\" \"goody\"]))))\r\n\r\n(deftest detect-anagram\r\n  (is (= [\"inlets\"]\r\n         (let [coll [\"enlists\" \"google\" \"inlets\" \"banana\"]]\r\n           (anagram/anagrams-for \"listen\" coll)))))\r\n\r\n(deftest multiple-anagrams\r\n  (is (= [\"gallery\" \"regally\" \"largely\"]\r\n         (let [coll [\"gallery\" \"ballerina\" \"regally\"\r\n                     \"clergy\"  \"largely\"   \"leading\"]]\r\n           (anagram/anagrams-for \"allergy\" coll)))))\r\n\r\n(deftest case-insensitive-anagrams\r\n  (is (= [\"Carthorse\"]\r\n         (let [coll [\"cashregister\" \"Carthorse\" \"radishes\"]]\r\n           (anagram/anagrams-for \"Orchestra\" coll)))))\r\n\r\n(deftest word-is-not-own-anagram\r\n  (is (= [] (anagram/anagrams-for \"banana\" [\"banana\"]))))\r\n\r\n(deftest capital-word-is-not-own-anagram\r\n  (is (= [] (anagram/anagrams-for \"BANANA\" [\"banana\"]))))\r\n",
 "isogram_test"
 "(ns isogram-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            isogram))\r\n\r\n(deftest test-isograms\r\n  (is (isogram/isogram? \"duplicates\"))\r\n  (is (isogram/isogram? \"subdermatoglyphic\"))\r\n  (is (isogram/isogram? \"thumbscrew-japingly\"))\r\n  (is (isogram/isogram? \"Hjelmqvist-Gryb-Zock-Pfund-Wax\"))\r\n  (is (isogram/isogram? \"Heizölrückstoßabdämpfung\"))\r\n  (is (isogram/isogram? \"Emily Jung Schwartzkopf\")))\r\n\r\n(deftest test-non-isograms\r\n  (is (not (isogram/isogram? \"eleven\")))\r\n  (is (not (isogram/isogram? \"Alphabet\")))\r\n  (is (not (isogram/isogram? \"the quick brown fox\")))\r\n  (is (not (isogram/isogram? \"éléphant\"))))\r\n",
 "sum_of_multiples_test"
 "(ns sum-of-multiples-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            sum-of-multiples))\r\n\r\n(deftest sum-to-1\r\n  (is (zero? (sum-of-multiples/sum-of-multiples '(3 5) 1))))\r\n\r\n(deftest sum-to-4\r\n  (is (= 3 (sum-of-multiples/sum-of-multiples '(3 5) 4))))\r\n\r\n(deftest sum-to-10\r\n  (is (= 23 (sum-of-multiples/sum-of-multiples '(3 5) 10))))\r\n\r\n(deftest sum-to-100\r\n  (is (= 2318 (sum-of-multiples/sum-of-multiples '(3 5) 100))))\r\n\r\n(deftest sum-to-1000\r\n  (is (= 233168 (sum-of-multiples/sum-of-multiples '(3 5) 1000))))\r\n\r\n(deftest sum-to-20-using-7-13-17\r\n  (is (= 51 (sum-of-multiples/sum-of-multiples '(7 13 17) 20))))\r\n\r\n(deftest sum-to-15-using-4-6\r\n  (is (= 30 (sum-of-multiples/sum-of-multiples '(4 6) 15))))\r\n\r\n(deftest sum-to-150-using-5-6-8\r\n  (is (= 4419 (sum-of-multiples/sum-of-multiples '(5 6 8) 150))))\r\n\r\n(deftest sum-to-51-using-5-25\r\n  (is (= 275 (sum-of-multiples/sum-of-multiples '(5 25) 51))))\r\n\r\n(deftest sum-to-10_000-using-43-47\r\n  (is (= 2203160 (sum-of-multiples/sum-of-multiples '(43 47) 10000))))\r\n\r\n(deftest sum-to-100-using-1\r\n  (is (= 4950 (sum-of-multiples/sum-of-multiples '(1) 100))))\r\n\r\n(deftest sum-to-10_000-using-empty\r\n  (is (zero? (sum-of-multiples/sum-of-multiples '() 10000))))\r\n",
 "elyses_destructured_enchantments_test"
 "(ns elyses-destructured-enchantments-test\r\n  (:require [clojure.test :refer :all]\r\n            [elyses-destructured-enchantments :refer :all]))\r\n\r\n(deftest ^{:task 1} first-card-single-test\r\n  (is (= 3 (first-card [3]))))\r\n\r\n(deftest ^{:task 1} first-card-multiple-test\r\n  (is (= 8 (first-card [8 3 9 5]))))\r\n\r\n(deftest ^{:task 2} second-card-2-test\r\n  (is (= 4 (second-card [10 4]))))\r\n\r\n(deftest ^{:task 2} second-card-4-test\r\n  (is (= 5 (second-card [2 5 1 6]))))\r\n\r\n(deftest ^{:task 2} second-card-empty-test\r\n  (is (nil? (second-card []))))\r\n\r\n(deftest ^{:task 2} second-card-single-test\r\n  (is (nil? (second-card [8]))))\r\n\r\n(deftest ^{:task 3} swap-top-two-cards-2-test\r\n  (is (= [6 3] (swap-top-two-cards [3 6]))))\r\n\r\n(deftest ^{:task 3} swap-top-two-cards-5-test\r\n  (is (= [4 10 3 7 8] (swap-top-two-cards [10 4 3 7 8]))))\r\n\r\n(deftest ^{:task 4} discard-top-card-single-test\r\n  (is (= [7 nil] (discard-top-card [7]))))\r\n\r\n(deftest ^{:task 4} discard-top-card-4-test\r\n  (is (= [9 [2 10 4]] (discard-top-card [9 2 10 4]))))\r\n\r\n(deftest ^{:task 5} insert-face-cards-3-test\r\n  (is (= [3 \"jack\" \"queen\" \"king\" 10 7] (insert-face-cards [3 10 7]))))\r\n\r\n(deftest ^{:task 5} insert-face-cards-1-test\r\n  (is (= [9 \"jack\" \"queen\" \"king\"] (insert-face-cards [9]))))\r\n\r\n(deftest ^{:task 5} insert-face-cards-empty-test\r\n  (is (= [\"jack\" \"queen\" \"king\"] (insert-face-cards []))))\r\n",
 "coordinate_transformation_test"
 "(ns coordinate-transformation-test\r\n  (:require [clojure.test :refer [deftest testing is function?]]\r\n            [coordinate-transformation :refer [translate2d scale2d compose-transform memoize-transform]]))\r\n\r\n(deftest translate2d-test\r\n  (testing \"should return a function\"\r\n    (is (true? (function? translate2d))))\r\n  (testing \"should be predictable\"\r\n    (is (let [dx 3 dy -5\r\n              translator (translate2d dx dy)\r\n              x1 0 y1 0\r\n              expected [3 -5]]\r\n          (= expected (translator x1 y1)))))\r\n  (testing \"should be reusable\"\r\n    (is (let [dx 3 dy -5\r\n              translator (translate2d dx dy)\r\n              x2 4 y2 5\r\n              reusedExpected [7 0]]\r\n          (= reusedExpected (translator x2 y2))))))\r\n\r\n(deftest scale2d-test\r\n  (testing \"should return a function\"\r\n    (is (true? (function? scale2d))))\r\n  (testing \"should be predictable\"\r\n    (is (let [dx             4\r\n              dy             2\r\n              scaler         (scale2d dx dy)\r\n              x1             1\r\n              y1             1\r\n              expected       [4 2]]\r\n          (= expected (scaler x1 y1)))))\r\n  (testing \"should be reusable\"\r\n    (is (let [dx             4\r\n              dy             2\r\n              scaler         (scale2d dx dy)\r\n              x2             -2\r\n              y2             5\r\n              reusedExpected [-8 10]]\r\n          (= reusedExpected (scaler x2 y2))))))\r\n\r\n(deftest compose-transform-test\r\n (testing \"should return a function\"\r\n   (is (let [dx         -6\r\n             dy         10\r\n             translator (translate2d dx dy)\r\n             sx         3\r\n             sy         2\r\n             scaler     (scale2d sx sy)]\r\n         (true? (function? (compose-transform translator scaler))))))\r\n  (testing \"should compose two translate functions\"\r\n   (is (let [dx         -6\r\n             dy         10\r\n             translator (translate2d dx dy)\r\n             compose-translate (compose-transform translator translator)]\r\n         (= [-12 20] (compose-translate 0 0)))))\r\n         (testing\r\n          \"should compose two scale functions\"\r\n          (is (let [sx         3\r\n                    sy         2\r\n                    scaler     (scale2d sx sy)\r\n                    compose-scale (compose-transform scaler scaler)]\r\n                (= [9 4] (compose-scale 1 1)))))\r\n         (testing \"should compose in the correct order: g(f(x))\"\r\n          (is\r\n            (let [dx         -6\r\n                  dy         10\r\n                  translator (translate2d dx dy)\r\n                  sx         3\r\n                  sy         2\r\n                  scaler     (scale2d sx sy)\r\n                  composed (compose-transform scaler translator)]\r\n              (= [-6 10] (composed 0 0)))))\r\n         (testing \"should compose in the opposite order: g(f(x))\"\r\n          (is (let [dx         -6\r\n                    dy         10\r\n                    translator (translate2d dx dy)\r\n                    sx         3\r\n                    sy         2\r\n                    scaler     (scale2d sx sy)\r\n                    composed (compose-transform translator scaler)]\r\n                (= [-18 20] (composed 0 0))))))\r\n\r\n(deftest memoize-transform-test\r\n  (testing \"should return a function\"\r\n    (is (function? (memoize-transform (translate2d 2 2)))))\r\n  (testing \"should return the same result if given the same input\"\r\n    (is (= [4 4] (let [memoized-translate (memoize-transform (translate2d 2 2))]\r\n                   (memoized-translate 2 2))))\r\n    (is (= [4 4] (let [memoized-translate (memoize-transform (translate2d 2 2))]\r\n                   (memoized-translate 2 2)))))\r\n  (testing \"should return different results for different inputs\"\r\n    (is (= [3 4] (let [memoized-translate (memoize-transform (translate2d 1 2))]\r\n                   (memoized-translate 2 2))))\r\n    (is (= [7 8] (let [memoized-translate (memoize-transform (translate2d 1 2))]\r\n                   (memoized-translate 6 6)))))\r\n  (testing \"should not call the memoized function if the input is the same\"\r\n    (let [fake-first (atom true)\r\n          fake-transform (fn [_ _]\r\n                           (if @fake-first\r\n                             (do (reset! fake-first false)\r\n                                 [1 1])\r\n                             false))\r\n          memoized-transform (memoize-transform fake-transform)]\r\n      (is (= [1 1] (memoized-transform 5 5)))\r\n      (is (= [1 1] (memoized-transform 5 5)))))\r\n  (testing \"should only remember the last result\"\r\n    (let [mock-fn (let [n (atom 0)]\r\n                    (with-meta\r\n                      (fn [x y]\r\n                        (swap! n inc)\r\n                        [(* x 2) (* y 2)])\r\n                      {::call-count (fn [] @n)}))\r\n          memoized-transform (memoize-transform mock-fn)]\r\n      (is (= [2 2] (memoized-transform 1 1)))\r\n      (is (= [4 4] (memoized-transform 2 2)))\r\n      (is (= [2 2] (memoized-transform 1 1)))\r\n      (is (= 3 ((::call-count (meta mock-fn))))))))\r\n",
 "hexadecimal_test"
 "(ns hexadecimal-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            hexadecimal))\r\n\r\n(deftest hex-to-int-test\r\n  (is (= 1 (hexadecimal/hex-to-int \"1\")))\r\n  (is (= 12 (hexadecimal/hex-to-int \"c\")))\r\n  (is (= 16 (hexadecimal/hex-to-int \"10\")))\r\n  (is (= 175 (hexadecimal/hex-to-int \"af\")))\r\n  (is (= 256 (hexadecimal/hex-to-int \"100\")))\r\n  (is (= 105166 (hexadecimal/hex-to-int \"19ace\")))\r\n  (is (= 0 (hexadecimal/hex-to-int \"carrot\")))\r\n  (is (= 0 (hexadecimal/hex-to-int \"000000\")))\r\n  (is (= 16777215 (hexadecimal/hex-to-int \"ffffff\")))\r\n  (is (= 16776960 (hexadecimal/hex-to-int \"ffff00\"))))\r\n",
 "robot_name_test"
 "(ns robot-name-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            robot-name))\r\n\r\n(deftest robot-name\r\n  (let [a-robot (robot-name/robot)\r\n        its-name (robot-name/robot-name a-robot)]\r\n      (is (re-seq #\"[A-Z]{2}\\d{3}\" its-name))))\r\n\r\n(deftest name-matches-pattern\r\n   (let [a-robot (robot-name/robot)\r\n         its-name (robot-name/robot-name a-robot)]\r\n     (is (= its-name (robot-name/robot-name a-robot)))))\r\n\r\n(deftest different-robots-different-names\r\n (let [a-robot (robot-name/robot)\r\n        its-name (robot-name/robot-name a-robot)]\r\n      (is (not= its-name (-> (robot-name/robot) robot-name/robot-name)))))\r\n\r\n(deftest new-name-matches\r\n  (let [a-robot (robot-name/robot)\r\n        its-original-name (robot-name/robot-name a-robot)\r\n        its-new-name (do (robot-name/reset-name a-robot)\r\n                         (robot-name/robot-name a-robot))]\r\n      (is (re-seq #\"[A-Z]{2}\\d{3}\" its-new-name))))\r\n\r\n(deftest new-name-different\r\n  (let [a-robot (robot-name/robot)\r\n        its-original-name (robot-name/robot-name a-robot)\r\n        its-new-name (do (robot-name/reset-name a-robot)\r\n                         (robot-name/robot-name a-robot))]\r\n      (is (not= its-original-name its-new-name))))\r\n\r\n(deftest new-name-does-not-change-until-reset\r\n  (let [a-robot (robot-name/robot)\r\n        its-original-name (robot-name/robot-name a-robot)\r\n        its-new-name (do (robot-name/reset-name a-robot)\r\n                         (robot-name/robot-name a-robot))]\r\n      (is (= its-new-name (robot-name/robot-name a-robot)))))\r\n\r\n(deftest new-names-different-each-time\r\n  (let [a-robot (robot-name/robot)\r\n        its-original-name (robot-name/robot-name a-robot)\r\n        its-new-name (do (robot-name/reset-name a-robot)\r\n                         (robot-name/robot-name a-robot))]\r\n  (is (not= its-new-name (do (robot-name/reset-name a-robot)\r\n                             (robot-name/robot-name a-robot))))))\r\n",
 "spiral_matrix_test"
 "(ns spiral-matrix-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [spiral-matrix :refer [spiral]]))\r\n\r\n(deftest spiral-matrix-of-0\r\n  (testing \"spiral matrix of 0\"\r\n    (is (= (spiral 0)\r\n           '()))))\r\n\r\n(deftest spiral-matrix-of-1\r\n  (testing \"spiral matrix of 1\"\r\n    (is (= (spiral 1)\r\n           '((1))))))\r\n\r\n(deftest spiral-matrix-of-2\r\n  (testing \"spiral matrix of 2\"\r\n    (is (= (spiral 2)\r\n           '((1 2)\r\n             (4 3))))))\r\n\r\n(deftest spiral-matrix-of-3\r\n  (testing \"spiral matrix of 3\"\r\n    (is (= (spiral 3)\r\n           '((1 2 3)\r\n             (8 9 4)\r\n             (7 6 5))))))\r\n\r\n(deftest spiral-matrix-of-4\r\n  (testing \"spiral matrix of 4\"\r\n    (is (= (spiral 4)\r\n           '((1  2  3  4)\r\n             (12 13 14 5)\r\n             (11 16 15 6)\r\n             (10 9  8  7))))))\r\n\r\n(deftest spiral-matrix-of-20\r\n  (testing \"spiral matrix of 20\"\r\n    (is (= (spiral 20)\r\n           '((1  2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20)\r\n             (76 77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  21)\r\n             (75 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 95  22)\r\n             (74 143 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 161 96  23)\r\n             (73 142 203 256 257 258 259 260 261 262 263 264 265 266 267 268 219 162 97  24)\r\n             (72 141 202 255 300 301 302 303 304 305 306 307 308 309 310 269 220 163 98  25)\r\n             (71 140 201 254 299 336 337 338 339 340 341 342 343 344 311 270 221 164 99  26)\r\n             (70 139 200 253 298 335 364 365 366 367 368 369 370 345 312 271 222 165 100 27)\r\n             (69 138 199 252 297 334 363 384 385 386 387 388 371 346 313 272 223 166 101 28)\r\n             (68 137 198 251 296 333 362 383 396 397 398 389 372 347 314 273 224 167 102 29)\r\n             (67 136 197 250 295 332 361 382 395 400 399 390 373 348 315 274 225 168 103 30)\r\n             (66 135 196 249 294 331 360 381 394 393 392 391 374 349 316 275 226 169 104 31)\r\n             (65 134 195 248 293 330 359 380 379 378 377 376 375 350 317 276 227 170 105 32)\r\n             (64 133 194 247 292 329 358 357 356 355 354 353 352 351 318 277 228 171 106 33)\r\n             (63 132 193 246 291 328 327 326 325 324 323 322 321 320 319 278 229 172 107 34)\r\n             (62 131 192 245 290 289 288 287 286 285 284 283 282 281 280 279 230 173 108 35)\r\n             (61 130 191 244 243 242 241 240 239 238 237 236 235 234 233 232 231 174 109 36)\r\n             (60 129 190 189 188 187 186 185 184 183 182 181 180 179 178 177 176 175 110 37)\r\n             (59 128 127 126 125 124 123 122 121 120 119 118 117 116 115 114 113 112 111 38)\r\n             (58 57  56  55  54  53  52  51  50  49  48  47  46  45  44  43  42  41  40  39))))))\r\n",
 "accumulate_test"
 "(ns accumulate-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            accumulate))\r\n\r\n(defn- square [n] (* n n))\r\n\r\n(defn- to-s [xs] (apply str xs))\r\n\r\n(deftest empty-accumulation\r\n  (is (= [] (accumulate/accumulate square []))))\r\n\r\n(deftest accumulate-squares\r\n  (is (= [1 4 9] (accumulate/accumulate square [1 2 3]))))\r\n\r\n(deftest accumulate-upcases\r\n  (is (= [\"HELLO\", \"WORLD\"]\r\n         (->> [\"hello\" \"world\"]\r\n              (accumulate/accumulate clojure.string/upper-case)\r\n              (map to-s)))))\r\n\r\n(deftest accumulate-reversed-strings\r\n  (is (= [\"eht\" \"kciuq\" \"nworb\" \"xof\" \"cte\"]\r\n         (->> [\"the\" \"quick\" \"brown\" \"fox\" \"etc\"]\r\n              (accumulate/accumulate reverse)\r\n              (map to-s)))))\r\n\r\n(deftest accumulate-recursively\r\n  (is (= [[\"a1\" \"a2\" \"a3\"] [\"b1\" \"b2\" \"b3\"] [\"c1\" \"c2\" \"c3\"]]\r\n         (-> #(accumulate/accumulate (fn [n] (str % n)) [1 2 3])\r\n             (accumulate/accumulate \"abc\")))))\r\n",
 "series_test"
 "(ns series-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [series :refer [slices]]))\r\n\r\n(deftest empty-string\r\n  (testing \"empty string with any number\"\r\n    (is (= [] (slices \"\" 1)))))\r\n\r\n(deftest number-eq-zero\r\n  (testing \"number = 0\"\r\n    (is (= [\"\"] (slices \"123\" 0)))))\r\n\r\n(deftest number>string\r\n  (testing \"number > string-length\"\r\n    (is (= [] (slices \"123\" 1000)))))\r\n\r\n(deftest number=string\r\n  (testing \"number = string-length\"\r\n    (is (= [\"123\"] (slices \"123\" 3)))))\r\n\r\n(deftest number<string\r\n  (testing \"number < string-length\"\r\n    (is (= #{\"123\" \"234\" \"345\"} (set (slices \"12345\" 3))))))\r\n",
 "rotational_cipher_test"
 "(ns rotational-cipher-test\r\n  (:require  [clojure.test :refer [deftest is testing]]\r\n             rotational-cipher))\r\n\r\n(deftest rotate-a-by-1\r\n  (is (= (rotational-cipher/rotate \"a\" 1) \"b\")))\r\n\r\n(deftest rotate-a-by-26-same-output\r\n  (is (= (rotational-cipher/rotate \"a\" 26) \"a\")))\r\n\r\n(deftest rotate-a-by-0-same-output\r\n  (is (= (rotational-cipher/rotate \"a\" 0) \"a\")))\r\n\r\n(deftest rotate-m-by-13\r\n  (is (= (rotational-cipher/rotate \"m\" 13) \"z\")))\r\n\r\n(deftest rotate-n-by-13-with-wrap\r\n  (is (= (rotational-cipher/rotate \"n\" 13) \"a\")))\r\n\r\n(deftest rotate-capital-letters\r\n  (is (= (rotational-cipher/rotate \"OMG\" 5) \"TRL\")))\r\n\r\n(deftest rotate-spaces\r\n  (is (= (rotational-cipher/rotate \"O M G\" 5) \"T R L\")))\r\n\r\n(deftest rotate-numbers\r\n  (is (= (rotational-cipher/rotate \"Testing 1 2 3 testing\" 4) \"Xiwxmrk 1 2 3 xiwxmrk\")))\r\n\r\n(deftest rotate-punctuation\r\n  (is (= (rotational-cipher/rotate \"Let's eat, Grandma!\" 21) \"Gzo'n zvo, Bmviyhv!\")))\r\n\r\n(deftest rotate-opposite-direction\r\n  (is (= (rotational-cipher/rotate \"b\" -1) \"a\")))\r\n\r\n(deftest rotate-opposite-past-first-letter\r\n  (is (= (rotational-cipher/rotate \"B\" -2) \"Z\")))\r\n\r\n(deftest rotate-opposite-past-letter-count\r\n  (is (= (rotational-cipher/rotate \"B\" -28) \"Z\")))\r\n\r\n(deftest rotate-forward-then-backwards-same-number-of-steps\r\n  (is (=  (rotational-cipher/rotate\r\n           (rotational-cipher/rotate \"B\" 28) -28) \"B\")))\r\n\r\n(deftest rotate-all-letters\r\n  (is (= (rotational-cipher/rotate \"The quick brown fox jumps over the lazy dog.\" 13) \"Gur dhvpx oebja sbk whzcf bire gur ynml qbt.\")))\r\n",
 "nth_prime_test"
 "(ns nth-prime-test\r\n  (:require [clojure.test :refer [deftest testing is]]\r\n            nth-prime))\r\n\r\n(deftest first-prime\r\n  (testing \"the first prime is 2\"\r\n    (is (= 2 (nth-prime/nth-prime 1)))))\r\n\r\n(deftest second-prime\r\n  (testing \"the second prime is 3\"\r\n    (is (= 3 (nth-prime/nth-prime 2)))))\r\n\r\n(deftest sixth-prime\r\n  (testing \"the sixth prime is 13\"\r\n    (is (= 13 (nth-prime/nth-prime 6)))))\r\n\r\n(deftest ten-thousand-first-prime\r\n  (testing \"the ten thousand and first prime is 104743\"\r\n    (is (= 104743 (nth-prime/nth-prime 10001)))))\r\n\r\n(deftest zeroth-prime\r\n  (testing \"there is no zeroth prime\"\r\n    (is (thrown? IllegalArgumentException (nth-prime/nth-prime 0)))))\r\n",
 "etl_test"
 "(ns etl-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            etl))\r\n\r\n(deftest transform-one-value\r\n  (is (= {\"world\" 1}\r\n         (etl/transform {1 [\"WORLD\"]}))))\r\n\r\n(deftest transform-more-values\r\n  (is (= {\"world\" 1 \"gschoolers\" 1}\r\n         (etl/transform {1 [\"WORLD\" \"GSCHOOLERS\"]}))))\r\n\r\n(deftest more-keys\r\n  (is (= {\"apple\" 1 \"artichoke\" 1 \"boat\" 2 \"ballerina\" 2}\r\n         (etl/transform {1 [\"APPLE\" \"ARTICHOKE\"], 2 [\"BOAT\" \"BALLERINA\"]}))))\r\n\r\n(deftest full-dataset\r\n  (is (= {\"a\"  1 \"b\"  3 \"c\" 3 \"d\" 2 \"e\" 1\r\n          \"f\"  4 \"g\"  2 \"h\" 4 \"i\" 1 \"j\" 8\r\n          \"k\"  5 \"l\"  1 \"m\" 3 \"n\" 1 \"o\" 1\r\n          \"p\"  3 \"q\" 10 \"r\" 1 \"s\" 1 \"t\" 1\r\n          \"u\"  1 \"v\"  4 \"w\" 4 \"x\" 8 \"y\" 4\r\n          \"z\" 10}\r\n         (etl/transform {1  (re-seq #\"\\w\" \"AEIOULNRST\")\r\n                         2  (re-seq #\"\\w\" \"DG\")\r\n                         3  (re-seq #\"\\w\" \"BCMP\")\r\n                         4  (re-seq #\"\\w\" \"FHVWY\")\r\n                         5  (re-seq #\"\\w\" \"K\")\r\n                         8  (re-seq #\"\\w\" \"JX\")\r\n                         10 (re-seq #\"\\w\" \"QZ\")}))))\r\n",
 "collatz_conjecture_test"
 "(ns collatz-conjecture-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [collatz-conjecture :refer [collatz]]))\r\n\r\n(deftest steps-for-1\r\n  (testing \"zero steps for one\"\r\n    (is (= 0 (collatz 1)))))\r\n\r\n(deftest steps-for-16\r\n  (testing \"divide if even\"\r\n    (is (= 4 (collatz 16)))))\r\n\r\n(deftest steps-for-12\r\n  (testing \"even and odd steps\"\r\n    (is (= 9 (collatz 12)))))\r\n\r\n(deftest steps-for-1000000\r\n  (testing \"Large number of even and odd steps\"\r\n    (is (= 152 (collatz 1000000)))))\r\n\r\n(deftest steps-for-0\r\n  (testing \"zero is an error\"\r\n    (is (thrown? Throwable\r\n                 (collatz 0)))))\r\n\r\n(deftest steps-for-negative\r\n  (testing \"negative value is an error\"\r\n    (is (thrown? Throwable\r\n                 (collatz -15)))))\r\n",
 "isbn_verifier_test"
 "(ns isbn-verifier-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [isbn-verifier :refer [isbn?]]))\r\n\r\n(deftest valid-isbn-number\r\n  (is (= true (isbn? \"3-598-21508-8\"))))\r\n\r\n(deftest invalid-isbn-check-digit\r\n  (is (= false (isbn? \"3-598-21508-9\"))))\r\n\r\n(deftest valid-isbn-number-with-a-check-digit-of-10\r\n  (is (= true (isbn? \"3-598-21507-X\"))))\r\n\r\n(deftest check-digit-is-a-character-other-than-X\r\n  (is (= false (isbn? \"3-598-21507-A\"))))\r\n\r\n(deftest invalid-character-in-isbn\r\n  (is (= false (isbn? \"3-598-2K507-0\"))))\r\n\r\n(deftest X-is-only-valid-as-a-check-digit\r\n  (is (= false (isbn? \"3-598-2X507-9\"))))\r\n\r\n(deftest valid-isbn-without-separating-dashes\r\n  (is (= true (isbn? \"3598215088\"))))\r\n\r\n(deftest isbn-without-separating-dashes-and-X-as-check-digit\r\n  (is (= true (isbn? \"359821507X\"))))\r\n\r\n(deftest isbn-without-check-digit-and-dashes\r\n  (is (= false (isbn? \"359821507\"))))\r\n\r\n(deftest too-long-isbn-and-no-dashes\r\n  (is (= false (isbn? \"3598215078X\"))))\r\n\r\n(deftest too-short-isbn\r\n  (is (= false (isbn? \"00\"))))\r\n\r\n(deftest isbn-without-check-digit\r\n  (is (= false (isbn? \"3-598-21507\"))))\r\n\r\n(deftest too-long-isbn\r\n  (is (= false (isbn? \"3-598-21507-XX\"))))\r\n\r\n(deftest check-digit-of-X-should-not-be-used-for-0\r\n  (is (= false (isbn? \"3-598-21515-X\"))))\r\n",
 "strain_test"
 "(ns strain-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [strain :refer [retain discard]]))\r\n\r\n(defn- fn-throw-exception [msg] (fn [& _] (throw (Exception. msg))))\r\n\r\n(deftest empty-sequence\r\n  (is (empty? (retain even? '()))))\r\n\r\n(deftest empty-retain\r\n  (is (empty? (retain odd? [2 4 6 8 10]))))\r\n\r\n(deftest retain-single-element\r\n  (is (= [0] (retain even? [0]))))\r\n\r\n(deftest retain-several\r\n  (is (= [1 3 5] (retain odd? (range 6)))))\r\n\r\n(deftest retain-everything\r\n  (is (= [2 4 6 8 10] (retain even? [2 4 6 8 10]))))\r\n\r\n(deftest retain-strings\r\n  (is (= [\"string\" \"three\"] (retain string? [\"string\" 1 :two \"three\" [\"4\"]]))))\r\n\r\n(deftest empty-discard\r\n  (is (empty? (discard even? [2 4 6 8 10]))))\r\n\r\n(deftest discard-first\r\n  (is (= [1 2] (discard zero? [0 1 2]))))\r\n\r\n(deftest discard-last\r\n  (is (= [2 1] (discard zero? [2 1 0]))))\r\n\r\n(deftest discard-several\r\n  (is (= [0 2 4] (discard odd? (range 6)))))\r\n\r\n(deftest does-not-use-existing-implementations\r\n  (with-redefs [filter  (fn-throw-exception \"Implement without filter!\")\r\n                remove  (fn-throw-exception \"Implement without remove!\")\r\n                filterv (fn-throw-exception \"Implement without filterv!\")]\r\n    (dorun (retain even? (range 10)))\r\n    (dorun (discard even? (range 10)))))\r\n",
 "pangram_test"
 "(ns pangram-test\r\n  (:require [clojure.test :refer [is deftest]]\r\n            [pangram :refer [pangram?]]))\r\n\r\n(deftest empty-sentence\r\n  (is (false? (pangram? \"\"))))\r\n\r\n(deftest lowercase-pangram\r\n  (is (pangram? \"the quick brown fox jumps over the lazy dog\")))\r\n\r\n(deftest missing-character-x\r\n  (is\r\n   (false?\r\n    (pangram? \"a quick movement of the enemy will jeopardize five gunboats\"))))\r\n\r\n(deftest another-missing-character-x\r\n  (is\r\n   (false?\r\n    (pangram? \"the quick brown fish jumps over the lazy dog\"))))\r\n\r\n(deftest with-underscores\r\n  (is (pangram? \"the_quick_brown_fox_jumps_over_the_lazy_dog\")))\r\n\r\n(deftest with-numbers\r\n  (is (pangram? \"the 1 quick brown fox jumps over the 2 lazy dogs\")))\r\n\r\n(deftest missing-letters-replaced-by-numbers\r\n  (is\r\n   (false?\r\n    (pangram? \"7h3 qu1ck brown fox jumps ov3r 7h3 lazy dog\"))))\r\n\r\n(deftest mixed-case-and-punctuation\r\n  (is (pangram? \"\\\"Five quacking Zephyrs jolt my wax bed.\\\"\")))\r\n\r\n(deftest upper-and-lower-not-counted-separately\r\n  (is\r\n   (false?\r\n    (pangram? \"the quick brown fox jumps over with lazy FX\"))))\r\n",
 "crypto_square_test"
 "(ns crypto-square-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            crypto-square))\r\n\r\n(deftest normalize-splunk\r\n  (is (= \"splunk\" (crypto-square/normalize-plaintext \"s#!@$%plunk\"))))\r\n(deftest normalize-with-punctuation\r\n  (is (= \"123go\" (crypto-square/normalize-plaintext \"1, 2, 3 GO!\"))))\r\n\r\n(deftest square-2\r\n  (is (= 2 (crypto-square/square-size \"1234\"))))\r\n(deftest square-3\r\n  (is (= 3 (crypto-square/square-size \"123456789\"))))\r\n(deftest square-4\r\n  (is (= 4 (crypto-square/square-size \"123456789abc\"))))\r\n\r\n(deftest segments\r\n  (is (= [\"neverv\", \"exthin\", \"eheart\", \"withid\", \"lewoes\"]\r\n         (crypto-square/plaintext-segments \"Never vex thine heart with idle woes.\"))))\r\n(deftest segments-2\r\n  (is (= [\"zomg\", \"zomb\", \"ies\"]\r\n         (crypto-square/plaintext-segments \"ZOMG! ZOMBIES!!!\"))))\r\n\r\n(deftest cipher-1\r\n  (is (= \"tasneyinicdsmiohooelntuillibsuuml\"\r\n         (crypto-square/ciphertext \"Time is an illusion. Lunchtime doubly so.\"))))\r\n(deftest cipher-2\r\n  (is (= \"wneiaweoreneawssciliprerlneoidktcms\"\r\n         (crypto-square/ciphertext \"We all know interspecies romance is weird.\"))))\r\n(deftest cipher-3\r\n  (is (= \"vrel aepe mset paoo irpo\"\r\n         (crypto-square/normalize-ciphertext \"Vampires are people too!\"))))\r\n(deftest cipher-4\r\n  (is (= \"msemo aanin dnin  ndla  etlt  shui \"\r\n         (crypto-square/normalize-ciphertext \"Madness, and then illumination.\"))))\r\n(deftest cipher-5\r\n  (is (= (str \"ageihdsednsh lsagtoonaepe lannswnccair hrditeaetnrh \"\r\n              \"ueethdnatoio mbqyewdnotto aouayicdwhod nranatosaef  \"\r\n              \"bnldrhnhrrb  efirersodir  irnieecusno  nedgnailoat \")\r\n         (let [plaintext (str \"All human beings are born free \"\r\n                              \"and equal in dignity and rights. \"\r\n                              \"They are endowed with reason and conscience \"\r\n                              \"and should act towards one another \"\r\n                              \"in a spirit of brotherhood.\")]\r\n           (crypto-square/normalize-ciphertext plaintext)))))\r\n(deftest cipher-6\r\n  (is (= \"imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn  sseoau \"\r\n         (crypto-square/normalize-ciphertext \"If man was meant to stay on the ground, god would have given us roots.\"))))",
 "binary_test"
 "(ns binary-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            binary))\r\n\r\n(deftest binary-1-is-decimal-1\r\n  (is (= 1 (binary/to-decimal \"1\"))))\r\n\r\n(deftest binary-10-is-decimal-2\r\n  (is (= 2 (binary/to-decimal \"10\"))))\r\n\r\n(deftest binary-11-is-decimal-3\r\n  (is (= 3 (binary/to-decimal \"11\"))))\r\n\r\n(deftest binary-100-is-decimal-4\r\n  (is (= 4 (binary/to-decimal \"100\"))))\r\n\r\n(deftest binary-1001-is-decimal-9\r\n  (is (= 9 (binary/to-decimal \"1001\"))))\r\n\r\n(deftest binary-11010-is-decimal-26\r\n  (is (= 26 (binary/to-decimal \"11010\"))))\r\n\r\n(deftest binary-10001101000-is-decimal-1128\r\n  (is (= 1128 (binary/to-decimal \"10001101000\"))))\r\n\r\n(deftest invalid-binary-is-decimal-0\r\n  (is (= 0 (binary/to-decimal \"carrot\"))))\r\n",
 "acronym_test"
 "(ns acronym-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            acronym))\r\n\r\n(deftest test-acronym-empty-string\r\n  (is (= \"\" (acronym/acronym \"\"))))\r\n\r\n(deftest test-acronym-png\r\n  (is (= \"PNG\" (acronym/acronym \"Portable Network Graphics\"))))\r\n\r\n(deftest test-acronym-ror\r\n  (is (= \"ROR\" (acronym/acronym \"Ruby on Rails\"))))\r\n\r\n(deftest test-acronym-html\r\n  (is (= \"HTML\" (acronym/acronym \"HyperText Markup Language\"))))\r\n\r\n(deftest test-acronym-fifo\r\n  (is (= \"FIFO\" (acronym/acronym \"First In, First Out\"))))\r\n\r\n(deftest test-acronym-php\r\n  (is (= \"PHP\" (acronym/acronym \"PHP: Hypertext Preprocessor\"))))\r\n\r\n(deftest test-acronym-cmos\r\n  (is (= \"CMOS\" (acronym/acronym \"Complementary metal-oxide semiconductor\"))))\r\n",
 ...}
clj꞉user꞉> 
nil
clj꞉user꞉> 
