#'user/practice-exercises
clj꞉user꞉> 
; nREPL connection failed: Error: read ECONNRESET
; Failed connecting.
; nREPL Connection was closed
; Jacking in...
; Connecting using "Babashka" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd c:\Users\porko\exercism-express & bb --nrepl-server 64429 & popd
; Using host:port 127.0.0.1:64429 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉user꞉> 
#'user/practice-exercises
clj꞉user꞉> 
("accumulate"
 "acronym"
 "all-your-base"
 "allergies"
 "anagram"
 "armstrong-numbers"
 "atbash-cipher"
 "bank-account"
 "beer-song"
 "binary"
 "binary-search"
 "binary-search-tree"
 "bob"
 "change"
 "clock"
 "collatz-conjecture"
 "complex-numbers"
 "crypto-square"
 "diamond"
 "difference-of-squares"
 "dominoes"
 "etl"
 "flatten-array"
 "gigasecond"
 "go-counting"
 "grade-school"
 "grains"
 "hamming"
 "hello-world"
 "hexadecimal"
 "isbn-verifier"
 "isogram"
 "kindergarten-garden"
 "largest-series-product"
 "leap"
 "luhn"
 "matching-brackets"
 "meetup"
 "minesweeper"
 "nth-prime"
 "nucleotide-count"
 "octal"
 "pangram"
 "pascals-triangle"
 "perfect-numbers"
 "phone-number"
 "pig-latin"
 "poker"
 "pov"
 "prime-factors"
 ...)
clj꞉user꞉> 
("accumulate"
 "acronym"
 "all_your_base"
 "allergies"
 "anagram"
 "armstrong_numbers"
 "atbash_cipher"
 "bank_account"
 "beer_song"
 "binary"
 "binary_search"
 "binary_search_tree"
 "bob"
 "change"
 "clock"
 "collatz_conjecture"
 "complex_numbers"
 "crypto_square"
 "diamond"
 "difference_of_squares"
 "dominoes"
 "etl"
 "flatten_array"
 "gigasecond"
 "go_counting"
 "grade_school"
 "grains"
 "hamming"
 "hello_world"
 "hexadecimal"
 "isbn_verifier"
 "isogram"
 "kindergarten_garden"
 "largest_series_product"
 "leap"
 "luhn"
 "matching_brackets"
 "meetup"
 "minesweeper"
 "nth_prime"
 "nucleotide_count"
 "octal"
 "pangram"
 "pascals_triangle"
 "perfect_numbers"
 "phone_number"
 "pig_latin"
 "poker"
 "pov"
 "prime_factors"
 ...)
clj꞉user꞉> 
#'user/instructions-all
clj꞉user꞉> 
("# Instructions\r\n\r\nImplement the `accumulate` operation, which, given a collection and an\r\noperation to perform on each element of the collection, returns a new\r\ncollection containing the result of applying that operation to each element of\r\nthe input collection.\r\n\r\nGiven the collection of numbers:\r\n\r\n- 1, 2, 3, 4, 5\r\n\r\nAnd the operation:\r\n\r\n- square a number (`x => x * x`)\r\n\r\nYour code should be able to produce the collection of squares:\r\n\r\n- 1, 4, 9, 16, 25\r\n\r\nCheck out the test suite to see the expected function signature.\r\n\r\n## Restrictions\r\n\r\nKeep your hands off that collect/map/fmap/whatchamacallit functionality\r\nprovided by your standard library!\r\nSolve this one yourself using other basic tools instead.\r\n"
 "# Instructions\r\n\r\nConvert a phrase to its acronym.\r\n\r\nTechies love their TLA (Three Letter Acronyms)!\r\n\r\nHelp generate some jargon by writing a program that converts a long name\r\nlike Portable Network Graphics to its acronym (PNG).\r\n"
 "# Instructions\r\n\r\nConvert a number, represented as a sequence of digits in one base, to any other base.\r\n\r\nImplement general base conversion. Given a number in base **a**,\r\nrepresented as a sequence of digits, convert it to base **b**.\r\n\r\n## Note\r\n\r\n- Try to implement the conversion yourself.\r\n  Do not use something else to perform the conversion for you.\r\n- Your solution should take base **a**, a sequence of digits, and base **b**, in that order.\r\n\r\n## About [Positional Notation](https://en.wikipedia.org/wiki/Positional_notation)\r\n\r\nIn positional notation, a number in base **b** can be understood as a linear\r\ncombination of powers of **b**.\r\n\r\nThe number 42, *in base 10*, means:\r\n\r\n(4 * 10^1) + (2 * 10^0)\r\n\r\nThe number 101010, *in base 2*, means:\r\n\r\n(1 * 2^5) + (0 * 2^4) + (1 * 2^3) + (0 * 2^2) + (1 * 2^1) + (0 * 2^0)\r\n\r\nThe number 1120, *in base 3*, means:\r\n\r\n(1 * 3^3) + (1 * 3^2) + (2 * 3^1) + (0 * 3^0)\r\n\r\nI think you got the idea!\r\n\r\n*Yes. Those three numbers above are exactly the same. Congratulations!*\r\n"
 "# Instructions\r\n\r\nGiven a person's allergy score, determine whether or not they're allergic to a given item, and their full list of allergies.\r\n\r\nAn allergy test produces a single numeric score which contains the\r\ninformation about all the allergies the person has (that they were\r\ntested for).\r\n\r\nThe list of items (and their value) that were tested are:\r\n\r\n* eggs (1)\r\n* peanuts (2)\r\n* shellfish (4)\r\n* strawberries (8)\r\n* tomatoes (16)\r\n* chocolate (32)\r\n* pollen (64)\r\n* cats (128)\r\n\r\nSo if Tom is allergic to peanuts and chocolate, he gets a score of 34.\r\n\r\nNow, given just that score of 34, your program should be able to say:\r\n\r\n- Whether Tom is allergic to any one of those allergens listed above.\r\n- All the allergens Tom is allergic to.\r\n\r\nNote: a given score may include allergens **not** listed above (i.e.\r\nallergens that score 256, 512, 1024, etc.).  Your program should\r\nignore those components of the score.  For example, if the allergy\r\nscore is 257, your program should only report the eggs (1) allergy.\r\n"
 "# Instructions\r\n\r\nAn anagram is a rearrangement of letters to form a new word.\r\nGiven a word and a list of candidates, select the sublist of anagrams of the given word.\r\n\r\nGiven `\"listen\"` and a list of candidates like `\"enlists\" \"google\"\r\n\"inlets\" \"banana\"` the program should return a list containing\r\n`\"inlets\"`.\r\n"
 "# Instructions\r\n\r\nAn [Armstrong number](https://en.wikipedia.org/wiki/Narcissistic_number) is a number that is the sum of its own digits each raised to the power of the number of digits.\r\n\r\nFor example:\r\n\r\n- 9 is an Armstrong number, because `9 = 9^1 = 9`\r\n- 10 is *not* an Armstrong number, because `10 != 1^2 + 0^2 = 1`\r\n- 153 is an Armstrong number, because: `153 = 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153`\r\n- 154 is *not* an Armstrong number, because: `154 != 1^3 + 5^3 + 4^3 = 1 + 125 + 64 = 190`\r\n\r\nWrite some code to determine whether a number is an Armstrong number.\r\n"
 "# Instructions\r\n\r\nCreate an implementation of the atbash cipher, an ancient encryption system created in the Middle East.\r\n\r\nThe Atbash cipher is a simple substitution cipher that relies on\r\ntransposing all the letters in the alphabet such that the resulting\r\nalphabet is backwards. The first letter is replaced with the last\r\nletter, the second with the second-last, and so on.\r\n\r\nAn Atbash cipher for the Latin alphabet would be as follows:\r\n\r\n```text\r\nPlain:  abcdefghijklmnopqrstuvwxyz\r\nCipher: zyxwvutsrqponmlkjihgfedcba\r\n```\r\n\r\nIt is a very weak cipher because it only has one possible key, and it is\r\na simple monoalphabetic substitution cipher. However, this may not have\r\nbeen an issue in the cipher's time.\r\n\r\nCiphertext is written out in groups of fixed length, the traditional group size\r\nbeing 5 letters, and punctuation is excluded. This is to make it harder to guess\r\nthings based on word boundaries.\r\n\r\n## Examples\r\n\r\n- Encoding `test` gives `gvhg`\r\n- Decoding `gvhg` gives `test`\r\n- Decoding `gsvjf rxpyi ldmul cqfnk hlevi gsvoz abwlt` gives `thequickbrownfoxjumpsoverthelazydog`\r\n"
 "# Instructions\r\n\r\nSimulate a bank account supporting opening/closing, withdrawals, and deposits\r\nof money. Watch out for concurrent transactions!\r\n\r\nA bank account can be accessed in multiple ways. Clients can make\r\ndeposits and withdrawals using the internet, mobile phones, etc. Shops\r\ncan charge against the account.\r\n\r\nCreate an account that can be accessed from multiple threads/processes\r\n(terminology depends on your programming language).\r\n\r\nIt should be possible to close an account; operations against a closed\r\naccount must fail.\r\n\r\n## Instructions\r\n\r\nRun the test file, and fix each of the errors in turn. When you get the\r\nfirst test to pass, go to the first pending or skipped test, and make\r\nthat pass as well. When all of the tests are passing, feel free to\r\nsubmit.\r\n\r\nRemember that passing code is just the first step. The goal is to work\r\ntowards a solution that is as readable and expressive as you can make\r\nit.\r\n\r\nHave fun!\r\n"
 "# Instructions\r\n\r\nRecite the lyrics to that beloved classic, that field-trip favorite: 99 Bottles of Beer on the Wall.\r\n\r\nNote that not all verses are identical.\r\n\r\n```text\r\n99 bottles of beer on the wall, 99 bottles of beer.\r\nTake one down and pass it around, 98 bottles of beer on the wall.\r\n\r\n98 bottles of beer on the wall, 98 bottles of beer.\r\nTake one down and pass it around, 97 bottles of beer on the wall.\r\n\r\n97 bottles of beer on the wall, 97 bottles of beer.\r\nTake one down and pass it around, 96 bottles of beer on the wall.\r\n\r\n96 bottles of beer on the wall, 96 bottles of beer.\r\nTake one down and pass it around, 95 bottles of beer on the wall.\r\n\r\n95 bottles of beer on the wall, 95 bottles of beer.\r\nTake one down and pass it around, 94 bottles of beer on the wall.\r\n\r\n94 bottles of beer on the wall, 94 bottles of beer.\r\nTake one down and pass it around, 93 bottles of beer on the wall.\r\n\r\n93 bottles of beer on the wall, 93 bottles of beer.\r\nTake one down and pass it around, 92 bottles of beer on the wall.\r\n\r\n92 bottles of beer on the wall, 92 bottles of beer.\r\nTake one down and pass it around, 91 bottles of beer on the wall.\r\n\r\n91 bottles of beer on the wall, 91 bottles of beer.\r\nTake one down and pass it around, 90 bottles of beer on the wall.\r\n\r\n90 bottles of beer on the wall, 90 bottles of beer.\r\nTake one down and pass it around, 89 bottles of beer on the wall.\r\n\r\n89 bottles of beer on the wall, 89 bottles of beer.\r\nTake one down and pass it around, 88 bottles of beer on the wall.\r\n\r\n88 bottles of beer on the wall, 88 bottles of beer.\r\nTake one down and pass it around, 87 bottles of beer on the wall.\r\n\r\n87 bottles of beer on the wall, 87 bottles of beer.\r\nTake one down and pass it around, 86 bottles of beer on the wall.\r\n\r\n86 bottles of beer on the wall, 86 bottles of beer.\r\nTake one down and pass it around, 85 bottles of beer on the wall.\r\n\r\n85 bottles of beer on the wall, 85 bottles of beer.\r\nTake one down and pass it around, 84 bottles of beer on the wall.\r\n\r\n84 bottles of beer on the wall, 84 bottles of beer.\r\nTake one down and pass it around, 83 bottles of beer on the wall.\r\n\r\n83 bottles of beer on the wall, 83 bottles of beer.\r\nTake one down and pass it around, 82 bottles of beer on the wall.\r\n\r\n82 bottles of beer on the wall, 82 bottles of beer.\r\nTake one down and pass it around, 81 bottles of beer on the wall.\r\n\r\n81 bottles of beer on the wall, 81 bottles of beer.\r\nTake one down and pass it around, 80 bottles of beer on the wall.\r\n\r\n80 bottles of beer on the wall, 80 bottles of beer.\r\nTake one down and pass it around, 79 bottles of beer on the wall.\r\n\r\n79 bottles of beer on the wall, 79 bottles of beer.\r\nTake one down and pass it around, 78 bottles of beer on the wall.\r\n\r\n78 bottles of beer on the wall, 78 bottles of beer.\r\nTake one down and pass it around, 77 bottles of beer on the wall.\r\n\r\n77 bottles of beer on the wall, 77 bottles of beer.\r\nTake one down and pass it around, 76 bottles of beer on the wall.\r\n\r\n76 bottles of beer on the wall, 76 bottles of beer.\r\nTake one down and pass it around, 75 bottles of beer on the wall.\r\n\r\n75 bottles of beer on the wall, 75 bottles of beer.\r\nTake one down and pass it around, 74 bottles of beer on the wall.\r\n\r\n74 bottles of beer on the wall, 74 bottles of beer.\r\nTake one down and pass it around, 73 bottles of beer on the wall.\r\n\r\n73 bottles of beer on the wall, 73 bottles of beer.\r\nTake one down and pass it around, 72 bottles of beer on the wall.\r\n\r\n72 bottles of beer on the wall, 72 bottles of beer.\r\nTake one down and pass it around, 71 bottles of beer on the wall.\r\n\r\n71 bottles of beer on the wall, 71 bottles of beer.\r\nTake one down and pass it around, 70 bottles of beer on the wall.\r\n\r\n70 bottles of beer on the wall, 70 bottles of beer.\r\nTake one down and pass it around, 69 bottles of beer on the wall.\r\n\r\n69 bottles of beer on the wall, 69 bottles of beer.\r\nTake one down and pass it around, 68 bottles of beer on the wall.\r\n\r\n68 bottles of beer on the wall, 68 bottles of beer.\r\nTake one down and pass it around, 67 bottles of beer on the wall.\r\n\r\n67 bottles of beer on the wall, 67 bottles of beer.\r\nTake one down and pass it around, 66 bottles of beer on the wall.\r\n\r\n66 bottles of beer on the wall, 66 bottles of beer.\r\nTake one down and pass it around, 65 bottles of beer on the wall.\r\n\r\n65 bottles of beer on the wall, 65 bottles of beer.\r\nTake one down and pass it around, 64 bottles of beer on the wall.\r\n\r\n64 bottles of beer on the wall, 64 bottles of beer.\r\nTake one down and pass it around, 63 bottles of beer on the wall.\r\n\r\n63 bottles of beer on the wall, 63 bottles of beer.\r\nTake one down and pass it around, 62 bottles of beer on the wall.\r\n\r\n62 bottles of beer on the wall, 62 bottles of beer.\r\nTake one down and pass it around, 61 bottles of beer on the wall.\r\n\r\n61 bottles of beer on the wall, 61 bottles of beer.\r\nTake one down and pass it around, 60 bottles of beer on the wall.\r\n\r\n60 bottles of beer on the wall, 60 bottles of beer.\r\nTake one down and pass it around, 59 bottles of beer on the wall.\r\n\r\n59 bottles of beer on the wall, 59 bottles of beer.\r\nTake one down and pass it around, 58 bottles of beer on the wall.\r\n\r\n58 bottles of beer on the wall, 58 bottles of beer.\r\nTake one down and pass it around, 57 bottles of beer on the wall.\r\n\r\n57 bottles of beer on the wall, 57 bottles of beer.\r\nTake one down and pass it around, 56 bottles of beer on the wall.\r\n\r\n56 bottles of beer on the wall, 56 bottles of beer.\r\nTake one down and pass it around, 55 bottles of beer on the wall.\r\n\r\n55 bottles of beer on the wall, 55 bottles of beer.\r\nTake one down and pass it around, 54 bottles of beer on the wall.\r\n\r\n54 bottles of beer on the wall, 54 bottles of beer.\r\nTake one down and pass it around, 53 bottles of beer on the wall.\r\n\r\n53 bottles of beer on the wall, 53 bottles of beer.\r\nTake one down and pass it around, 52 bottles of beer on the wall.\r\n\r\n52 bottles of beer on the wall, 52 bottles of beer.\r\nTake one down and pass it around, 51 bottles of beer on the wall.\r\n\r\n51 bottles of beer on the wall, 51 bottles of beer.\r\nTake one down and pass it around, 50 bottles of beer on the wall.\r\n\r\n50 bottles of beer on the wall, 50 bottles of beer.\r\nTake one down and pass it around, 49 bottles of beer on the wall.\r\n\r\n49 bottles of beer on the wall, 49 bottles of beer.\r\nTake one down and pass it around, 48 bottles of beer on the wall.\r\n\r\n48 bottles of beer on the wall, 48 bottles of beer.\r\nTake one down and pass it around, 47 bottles of beer on the wall.\r\n\r\n47 bottles of beer on the wall, 47 bottles of beer.\r\nTake one down and pass it around, 46 bottles of beer on the wall.\r\n\r\n46 bottles of beer on the wall, 46 bottles of beer.\r\nTake one down and pass it around, 45 bottles of beer on the wall.\r\n\r\n45 bottles of beer on the wall, 45 bottles of beer.\r\nTake one down and pass it around, 44 bottles of beer on the wall.\r\n\r\n44 bottles of beer on the wall, 44 bottles of beer.\r\nTake one down and pass it around, 43 bottles of beer on the wall.\r\n\r\n43 bottles of beer on the wall, 43 bottles of beer.\r\nTake one down and pass it around, 42 bottles of beer on the wall.\r\n\r\n42 bottles of beer on the wall, 42 bottles of beer.\r\nTake one down and pass it around, 41 bottles of beer on the wall.\r\n\r\n41 bottles of beer on the wall, 41 bottles of beer.\r\nTake one down and pass it around, 40 bottles of beer on the wall.\r\n\r\n40 bottles of beer on the wall, 40 bottles of beer.\r\nTake one down and pass it around, 39 bottles of beer on the wall.\r\n\r\n39 bottles of beer on the wall, 39 bottles of beer.\r\nTake one down and pass it around, 38 bottles of beer on the wall.\r\n\r\n38 bottles of beer on the wall, 38 bottles of beer.\r\nTake one down and pass it around, 37 bottles of beer on the wall.\r\n\r\n37 bottles of beer on the wall, 37 bottles of beer.\r\nTake one down and pass it around, 36 bottles of beer on the wall.\r\n\r\n36 bottles of beer on the wall, 36 bottles of beer.\r\nTake one down and pass it around, 35 bottles of beer on the wall.\r\n\r\n35 bottles of beer on the wall, 35 bottles of beer.\r\nTake one down and pass it around, 34 bottles of beer on the wall.\r\n\r\n34 bottles of beer on the wall, 34 bottles of beer.\r\nTake one down and pass it around, 33 bottles of beer on the wall.\r\n\r\n33 bottles of beer on the wall, 33 bottles of beer.\r\nTake one down and pass it around, 32 bottles of beer on the wall.\r\n\r\n32 bottles of beer on the wall, 32 bottles of beer.\r\nTake one down and pass it around, 31 bottles of beer on the wall.\r\n\r\n31 bottles of beer on the wall, 31 bottles of beer.\r\nTake one down and pass it around, 30 bottles of beer on the wall.\r\n\r\n30 bottles of beer on the wall, 30 bottles of beer.\r\nTake one down and pass it around, 29 bottles of beer on the wall.\r\n\r\n29 bottles of beer on the wall, 29 bottles of beer.\r\nTake one down and pass it around, 28 bottles of beer on the wall.\r\n\r\n28 bottles of beer on the wall, 28 bottles of beer.\r\nTake one down and pass it around, 27 bottles of beer on the wall.\r\n\r\n27 bottles of beer on the wall, 27 bottles of beer.\r\nTake one down and pass it around, 26 bottles of beer on the wall.\r\n\r\n26 bottles of beer on the wall, 26 bottles of beer.\r\nTake one down and pass it around, 25 bottles of beer on the wall.\r\n\r\n25 bottles of beer on the wall, 25 bottles of beer.\r\nTake one down and pass it around, 24 bottles of beer on the wall.\r\n\r\n24 bottles of beer on the wall, 24 bottles of beer.\r\nTake one down and pass it around, 23 bottles of beer on the wall.\r\n\r\n23 bottles of beer on the wall, 23 bottles of beer.\r\nTake one down and pass it around, 22 bottles of beer on the wall.\r\n\r\n22 bottles of beer on the wall, 22 bottles of beer.\r\nTake one down and pass it around, 21 bottles of beer on the wall.\r\n\r\n21 bottles of beer on the wall, 21 bottles of beer.\r\nTake one down and pass it around, 20 bottles of beer on the wall.\r\n\r\n20 bottles of beer on the wall, 20 bottles of beer.\r\nTake one down and pass it around, 19 bottles of beer on the wall.\r\n\r\n19 bottles of beer on the wall, 19 bottles of beer.\r\nTake one down and pass it around, 18 bottles of beer on the wall.\r\n\r\n18 bottles of beer on the wall, 18 bottles of beer.\r\nTake one down and pass it around, 17 bottles of beer on the wall.\r\n\r\n17 bottles of beer on the wall, 17 bottles of beer.\r\nTake one down and pass it around, 16 bottles of beer on the wall.\r\n\r\n16 bottles of beer on the wall, 16 bottles of beer.\r\nTake one down and pass it around, 15 bottles of beer on the wall.\r\n\r\n15 bottles of beer on the wall, 15 bottles of beer.\r\nTake one down and pass it around, 14 bottles of beer on the wall.\r\n\r\n14 bottles of beer on the wall, 14 bottles of beer.\r\nTake one down and pass it around, 13 bottles of beer on the wall.\r\n\r\n13 bottles of beer on the wall, 13 bottles of beer.\r\nTake one down and pass it around, 12 bottles of beer on the wall.\r\n\r\n12 bottles of beer on the wall, 12 bottles of beer.\r\nTake one down and pass it around, 11 bottles of beer on the wall.\r\n\r\n11 bottles of beer on the wall, 11 bottles of beer.\r\nTake one down and pass it around, 10 bottles of beer on the wall.\r\n\r\n10 bottles of beer on the wall, 10 bottles of beer.\r\nTake one down and pass it around, 9 bottles of beer on the wall.\r\n\r\n9 bottles of beer on the wall, 9 bottles of beer.\r\nTake one down and pass it around, 8 bottles of beer on the wall.\r\n\r\n8 bottles of beer on the wall, 8 bottles of beer.\r\nTake one down and pass it around, 7 bottles of beer on the wall.\r\n\r\n7 bottles of beer on the wall, 7 bottles of beer.\r\nTake one down and pass it around, 6 bottles of beer on the wall.\r\n\r\n6 bottles of beer on the wall, 6 bottles of beer.\r\nTake one down and pass it around, 5 bottles of beer on the wall.\r\n\r\n5 bottles of beer on the wall, 5 bottles of beer.\r\nTake one down and pass it around, 4 bottles of beer on the wall.\r\n\r\n4 bottles of beer on the wall, 4 bottles of beer.\r\nTake one down and pass it around, 3 bottles of beer on the wall.\r\n\r\n3 bottles of beer on the wall, 3 bottles of beer.\r\nTake one down and pass it around, 2 bottles of beer on the wall.\r\n\r\n2 bottles of beer on the wall, 2 bottles of beer.\r\nTake one down and pass it around, 1 bottle of beer on the wall.\r\n\r\n1 bottle of beer on the wall, 1 bottle of beer.\r\nTake it down and pass it around, no more bottles of beer on the wall.\r\n\r\nNo more bottles of beer on the wall, no more bottles of beer.\r\nGo to the store and buy some more, 99 bottles of beer on the wall.\r\n```\r\n\r\n## For bonus points\r\n\r\nDid you get the tests passing and the code clean? If you want to, these\r\nare some additional things you could try:\r\n\r\n* Remove as much duplication as you possibly can.\r\n* Optimize for readability, even if it means introducing duplication.\r\n* If you've removed all the duplication, do you have a lot of\r\n  conditionals? Try replacing the conditionals with polymorphism, if it\r\n  applies in this language. How readable is it?\r\n\r\nThen please share your thoughts in a comment on the submission. Did this\r\nexperiment make the code better? Worse? Did you learn anything from it?\r\n"
 "# Instructions\r\n\r\nConvert a binary number, represented as a string (e.g. '101010'), to its decimal equivalent using first principles.\r\n\r\nImplement binary to decimal conversion. Given a binary input\r\nstring, your program should produce a decimal output. The\r\nprogram should handle invalid inputs.\r\n\r\n## Note\r\n\r\n- Implement the conversion yourself.\r\n  Do not use something else to perform the conversion for you.\r\n\r\n## About Binary (Base-2)\r\n\r\nDecimal is a base-10 system.\r\n\r\nA number 23 in base 10 notation can be understood\r\nas a linear combination of powers of 10:\r\n\r\n- The rightmost digit gets multiplied by 10^0 = 1\r\n- The next number gets multiplied by 10^1 = 10\r\n- ...\r\n- The *n*th number gets multiplied by 10^*(n-1)*.\r\n- All these values are summed.\r\n\r\nSo: `23 => 2*10^1 + 3*10^0 => 2*10 + 3*1 = 23 base 10`\r\n\r\nBinary is similar, but uses powers of 2 rather than powers of 10.\r\n\r\nSo: `101 => 1*2^2 + 0*2^1 + 1*2^0 => 1*4 + 0*2 + 1*1 => 4 + 1 => 5 base 10`.\r\n"
 "# Instructions\r\n\r\nYour task is to implement a binary search algorithm.\r\n\r\nA binary search algorithm finds an item in a list by repeatedly splitting it in half, only keeping the half which contains the item we're looking for.\r\nIt allows us to quickly narrow down the possible locations of our item until we find it, or until we've eliminated all possible locations.\r\n\r\n~~~~exercism/caution\r\nBinary search only works when a list has been sorted.\r\n~~~~\r\n\r\nThe algorithm looks like this:\r\n\r\n- Find the middle element of a *sorted* list and compare it with the item we're looking for.\r\n- If the middle element is our item, then we're done!\r\n- If the middle element is greater than our item, we can eliminate that element and all the elements **after** it.\r\n- If the middle element is less than our item, we can eliminate that element and all the elements **before** it.\r\n- If every element of the list has been eliminated then the item is not in the list.\r\n- Otherwise, repeat the process on the part of the list that has not been eliminated.\r\n\r\nHere's an example:\r\n\r\nLet's say we're looking for the number 23 in the following sorted list: `[4, 8, 12, 16, 23, 28, 32]`.\r\n\r\n- We start by comparing 23 with the middle element, 16.\r\n- Since 23 is greater than 16, we can eliminate the left half of the list, leaving us with `[23, 28, 32]`.\r\n- We then compare 23 with the new middle element, 28.\r\n- Since 23 is less than 28, we can eliminate the right half of the list: `[23]`.\r\n- We've found our item.\r\n"
 "# Instructions\r\n\r\nInsert and search for numbers in a binary tree.\r\n\r\nWhen we need to represent sorted data, an array does not make a good\r\ndata structure.\r\n\r\nSay we have the array `[1, 3, 4, 5]`, and we add 2 to it so it becomes\r\n`[1, 3, 4, 5, 2]` now we must sort the entire array again! We can\r\nimprove on this by realizing that we only need to make space for the new\r\nitem `[1, nil, 3, 4, 5]`, and then adding the item in the space we\r\nadded. But this still requires us to shift many elements down by one.\r\n\r\nBinary Search Trees, however, can operate on sorted data much more\r\nefficiently.\r\n\r\nA binary search tree consists of a series of connected nodes. Each node\r\ncontains a piece of data (e.g. the number 3), a variable named `left`,\r\nand a variable named `right`. The `left` and `right` variables point at\r\n`nil`, or other nodes. Since these other nodes in turn have other nodes\r\nbeneath them, we say that the left and right variables are pointing at\r\nsubtrees. All data in the left subtree is less than or equal to the\r\ncurrent node's data, and all data in the right subtree is greater than\r\nthe current node's data.\r\n\r\nFor example, if we had a node containing the data 4, and we added the\r\ndata 2, our tree would look like this:\r\n\r\n      4\r\n     /\r\n    2\r\n\r\nIf we then added 6, it would look like this:\r\n\r\n      4\r\n     / \\\r\n    2   6\r\n\r\nIf we then added 3, it would look like this\r\n\r\n       4\r\n     /   \\\r\n    2     6\r\n     \\\r\n      3\r\n\r\nAnd if we then added 1, 5, and 7, it would look like this\r\n\r\n          4\r\n        /   \\\r\n       /     \\\r\n      2       6\r\n     / \\     / \\\r\n    1   3   5   7\r\n"
 "# Instructions\r\n\r\nYour task is to determine what Bob will reply to someone when they say something to him or ask him a question.\r\n\r\nBob only ever answers one of five things:\r\n\r\n- **\"Sure.\"**\r\n  This is his response if you ask him a question, such as \"How are you?\"\r\n  The convention used for questions is that it ends with a question mark.\r\n- **\"Whoa, chill out!\"**\r\n  This is his answer if you YELL AT HIM.\r\n  The convention used for yelling is ALL CAPITAL LETTERS.\r\n- **\"Calm down, I know what I'm doing!\"**\r\n  This is what he says if you yell a question at him.\r\n- **\"Fine. Be that way!\"**\r\n  This is how he responds to silence.\r\n  The convention used for silence is nothing, or various combinations of whitespace characters.\r\n- **\"Whatever.\"**\r\n  This is what he answers to anything else.\r\n"
 "# Instructions\r\n\r\nCorrectly determine the fewest number of coins to be given to a customer such\r\nthat the sum of the coins' value would equal the correct amount of change.\r\n\r\n## For example\r\n\r\n- An input of 15 with [1, 5, 10, 25, 100] should return one nickel (5)\r\n  and one dime (10) or [5, 10]\r\n- An input of 40 with [1, 5, 10, 25, 100] should return one nickel (5)\r\n  and one dime (10) and one quarter (25) or [5, 10, 25]\r\n\r\n## Edge cases\r\n\r\n- Does your algorithm work for any given set of coins?\r\n- Can you ask for negative change?\r\n- Can you ask for a change value smaller than the smallest coin value?\r\n"
 "# Instructions\r\n\r\nImplement a clock that handles times without dates.\r\n\r\nYou should be able to add and subtract minutes to it.\r\n\r\nTwo clocks that represent the same time should be equal to each other.\r\n"
 "# Instructions\r\n\r\nThe Collatz Conjecture or 3x+1 problem can be summarized as follows:\r\n\r\nTake any positive integer n. If n is even, divide n by 2 to get n / 2. If n is\r\nodd, multiply n by 3 and add 1 to get 3n + 1. Repeat the process indefinitely.\r\nThe conjecture states that no matter which number you start with, you will\r\nalways reach 1 eventually.\r\n\r\nGiven a number n, return the number of steps required to reach 1.\r\n\r\n## Examples\r\n\r\nStarting with n = 12, the steps would be as follows:\r\n\r\n0. 12\r\n1. 6\r\n2. 3\r\n3. 10\r\n4. 5\r\n5. 16\r\n6. 8\r\n7. 4\r\n8. 2\r\n9. 1\r\n\r\nResulting in 9 steps. So for input n = 12, the return value would be 9.\r\n"
 "# Instructions\r\n\r\nA complex number is a number in the form `a + b * i` where `a` and `b` are real and `i` satisfies `i^2 = -1`.\r\n\r\n`a` is called the real part and `b` is called the imaginary part of `z`.\r\nThe conjugate of the number `a + b * i` is the number `a - b * i`.\r\nThe absolute value of a complex number `z = a + b * i` is a real number `|z| = sqrt(a^2 + b^2)`. The square of the absolute value `|z|^2` is the result of multiplication of `z` by its complex conjugate.\r\n\r\nThe sum/difference of two complex numbers involves adding/subtracting their real and imaginary parts separately:\r\n`(a + i * b) + (c + i * d) = (a + c) + (b + d) * i`,\r\n`(a + i * b) - (c + i * d) = (a - c) + (b - d) * i`.\r\n\r\nMultiplication result is by definition\r\n`(a + i * b) * (c + i * d) = (a * c - b * d) + (b * c + a * d) * i`.\r\n\r\nThe reciprocal of a non-zero complex number is\r\n`1 / (a + i * b) = a/(a^2 + b^2) - b/(a^2 + b^2) * i`.\r\n\r\nDividing a complex number `a + i * b` by another `c + i * d` gives:\r\n`(a + i * b) / (c + i * d) = (a * c + b * d)/(c^2 + d^2) + (b * c - a * d)/(c^2 + d^2) * i`.\r\n\r\nRaising e to a complex exponent can be expressed as `e^(a + i * b) = e^a * e^(i * b)`, the last term of which is given by Euler's formula `e^(i * b) = cos(b) + i * sin(b)`.\r\n\r\nImplement the following operations:\r\n - addition, subtraction, multiplication and division of two complex numbers,\r\n - conjugate, absolute value, exponent of a given complex number.\r\n\r\n\r\nAssume the programming language you are using does not have an implementation of complex numbers.\r\n"
 "# Instructions\r\n\r\nImplement the classic method for composing secret messages called a square code.\r\n\r\nGiven an English text, output the encoded version of that text.\r\n\r\nFirst, the input is normalized: the spaces and punctuation are removed\r\nfrom the English text and the message is downcased.\r\n\r\nThen, the normalized characters are broken into rows.  These rows can be\r\nregarded as forming a rectangle when printed with intervening newlines.\r\n\r\nFor example, the sentence\r\n\r\n```text\r\n\"If man was meant to stay on the ground, god would have given us roots.\"\r\n```\r\n\r\nis normalized to:\r\n\r\n```text\r\n\"ifmanwasmeanttostayonthegroundgodwouldhavegivenusroots\"\r\n```\r\n\r\nThe plaintext should be organized in to a rectangle.  The size of the\r\nrectangle (`r x c`) should be decided by the length of the message,\r\nsuch that `c >= r` and `c - r <= 1`, where `c` is the number of columns\r\nand `r` is the number of rows.\r\n\r\nOur normalized text is 54 characters long, dictating a rectangle with\r\n`c = 8` and `r = 7`:\r\n\r\n```text\r\n\"ifmanwas\"\r\n\"meanttos\"\r\n\"tayonthe\"\r\n\"groundgo\"\r\n\"dwouldha\"\r\n\"vegivenu\"\r\n\"sroots  \"\r\n```\r\n\r\nThe coded message is obtained by reading down the columns going left to\r\nright.\r\n\r\nThe message above is coded as:\r\n\r\n```text\r\n\"imtgdvsfearwermayoogoanouuiontnnlvtwttddesaohghnsseoau\"\r\n```\r\n\r\nOutput the encoded text in chunks that fill perfect rectangles `(r X c)`,\r\nwith `c` chunks of `r` length, separated by spaces. For phrases that are\r\n`n` characters short of the perfect rectangle, pad each of the last `n`\r\nchunks with a single trailing space.\r\n\r\n```text\r\n\"imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn  sseoau \"\r\n```\r\n\r\nNotice that were we to stack these, we could visually decode the\r\nciphertext back in to the original message:\r\n\r\n```text\r\n\"imtgdvs\"\r\n\"fearwer\"\r\n\"mayoogo\"\r\n\"anouuio\"\r\n\"ntnnlvt\"\r\n\"wttddes\"\r\n\"aohghn \"\r\n\"sseoau \"\r\n```\r\n"
 "# Instructions\r\n\r\nThe diamond kata takes as its input a letter, and outputs it in a diamond\r\nshape. Given a letter, it prints a diamond starting with 'A', with the\r\nsupplied letter at the widest point.\r\n\r\n## Requirements\r\n\r\n* The first row contains one 'A'.\r\n* The last row contains one 'A'.\r\n* All rows, except the first and last, have exactly two identical letters.\r\n* All rows have as many trailing spaces as leading spaces. (This might be 0).\r\n* The diamond is horizontally symmetric.\r\n* The diamond is vertically symmetric.\r\n* The diamond has a square shape (width equals height).\r\n* The letters form a diamond shape.\r\n* The top half has the letters in ascending order.\r\n* The bottom half has the letters in descending order.\r\n* The four corners (containing the spaces) are triangles.\r\n\r\n## Examples\r\n\r\nIn the following examples, spaces are indicated by `·` characters.\r\n\r\nDiamond for letter 'A':\r\n\r\n```text\r\nA\r\n```\r\n\r\nDiamond for letter 'C':\r\n\r\n```text\r\n··A··\r\n·B·B·\r\nC···C\r\n·B·B·\r\n··A··\r\n```\r\n\r\nDiamond for letter 'E':\r\n\r\n```text\r\n····A····\r\n···B·B···\r\n··C···C··\r\n·D·····D·\r\nE·······E\r\n·D·····D·\r\n··C···C··\r\n···B·B···\r\n····A····\r\n```\r\n"
 "# Instructions\r\n\r\nFind the difference between the square of the sum and the sum of the squares of the first N natural numbers.\r\n\r\nThe square of the sum of the first ten natural numbers is\r\n(1 + 2 + ... + 10)² = 55² = 3025.\r\n\r\nThe sum of the squares of the first ten natural numbers is\r\n1² + 2² + ... + 10² = 385.\r\n\r\nHence the difference between the square of the sum of the first\r\nten natural numbers and the sum of the squares of the first ten\r\nnatural numbers is 3025 - 385 = 2640.\r\n\r\nYou are not expected to discover an efficient solution to this yourself from\r\nfirst principles; research is allowed, indeed, encouraged. Finding the best\r\nalgorithm for the problem is a key skill in software engineering.\r\n"
 "# Instructions\r\n\r\nMake a chain of dominoes.\r\n\r\nCompute a way to order a given set of dominoes in such a way that they form a\r\ncorrect domino chain (the dots on one half of a stone match the dots on the\r\nneighbouring half of an adjacent stone) and that dots on the halves of the\r\nstones which don't have a neighbour (the first and last stone) match each other.\r\n\r\nFor example given the stones `[2|1]`, `[2|3]` and `[1|3]` you should compute something\r\nlike `[1|2] [2|3] [3|1]` or `[3|2] [2|1] [1|3]` or `[1|3] [3|2] [2|1]` etc, where the first and last numbers are the same.\r\n\r\nFor stones `[1|2]`, `[4|1]` and `[2|3]` the resulting chain is not valid: `[4|1] [1|2] [2|3]`'s first and last numbers are not the same. 4 != 3\r\n\r\nSome test cases may use duplicate stones in a chain solution, assume that multiple Domino sets are being used.\r\n"
 "# Instructions\r\n\r\nYour task is to change the data format of letters and their point values in the game.\r\n\r\nCurrently, letters are stored in groups based on their score, in a one-to-many mapping.\r\n\r\n- 1 point: \"A\", \"E\", \"I\", \"O\", \"U\", \"L\", \"N\", \"R\", \"S\", \"T\",\r\n- 2 points: \"D\", \"G\",\r\n- 3 points: \"B\", \"C\", \"M\", \"P\",\r\n- 4 points: \"F\", \"H\", \"V\", \"W\", \"Y\",\r\n- 5 points: \"K\",\r\n- 8 points: \"J\", \"X\",\r\n- 10 points: \"Q\", \"Z\",\r\n\r\nThis needs to be changed to store each individual letter with its score in a one-to-one mapping.\r\n\r\n- \"a\" is worth 1 point.\r\n- \"b\" is worth 3 points.\r\n- \"c\" is worth 3 points.\r\n- \"d\" is worth 2 points.\r\n- etc.\r\n\r\nAs part of this change, the team has also decided to change the letters to be lower-case rather than upper-case.\r\n\r\n~~~~exercism/note\r\nIf you want to look at how the data was previously structured and how it needs to change, take a look at the examples in the test suite.\r\n~~~~\r\n"
 "# Instructions\r\n\r\nTake a nested list and return a single flattened list with all values except nil/null.\r\n\r\nThe challenge is to write a function that accepts an arbitrarily-deep nested list-like structure and returns a flattened structure without any nil/null values.\r\n\r\nFor Example\r\n\r\ninput: [1,[2,3,null,4],[null],5]\r\n\r\noutput: [1,2,3,4,5]\r\n"
 "# Instructions\r\n\r\nYour task is to determine the date and time one gigasecond after a certain date.\r\n\r\nA gigasecond is one thousand million seconds.\r\nThat is a one with nine zeros after it.\r\n\r\nIf you were born on _January 24th, 2015 at 22:00 (10:00:00pm)_, then you would be a gigasecond old on _October 2nd, 2046 at 23:46:40 (11:46:40pm)_.\r\n"
 "# Instructions\r\n\r\nCount the scored points on a Go board.\r\n\r\nIn the game of go (also known as baduk, igo, cờ vây and wéiqí) points\r\nare gained by completely encircling empty intersections with your\r\nstones. The encircled intersections of a player are known as its\r\nterritory.\r\n\r\nWrite a function that determines the territory of each player. You may\r\nassume that any stones that have been stranded in enemy territory have\r\nalready been taken off the board.\r\n\r\nWrite a function that determines the territory which includes a specified coordinate.\r\n\r\nMultiple empty intersections may be encircled at once and for encircling\r\nonly horizontal and vertical neighbours count. In the following diagram\r\nthe stones which matter are marked \"O\" and the stones that don't are\r\nmarked \"I\" (ignored).  Empty spaces represent empty intersections.\r\n\r\n```text\r\n+----+\r\n|IOOI|\r\n|O  O|\r\n|O OI|\r\n|IOI |\r\n+----+\r\n```\r\n\r\nTo be more precise an empty intersection is part of a player's territory\r\nif all of its neighbours are either stones of that player or empty\r\nintersections that are part of that player's territory.\r\n\r\nFor more information see\r\n[wikipedia](https://en.wikipedia.org/wiki/Go_%28game%29) or [Sensei's\r\nLibrary](http://senseis.xmp.net/).\r\n"
 "# Instructions\r\n\r\nGiven students' names along with the grade that they are in, create a roster\r\nfor the school.\r\n\r\nIn the end, you should be able to:\r\n\r\n- Add a student's name to the roster for a grade\r\n  - \"Add Jim to grade 2.\"\r\n  - \"OK.\"\r\n- Get a list of all students enrolled in a grade\r\n  - \"Which students are in grade 2?\"\r\n  - \"We've only got Jim just now.\"\r\n- Get a sorted list of all students in all grades.  Grades should sort\r\n  as 1, 2, 3, etc., and students within a grade should be sorted\r\n  alphabetically by name.\r\n  - \"Who is enrolled in school right now?\"\r\n  - \"Let me think. We have\r\n  Anna, Barb, and Charlie in grade 1,\r\n  Alex, Peter, and Zoe in grade 2\r\n  and Jim in grade 5.\r\n  So the answer is: Anna, Barb, Charlie, Alex, Peter, Zoe and Jim\"\r\n\r\nNote that all our students only have one name.  (It's a small town, what\r\ndo you want?)\r\n\r\n## For bonus points\r\n\r\nDid you get the tests passing and the code clean? If you want to, these\r\nare some additional things you could try:\r\n\r\n- If you're working in a language with mutable data structures and your\r\n  implementation allows outside code to mutate the school's internal DB\r\n  directly, see if you can prevent this. Feel free to introduce additional\r\n  tests.\r\n\r\nThen please share your thoughts in a comment on the submission. Did this\r\nexperiment make the code better? Worse? Did you learn anything from it?\r\n"
 "# Instructions\r\n\r\nCalculate the number of grains of wheat on a chessboard given that the number\r\non each square doubles.\r\n\r\nThere once was a wise servant who saved the life of a prince. The king\r\npromised to pay whatever the servant could dream up. Knowing that the\r\nking loved chess, the servant told the king he would like to have grains\r\nof wheat. One grain on the first square of a chess board, with the number\r\nof grains doubling on each successive square.\r\n\r\nThere are 64 squares on a chessboard (where square 1 has one grain, square 2 has two grains, and so on).\r\n\r\nWrite code that shows:\r\n- how many grains were on a given square, and\r\n- the total number of grains on the chessboard\r\n\r\n## For bonus points\r\n\r\nDid you get the tests passing and the code clean? If you want to, these\r\nare some additional things you could try:\r\n\r\n- Optimize for speed.\r\n- Optimize for readability.\r\n\r\nThen please share your thoughts in a comment on the submission. Did this\r\nexperiment make the code better? Worse? Did you learn anything from it?\r\n"
 "# Instructions\r\n\r\nCalculate the Hamming Distance between two DNA strands.\r\n\r\nYour body is made up of cells that contain DNA. Those cells regularly wear out and need replacing, which they achieve by dividing into daughter cells. In fact, the average human body experiences about 10 quadrillion cell divisions in a lifetime!\r\n\r\nWhen cells divide, their DNA replicates too. Sometimes during this process mistakes happen and single pieces of DNA get encoded with the incorrect information. If we compare two strands of DNA and count the differences between them we can see how many mistakes occurred. This is known as the \"Hamming Distance\".\r\n\r\nWe read DNA using the letters C,A,G and T. Two strands might look like this:\r\n\r\n    GAGCCTACTAACGGGAT\r\n    CATCGTAATGACGGCCT\r\n    ^ ^ ^  ^ ^    ^^\r\n\r\nThey have 7 differences, and therefore the Hamming Distance is 7.\r\n\r\nThe Hamming Distance is useful for lots of things in science, not just biology, so it's a nice phrase to be familiar with :)\r\n\r\n# Implementation notes\r\n\r\nThe Hamming distance is only defined for sequences of equal length, so\r\nan attempt to calculate it between sequences of different lengths should\r\nnot work. The general handling of this situation (e.g., raising an\r\nexception vs returning a special value) may differ between languages.\r\n"
 "# Instructions\r\n\r\nThe classical introductory exercise. Just say \"Hello, World!\".\r\n\r\n[\"Hello, World!\"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is\r\nthe traditional first program for beginning programming in a new language\r\nor environment.\r\n\r\nThe objectives are simple:\r\n\r\n- Write a function that returns the string \"Hello, World!\".\r\n- Run the test suite and make sure that it succeeds.\r\n- Submit your solution and check it at the website.\r\n\r\nIf everything goes well, you will be ready to fetch your first real exercise.\r\n"
 "# Instructions\r\n\r\nConvert a hexadecimal number, represented as a string (e.g. \"10af8c\"), to its decimal equivalent using first principles (i.e. no, you may not use built-in or external libraries to accomplish the conversion).\r\n\r\nOn the web we use hexadecimal to represent colors, e.g. green: 008000,\r\nteal: 008080, navy: 000080).\r\n\r\nThe program should handle invalid hexadecimal strings.\r\n"
 "# Instructions\r\n\r\nThe [ISBN-10 verification process](https://en.wikipedia.org/wiki/International_Standard_Book_Number) is used to validate book identification\r\nnumbers. These normally contain dashes and look like: `3-598-21508-8`\r\n\r\n## ISBN\r\n\r\nThe ISBN-10 format is 9 digits (0 to 9) plus one check character (either a digit or an X only). In the case the check character is an X, this represents the value '10'. These may be communicated with or without hyphens, and can be checked for their validity by the following formula:\r\n\r\n```\r\n(x1 * 10 + x2 * 9 + x3 * 8 + x4 * 7 + x5 * 6 + x6 * 5 + x7 * 4 + x8 * 3 + x9 * 2 + x10 * 1) mod 11 == 0\r\n```\r\n\r\nIf the result is 0, then it is a valid ISBN-10, otherwise it is invalid.\r\n\r\n## Example\r\n\r\nLet's take the ISBN-10 `3-598-21508-8`. We plug it in to the formula, and get:\r\n```\r\n(3 * 10 + 5 * 9 + 9 * 8 + 8 * 7 + 2 * 6 + 1 * 5 + 5 * 4 + 0 * 3 + 8 * 2 + 8 * 1) mod 11 == 0\r\n```\r\n\r\nSince the result is 0, this proves that our ISBN is valid.\r\n\r\n## Task\r\n\r\nGiven a string the program should check if the provided string is a valid ISBN-10.\r\nPutting this into place requires some thinking about preprocessing/parsing of the string prior to calculating the check digit for the ISBN.\r\n\r\nThe program should be able to verify ISBN-10 both with and without separating dashes.\r\n\r\n\r\n## Caveats\r\n\r\nConverting from strings to numbers can be tricky in certain languages.\r\nNow, it's even trickier since the check digit of an ISBN-10 may be 'X' (representing '10'). For instance `3-598-21507-X` is a valid ISBN-10.\r\n\r\n## Bonus tasks\r\n\r\n* Generate a valid ISBN-13 from the input ISBN-10 (and maybe verify it again with a derived verifier).\r\n\r\n* Generate valid ISBN, maybe even from a given starting ISBN.\r\n"
 "# Instructions\r\n\r\nDetermine if a word or phrase is an isogram.\r\n\r\nAn isogram (also known as a \"nonpattern word\") is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times.\r\n\r\nExamples of isograms:\r\n\r\n- lumberjacks\r\n- background\r\n- downstream\r\n- six-year-old\r\n\r\nThe word *isograms*, however, is not an isogram, because the s repeats.\r\n"
 "# Instructions\r\n\r\nGiven a diagram, determine which plants each child in the kindergarten class is\r\nresponsible for.\r\n\r\nThe kindergarten class is learning about growing plants. The teacher\r\nthought it would be a good idea to give them actual seeds, plant them in\r\nactual dirt, and grow actual plants.\r\n\r\nThey've chosen to grow grass, clover, radishes, and violets.\r\n\r\nTo this end, the children have put little cups along the window sills, and\r\nplanted one type of plant in each cup, choosing randomly from the available\r\ntypes of seeds.\r\n\r\n```text\r\n[window][window][window]\r\n........................ # each dot represents a cup\r\n........................\r\n```\r\n\r\nThere are 12 children in the class:\r\n\r\n- Alice, Bob, Charlie, David,\r\n- Eve, Fred, Ginny, Harriet,\r\n- Ileana, Joseph, Kincaid, and Larry.\r\n\r\nEach child gets 4 cups, two on each row. Their teacher assigns cups to\r\nthe children alphabetically by their names.\r\n\r\nThe following diagram represents Alice's plants:\r\n\r\n```text\r\n[window][window][window]\r\nVR......................\r\nRG......................\r\n```\r\n\r\nIn the first row, nearest the windows, she has a violet and a radish.  In the\r\nsecond row she has a radish and some grass.\r\n\r\nYour program will be given the plants from left-to-right starting with\r\nthe row nearest the windows. From this, it should be able to determine\r\nwhich plants belong to each student.\r\n\r\nFor example, if it's told that the garden looks like so:\r\n\r\n```text\r\n[window][window][window]\r\nVRCGVVRVCGGCCGVRGCVCGCGV\r\nVRCCCGCRRGVCGCRVVCVGCGCV\r\n```\r\n\r\nThen if asked for Alice's plants, it should provide:\r\n\r\n- Violets, radishes, violets, radishes\r\n\r\nWhile asking for Bob's plants would yield:\r\n\r\n- Clover, grass, clover, clover\r\n"
 "# Instructions\r\n\r\nYour task is to look for patterns in the long sequence of digits in the encrypted signal.\r\n\r\nThe technique you're going to use here is called the largest series product.\r\n\r\nLet's define a few terms, first.\r\n\r\n- **input**: the sequence of digits that you need to analyze\r\n- **series**: a sequence of adjacent digits (those that are next to each other) that is contained within the input\r\n- **span**: how many digits long each series is\r\n- **product**: what you get when you multiply numbers together\r\n\r\nLet's work through an example, with the input `\"63915\"`.\r\n\r\n- To form a series, take adjacent digits in the original input.\r\n- If you are working with a span of `3`, there will be three possible series:\r\n  - `\"639\"`\r\n  - `\"391\"`\r\n  - `\"915\"`\r\n- Then we need to calculate the product of each series:\r\n  - The product of the series `\"639\"` is 162 (`6 × 3 × 9 = 162`)\r\n  - The product of the series `\"391\"` is 27 (`3 × 9 × 1 = 27`)\r\n  - The product of the series `\"915\"` is 45 (`9 × 1 × 5 = 45`)\r\n- 162 is bigger than both 27 and 45, so the largest series product of `\"63915\"` is from the series `\"639\"`.\r\n  So the answer is **162**.\r\n"
 "# Instructions\r\n\r\nGiven a year, report if it is a leap year.\r\n\r\nThe tricky thing here is that a leap year in the Gregorian calendar occurs:\r\n\r\n```text\r\non every year that is evenly divisible by 4\r\n  except every year that is evenly divisible by 100\r\n    unless the year is also evenly divisible by 400\r\n```\r\n\r\nFor example, 1997 is not a leap year, but 1996 is.  1900 is not a leap\r\nyear, but 2000 is.\r\n\r\n## Notes\r\n\r\nThough our exercise adopts some very simple rules, there is more to\r\nlearn!\r\n\r\nFor a delightful, four minute explanation of the whole leap year\r\nphenomenon, go watch [this youtube video][video].\r\n\r\n[video]: http://www.youtube.com/watch?v=xX96xng7sAE\r\n"
 "# Instructions\r\n\r\nGiven a number determine whether or not it is valid per the Luhn formula.\r\n\r\nThe [Luhn algorithm](https://en.wikipedia.org/wiki/Luhn_algorithm) is\r\na simple checksum formula used to validate a variety of identification\r\nnumbers, such as credit card numbers and Canadian Social Insurance\r\nNumbers.\r\n\r\nThe task is to check if a given string is valid.\r\n\r\nValidating a Number\r\n------\r\n\r\nStrings of length 1 or less are not valid. Spaces are allowed in the input,\r\nbut they should be stripped before checking. All other non-digit characters\r\nare disallowed.\r\n\r\n## Example 1: valid credit card number\r\n\r\n```text\r\n4539 3195 0343 6467\r\n```\r\n\r\nThe first step of the Luhn algorithm is to double every second digit,\r\nstarting from the right. We will be doubling\r\n\r\n```text\r\n4_3_ 3_9_ 0_4_ 6_6_\r\n```\r\n\r\nIf doubling the number results in a number greater than 9 then subtract 9\r\nfrom the product. The results of our doubling:\r\n\r\n```text\r\n8569 6195 0383 3437\r\n```\r\n\r\nThen sum all of the digits:\r\n\r\n```text\r\n8+5+6+9+6+1+9+5+0+3+8+3+3+4+3+7 = 80\r\n```\r\n\r\nIf the sum is evenly divisible by 10, then the number is valid. This number is valid!\r\n\r\n## Example 2: invalid credit card number\r\n\r\n```text\r\n8273 1232 7352 0569\r\n```\r\n\r\nDouble the second digits, starting from the right\r\n\r\n```text\r\n7253 2262 5312 0539\r\n```\r\n\r\nSum the digits\r\n\r\n```text\r\n7+2+5+3+2+2+6+2+5+3+1+2+0+5+3+9 = 57\r\n```\r\n\r\n57 is not evenly divisible by 10, so this number is not valid.\r\n"
 "# Instructions\r\n\r\nGiven a string containing brackets `[]`, braces `{}`, parentheses `()`,\r\nor any combination thereof, verify that any and all pairs are matched\r\nand nested correctly.\r\n"
 "# Instructions\r\n\r\nCalculate the date of meetups.\r\n\r\nTypically meetups happen on the same day of the week.  In this exercise, you\r\nwill take a description of a meetup date, and return the actual meetup date.\r\n\r\nExamples of general descriptions are:\r\n\r\n- The first Monday of January 2017\r\n- The third Tuesday of January 2017\r\n- The wednesteenth of January 2017\r\n- The last Thursday of January 2017\r\n\r\nThe descriptors you are expected to parse are:\r\nfirst, second, third, fourth, fifth, last, monteenth, tuesteenth, wednesteenth,\r\nthursteenth, friteenth, saturteenth, sunteenth\r\n\r\nNote that \"monteenth\", \"tuesteenth\", etc are all made up words. There was a\r\nmeetup whose members realized that there are exactly 7 numbered days in a month\r\nthat end in '-teenth'. Therefore, one is guaranteed that each day of the week\r\n(Monday, Tuesday, ...) will have exactly one date that is named with '-teenth'\r\nin every month.\r\n\r\nGiven examples of a meetup dates, each containing a month, day, year, and\r\ndescriptor calculate the date of the actual meetup.  For example, if given\r\n\"The first Monday of January 2017\", the correct meetup date is 2017/1/2.\r\n"
 "# Instructions\r\n\r\nAdd the mine counts to a completed Minesweeper board.\r\n\r\nMinesweeper is a popular game where the user has to find the mines using\r\nnumeric hints that indicate how many mines are directly adjacent\r\n(horizontally, vertically, diagonally) to a square.\r\n\r\nIn this exercise you have to create some code that counts the number of\r\nmines adjacent to a given empty square and replaces that square with the\r\ncount.\r\n\r\nThe board is a rectangle composed of blank space (' ') characters. A mine\r\nis represented by an asterisk ('\\*') character.\r\n\r\nIf a given space has no adjacent mines at all, leave that square blank.\r\n\r\n## Examples\r\n\r\nFor example you may receive a 5 x 4 board like this (empty spaces are\r\nrepresented here with the '·' character for display on screen):\r\n\r\n```\r\n·*·*·\r\n··*··\r\n··*··\r\n·····\r\n```\r\n\r\nAnd your code will transform it into this:\r\n\r\n```\r\n1*3*1\r\n13*31\r\n·2*2·\r\n·111·\r\n```\r\n"
 "# Instructions\r\n\r\nGiven a number n, determine what the nth prime is.\r\n\r\nBy listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that\r\nthe 6th prime is 13.\r\n\r\nIf your language provides methods in the standard library to deal with prime\r\nnumbers, pretend they don't exist and implement them yourself.\r\n"
 "# Instructions\r\n\r\nEach of us inherits from our biological parents a set of chemical instructions known as DNA that influence how our bodies are constructed. All known life depends on DNA!\r\n\r\n> Note: You do not need to understand anything about nucleotides or DNA to complete this exercise.\r\n\r\nDNA is a long chain of other chemicals and the most important are the four nucleotides, adenine, cytosine, guanine and thymine. A single DNA chain can contain billions of these four nucleotides and the order in which they occur is important!\r\nWe call the order of these nucleotides in a bit of DNA a \"DNA sequence\".\r\n\r\nWe represent a DNA sequence as an ordered collection of these four nucleotides and a common way to do that is with a string of characters such as \"ATTACG\" for a DNA sequence of 6 nucleotides.\r\n'A' for adenine, 'C' for cytosine, 'G' for guanine, and 'T' for thymine.\r\n\r\nGiven a string representing a DNA sequence, count how many of each nucleotide is present.\r\nIf the string contains characters that aren't A, C, G, or T then it is invalid and you should signal an error.\r\n\r\nFor example:\r\n\r\n```\r\n\"GATTACA\" -> 'A': 3, 'C': 1, 'G': 1, 'T': 2\r\n\"INVALID\" -> error\r\n```\r\n"
 "# Instructions\r\n\r\nConvert an octal number, represented as a string (e.g. '1735263'), to its\r\ndecimal equivalent using first principles (i.e. no, you may not use built-in or\r\nexternal libraries to accomplish the conversion).\r\n\r\nImplement octal to decimal conversion.  Given an octal input\r\nstring, your program should produce a decimal output.\r\n\r\n## Note\r\n\r\n- Implement the conversion yourself.\r\n  Do not use something else to perform the conversion for you.\r\n- Treat invalid input as octal 0.\r\n\r\n## About Octal (Base-8)\r\n\r\nDecimal is a base-10 system.\r\n\r\nA number 233 in base 10 notation can be understood\r\nas a linear combination of powers of 10:\r\n\r\n- The rightmost digit gets multiplied by 10^0 = 1\r\n- The next number gets multiplied by 10^1 = 10\r\n- ...\r\n- The *n*th number gets multiplied by 10^*(n-1)*.\r\n- All these values are summed.\r\n\r\nSo:\r\n\r\n```text\r\n   233 # decimal\r\n = 2*10^2 + 3*10^1 + 3*10^0\r\n = 2*100  + 3*10   + 3*1\r\n```\r\n\r\nOctal is similar, but uses powers of 8 rather than powers of 10.\r\n\r\nSo:\r\n\r\n```text\r\n   233 # octal\r\n = 2*8^2 + 3*8^1 + 3*8^0\r\n = 2*64  + 3*8   + 3*1\r\n = 128   + 24    + 3\r\n = 155\r\n```\r\n"
 "# Instructions\r\n\r\nYour task is to figure out if a sentence is a pangram.\r\n\r\nA pangram is a sentence using every letter of the alphabet at least once.\r\nIt is case insensitive, so it doesn't matter if a letter is lower-case (e.g. `k`) or upper-case (e.g. `K`).\r\n\r\nFor this exercise we only use the basic letters used in the English alphabet: `a` to `z`.\r\n"
 "# Instructions\r\n\r\nCompute Pascal's triangle up to a given number of rows.\r\n\r\nIn Pascal's Triangle each number is computed by adding the numbers to\r\nthe right and left of the current position in the previous row.\r\n\r\n```text\r\n    1\r\n   1 1\r\n  1 2 1\r\n 1 3 3 1\r\n1 4 6 4 1\r\n# ... etc\r\n```\r\n"
 "# Instructions\r\n\r\nDetermine if a number is perfect, abundant, or deficient based on\r\nNicomachus' (60 - 120 CE) classification scheme for positive integers.\r\n\r\nThe Greek mathematician [Nicomachus](https://en.wikipedia.org/wiki/Nicomachus) devised a classification scheme for positive integers, identifying each as belonging uniquely to the categories of **perfect**, **abundant**, or **deficient** based on their [aliquot sum](https://en.wikipedia.org/wiki/Aliquot_sum). The aliquot sum is defined as the sum of the factors of a number not including the number itself. For example, the aliquot sum of 15 is (1 + 3 + 5) = 9\r\n\r\n- **Perfect**: aliquot sum = number\r\n  - 6 is a perfect number because (1 + 2 + 3) = 6\r\n  - 28 is a perfect number because (1 + 2 + 4 + 7 + 14) = 28\r\n- **Abundant**: aliquot sum > number\r\n  - 12 is an abundant number because (1 + 2 + 3 + 4 + 6) = 16\r\n  - 24 is an abundant number because (1 + 2 + 3 + 4 + 6 + 8 + 12) = 36\r\n- **Deficient**: aliquot sum < number\r\n  - 8 is a deficient number because (1 + 2 + 4) = 7\r\n  - Prime numbers are deficient\r\n\r\nImplement a way to determine whether a given number is **perfect**. Depending on your language track, you may also need to implement a way to determine whether a given number is **abundant** or **deficient**.\r\n"
 "# Instructions\r\n\r\nClean up user-entered phone numbers so that they can be sent SMS messages.\r\n\r\nThe **North American Numbering Plan (NANP)** is a telephone numbering system used by many countries in North America like the United States, Canada or Bermuda. All NANP-countries share the same international country code: `1`.\r\n\r\nNANP numbers are ten-digit numbers consisting of a three-digit Numbering Plan Area code, commonly known as *area code*, followed by a seven-digit local number. The first three digits of the local number represent the *exchange code*, followed by the unique four-digit number which is the *subscriber number*.\r\n\r\nThe format is usually represented as\r\n\r\n```text\r\n(NXX)-NXX-XXXX\r\n```\r\n\r\nwhere `N` is any digit from 2 through 9 and `X` is any digit from 0 through 9.\r\n\r\nYour task is to clean up differently formatted telephone numbers by removing punctuation and the country code (1) if present.\r\n\r\nFor example, the inputs\r\n- `+1 (613)-995-0253`\r\n- `613-995-0253`\r\n- `1 613 995 0253`\r\n- `613.995.0253`\r\n\r\nshould all produce the output\r\n\r\n`6139950253`\r\n\r\n**Note:** As this exercise only deals with telephone numbers used in NANP-countries, only 1 is considered a valid country code.\r\n"
 "# Instructions\r\n\r\nImplement a program that translates from English to Pig Latin.\r\n\r\nPig Latin is a made-up children's language that's intended to be\r\nconfusing. It obeys a few simple rules (below), but when it's spoken\r\nquickly it's really difficult for non-children (and non-native speakers)\r\nto understand.\r\n\r\n- **Rule 1**: If a word begins with a vowel sound, add an \"ay\" sound to the end of the word. Please note that \"xr\" and \"yt\" at the beginning of a word make vowel sounds (e.g. \"xray\" -> \"xrayay\", \"yttria\" -> \"yttriaay\").\r\n- **Rule 2**: If a word begins with a consonant sound, move it to the end of the word and then add an \"ay\" sound to the end of the word. Consonant sounds can be made up of multiple consonants, a.k.a. a consonant cluster (e.g. \"chair\" -> \"airchay\").\r\n- **Rule 3**: If a word starts with a consonant sound followed by \"qu\", move it to the end of the word, and then add an \"ay\" sound to the end of the word (e.g. \"square\" -> \"aresquay\").\r\n- **Rule 4**: If a word contains a \"y\" after a consonant cluster or as the second letter in a two letter word it makes a vowel sound (e.g. \"rhythm\" -> \"ythmrhay\", \"my\" -> \"ymay\").\r\n\r\nThere are a few more rules for edge cases, and there are regional\r\nvariants too.\r\n\r\nSee <http://en.wikipedia.org/wiki/Pig_latin> for more details.\r\n"
 "# Instructions\r\n\r\nPick the best hand(s) from a list of poker hands.\r\n\r\nSee [wikipedia](https://en.wikipedia.org/wiki/List_of_poker_hands) for an\r\noverview of poker hands.\r\n"
 "# Instructions\r\n\r\nReparent a graph on a selected node.\r\n\r\nThis exercise is all about re-orientating a graph to see things from a different\r\npoint of view. For example family trees are usually presented from the\r\nancestor's perspective:\r\n\r\n```text\r\n    +------0------+\r\n    |      |      |\r\n  +-1-+  +-2-+  +-3-+\r\n  |   |  |   |  |   |\r\n  4   5  6   7  8   9\r\n```\r\n\r\nBut the same information can be presented from the perspective of any other node\r\nin the graph, by pulling it up to the root and dragging its relationships along\r\nwith it. So the same graph from 6's perspective would look like:\r\n\r\n```text\r\n        6\r\n        |\r\n  +-----2-----+\r\n  |           |\r\n  7     +-----0-----+\r\n        |           |\r\n      +-1-+       +-3-+\r\n      |   |       |   |\r\n      4   5       8   9\r\n```\r\n\r\nThis lets us more simply describe the paths between two nodes. So for example\r\nthe path from 6-9 (which in the first graph goes up to the root and then down to\r\na different leaf node) can be seen to follow the path 6-2-0-3-9\r\n\r\nThis exercise involves taking an input graph and re-orientating it from the point\r\nof view of one of the nodes.\r\n"
 "# Instructions\r\n\r\nCompute the prime factors of a given natural number.\r\n\r\nA prime number is only evenly divisible by itself and 1.\r\n\r\nNote that 1 is not a prime number.\r\n\r\n## Example\r\n\r\nWhat are the prime factors of 60?\r\n\r\n- Our first divisor is 2. 2 goes into 60, leaving 30.\r\n- 2 goes into 30, leaving 15.\r\n  - 2 doesn't go cleanly into 15. So let's move on to our next divisor, 3.\r\n- 3 goes cleanly into 15, leaving 5.\r\n  - 3 does not go cleanly into 5. The next possible factor is 4.\r\n  - 4 does not go cleanly into 5. The next possible factor is 5.\r\n- 5 does go cleanly into 5.\r\n- We're left only with 1, so now, we're done.\r\n\r\nOur successful divisors in that computation represent the list of prime\r\nfactors of 60: 2, 2, 3, and 5.\r\n\r\nYou can check this yourself:\r\n\r\n- 2 * 2 * 3 * 5\r\n- = 4 * 15\r\n- = 60\r\n- Success!\r\n"
 ...)
clj꞉user꞉> 
nil
clj꞉user꞉> 
; nREPL connection failed: Error: read ECONNRESET
; Failed connecting.
; nREPL Connection was closed
#'two-fer/two-fer
clj꞉two-fer꞉> 
; clojure.lang.ExceptionInfo: Could not resolve symbol: two-fer user c:\Users\porko\exercism-express\scratch.clj:1:1
clj꞉user꞉> 
#'user/two-fer
clj꞉user꞉> 
"One for you, one for me."
clj꞉user꞉> 
#'user/two-fer
clj꞉user꞉> 
"One for you, one for me."
clj꞉user꞉> 
